..
    Authors: 
        Andrés Cifuentes
        David Tosse
    email:
        {afcifuentesg, dftossem}@unal.edu.co
..

PRIA & Odoo
===========

La prueba consiste en un ciclo de operacion en donde se utilizan dos máquinas: Torno & Motoman.

Se contempla un escenario industrial en donde el diseño del proceso es acompañado por una plataforma de apoyo en PLM (Odoo) en donde se crean usuarios que son responsables de interactuar con los archivos y con los demás participantes. El objetivo final es poder comparar los tiempos proyectados con los reales. Finalmente se puede calcular algún indicador de productividad, en este caso el OEE.

.. image:: img/pria_odoo.jpg

La ECO ordena entonces el cambio de rama para la ejecución de la rutina mejorada::

    git pull
    git checkout pilot_2019_2

Reglaje de máquinas
-------------------

Para el desarrollo exitoso de la prueba se deben consultar los requerimientos establecidos dentro de los documentos de Odoo, así como la conexión de todas las máquinas con la base de datos.

.. image:: img/pallete_lathe.jpg

Correcta posición de la mesa:

.. image:: img/table_pick_place.jpg

La cámara ubicada en la muñeca del robot Motoman es la que se muestra a continuación:

.. image:: img/camera_motoman.jpg

El correcto posicionamiento de la cámara se garantiza cuando las cintas se encuentran alineadas, esta alineación se puede corregir de forma manual.

.. image:: img/camera_tapes.jpg

.. plot::

   import matplotlib.pyplot as plt
   import numpy as np
   slow = [273.178, 273.142, 273.095, 273.181, 273.240, 273.166, 273.210, 272.962, 273.171, 273.110]
   plt.hist(slow, 4)
   plt.grid()
   mean_slow = np.mean(slow)
   std_slow = np.std(slow)
   plt.title(r'Version_1: $\mu=%.2f, \sigma=%.2f$'%(mean_slow, std_slow))
   axes = plt.gca()
   axes.set_xlim([272.9,273.5])
   axes.set_ylim([0, 5])
   plt.ylabel('Pieces')
   plt.xlabel('Time [s]')
   plt.show()

.. plot::

   import matplotlib.pyplot as plt
   import numpy as np
   fast = [183.248, 183.243, 183.255, 183.268, 183.267, 183.258, 183.143, 183.215, 183.298, 183.207]
   plt.hist(fast, 4)
   plt.grid()
   mean_fast = np.mean(fast)
   std_fast = np.std(fast)
   plt.title(r'Version_2: $\mu=%.2f, \sigma=%.2f$'%(mean_fast, std_fast))
   axes = plt.gca()
   axes.set_xlim([183.1,183.4])
   axes.set_ylim([0, 5])
   plt.ylabel('Pieces')
   plt.xlabel('Time [s]')
   plt.show()


Productividad
-------------

Se calcula a partir de la relación del tiempo real (:math:`T_r`) y el tiempo estimado (:math:`T_s`).

:math:`P = \frac{T_s}{T_r}`

Con un tiempo estimado de 180 segundos los resultados son los siguientes:

:math:`P_{version 1} = 0.983`

:math:`P_{version 2} = 0.658`

.. plot::

    import matplotlib.pyplot as plt
    import numpy as np
    import scipy.stats as stats
    import math
    mu_slow = 273.15
    var_slow = 0.07
    sigma_slow = math.sqrt(var_slow)
    mu_fast = 183.24
    var_fast = 0.04
    ideal_x = 180
    ideal_y = 1
    sigma_fast = math.sqrt(var_fast)
    x_fast = np.linspace(mu_fast - 3*sigma_fast, mu_fast + 3*sigma_fast, 100)
    x_slow = np.linspace(mu_slow - 3*sigma_slow, mu_slow + 3*sigma_slow, 100)
    plt.plot(x_slow, stats.norm.pdf(x_slow, mu_slow, sigma_slow), 'b-', label='Original')
    plt.plot(x_fast, stats.norm.pdf(x_fast, mu_fast, sigma_fast), 'r-', label='Version 2')
    plt.axvline(x=180, color='g', label='Ideal')
    axes = plt.gca()
    axes.set_xlim([178,275])
    axes.set_ylim([0,2.1])
    axes.legend(loc=1)
    plt.ylabel('Probability distributions')
    plt.xlabel('Time [s]')
    plt.grid(b=True)
    plt.show()
