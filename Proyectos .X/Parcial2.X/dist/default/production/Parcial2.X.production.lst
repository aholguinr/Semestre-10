

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Tue Feb 01 15:20:32 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og9 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    22  0000                     
    23                           ; Version 2.32
    24                           ; Generated 02/02/2021 GMT
    25                           ; 
    26                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution. Publication is not required when
    40                           ;        this file is used in an embedded application.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC18F4550 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     _ADRESH	set	4036
    59  0000                     _TXREG	set	4013
    60  0000                     _RCREG	set	4014
    61  0000                     _SPBRG	set	4015
    62  0000                     _BAUDCON	set	4024
    63  0000                     _RCSTA	set	4011
    64  0000                     _TXSTA	set	4012
    65  0000                     _ADCON2	set	4032
    66  0000                     _ADCON1	set	4033
    67  0000                     _ADCON0	set	4034
    68  0000                     _TRISE	set	3990
    69  0000                     _TRISA	set	3986
    70  0000                     _GO	set	32273
    71  0000                     _TRMT	set	32097
    72  0000                     _RCIF	set	31989
    73                           
    74                           	psect	smallconst
    75  000800                     __psmallconst:
    76                           	callstack 0
    77  000800  00                 	db	0
    78  000801                     STR_1:
    79  000801  45                 	db	69	;'E'
    80  000802  52                 	db	82	;'R'
    81  000803  52                 	db	82	;'R'
    82  000804  4F                 	db	79	;'O'
    83  000805  52                 	db	82	;'R'
    84  000806  00                 	db	0
    85  000807  00                 	db	0	; dummy byte at the end
    86  0000                     
    87                           ; #config settings
    88                           
    89                           	psect	cinit
    90  000ADE                     __pcinit:
    91                           	callstack 0
    92  000ADE                     start_initialization:
    93                           	callstack 0
    94  000ADE                     __initialization:
    95                           	callstack 0
    96                           
    97                           ; Clear objects allocated to COMRAM (3 bytes)
    98  000ADE  6A1A               	clrf	(__pbssCOMRAM+2)& (0+255),c
    99  000AE0  6A19               	clrf	(__pbssCOMRAM+1)& (0+255),c
   100  000AE2  6A18               	clrf	__pbssCOMRAM& (0+255),c
   101  000AE4                     end_of_initialization:
   102                           	callstack 0
   103  000AE4                     __end_of__initialization:
   104                           	callstack 0
   105  000AE4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   106  000AE6  6EF8               	movwf	tblptru,c
   107  000AE8  0100               	movlb	0
   108  000AEA  EFAF  F004         	goto	_main	;jump to C main() function
   109                           
   110                           	psect	bssCOMRAM
   111  000018                     __pbssCOMRAM:
   112                           	callstack 0
   113  000018                     _Van:
   114                           	callstack 0
   115  000018                     	ds	2
   116  00001A                     _canal:
   117                           	callstack 0
   118  00001A                     	ds	1
   119                           
   120                           	psect	cstackCOMRAM
   121  000001                     __pcstackCOMRAM:
   122                           	callstack 0
   123  000001                     ??_Conversion:
   124  000001                     ?___wmul:
   125                           	callstack 0
   126  000001                     ?___lwmod:
   127                           	callstack 0
   128  000001                     Transmitir@BufferT:
   129                           	callstack 0
   130  000001                     ___wmul@multiplier:
   131                           	callstack 0
   132  000001                     ___lwmod@dividend:
   133                           	callstack 0
   134                           
   135                           ; 2 bytes @ 0x0
   136  000001                     	ds	1
   137  000002                     TransmitirMensaje@a:
   138                           	callstack 0
   139  000002                     Conversion@canal:
   140                           	callstack 0
   141                           
   142                           ; 1 bytes @ 0x1
   143  000002                     	ds	1
   144  000003                     ___wmul@multiplicand:
   145                           	callstack 0
   146  000003                     ___lwmod@divisor:
   147                           	callstack 0
   148                           
   149                           ; 2 bytes @ 0x2
   150  000003                     	ds	2
   151  000005                     ___lwmod@counter:
   152                           	callstack 0
   153  000005                     ___wmul@product:
   154                           	callstack 0
   155                           
   156                           ; 2 bytes @ 0x4
   157  000005                     	ds	1
   158  000006                     ?___lwdiv:
   159                           	callstack 0
   160  000006                     ___lwdiv@dividend:
   161                           	callstack 0
   162                           
   163                           ; 2 bytes @ 0x5
   164  000006                     	ds	2
   165  000008                     ___lwdiv@divisor:
   166                           	callstack 0
   167                           
   168                           ; 2 bytes @ 0x7
   169  000008                     	ds	2
   170  00000A                     ___lwdiv@quotient:
   171                           	callstack 0
   172                           
   173                           ; 2 bytes @ 0x9
   174  00000A                     	ds	2
   175  00000C                     ___lwdiv@counter:
   176                           	callstack 0
   177                           
   178                           ; 1 bytes @ 0xB
   179  00000C                     	ds	1
   180  00000D                     TransmitirNumero@a:
   181                           	callstack 0
   182                           
   183                           ; 2 bytes @ 0xC
   184  00000D                     	ds	2
   185  00000F                     TransmitirNumero@centena:
   186                           	callstack 0
   187                           
   188                           ; 2 bytes @ 0xE
   189  00000F                     	ds	2
   190  000011                     TransmitirNumero@b:
   191                           	callstack 0
   192                           
   193                           ; 1 bytes @ 0x10
   194  000011                     	ds	1
   195  000012                     TransmitirNumero@var:
   196                           	callstack 0
   197                           
   198                           ; 2 bytes @ 0x11
   199  000012                     	ds	2
   200  000014                     TransmitirNumero@decena:
   201                           	callstack 0
   202                           
   203                           ; 1 bytes @ 0x13
   204  000014                     	ds	1
   205  000015                     TransmitirNumero@unidad:
   206                           	callstack 0
   207                           
   208                           ; 1 bytes @ 0x14
   209  000015                     	ds	1
   210  000016                     ??_main:
   211                           
   212                           ; 1 bytes @ 0x15
   213  000016                     	ds	2
   214                           
   215 ;;
   216 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   217 ;;
   218 ;; *************** function _main *****************
   219 ;; Defined at:
   220 ;;		line 26 in file "Parcial2.c"
   221 ;; Parameters:    Size  Location     Type
   222 ;;		None
   223 ;; Auto vars:     Size  Location     Type
   224 ;;		None
   225 ;; Return value:  Size  Location     Type
   226 ;;                  1    wreg      void 
   227 ;; Registers used:
   228 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   229 ;; Tracked objects:
   230 ;;		On entry : 0/0
   231 ;;		On exit  : 0/0
   232 ;;		Unchanged: 0/0
   233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   234 ;;      Params:         0       0       0       0       0       0       0       0       0
   235 ;;      Locals:         0       0       0       0       0       0       0       0       0
   236 ;;      Temps:          2       0       0       0       0       0       0       0       0
   237 ;;      Totals:         2       0       0       0       0       0       0       0       0
   238 ;;Total ram usage:        2 bytes
   239 ;; Hardware stack levels required when called: 2
   240 ;; This function calls:
   241 ;;		_Conversion
   242 ;;		_Recibir
   243 ;;		_TransmitirMensaje
   244 ;;		_TransmitirNumero
   245 ;; This function is called by:
   246 ;;		Startup code after reset
   247 ;; This function uses a non-reentrant model
   248 ;;
   249                           
   250                           	psect	text0
   251  00095E                     __ptext0:
   252                           	callstack 0
   253  00095E                     _main:
   254                           	callstack 29
   255                           
   256                           ;Parcial2.c: 28: TRISA=1;
   257                           
   258                           ;incstack = 0
   259  00095E  0E01               	movlw	1
   260  000960  6E92               	movwf	146,c	;volatile
   261                           
   262                           ;Parcial2.c: 29: TRISE=1;
   263  000962  0E01               	movlw	1
   264  000964  6E96               	movwf	150,c	;volatile
   265                           
   266                           ;Parcial2.c: 31: ADCON0=0b00000001;
   267  000966  0E01               	movlw	1
   268  000968  6EC2               	movwf	194,c	;volatile
   269                           
   270                           ;Parcial2.c: 32: ADCON1=7;
   271  00096A  0E07               	movlw	7
   272  00096C  6EC1               	movwf	193,c	;volatile
   273                           
   274                           ;Parcial2.c: 33: ADCON2=0b00001000;
   275  00096E  0E08               	movlw	8
   276  000970  6EC0               	movwf	192,c	;volatile
   277                           
   278                           ;Parcial2.c: 35: TXSTA=0b00100100;
   279  000972  0E24               	movlw	36
   280  000974  6EAC               	movwf	172,c	;volatile
   281                           
   282                           ;Parcial2.c: 36: RCSTA=0b10010000;
   283  000976  0E90               	movlw	144
   284  000978  6EAB               	movwf	171,c	;volatile
   285                           
   286                           ;Parcial2.c: 37: BAUDCON=0b00001000;
   287  00097A  0E08               	movlw	8
   288  00097C  6EB8               	movwf	184,c	;volatile
   289                           
   290                           ;Parcial2.c: 38: SPBRG=25;
   291  00097E  0E19               	movlw	25
   292  000980  6EAF               	movwf	175,c	;volatile
   293                           
   294                           ;Parcial2.c: 41: _delay((unsigned long)((200)*(1000000/4000.0)));
   295  000982  0E41               	movlw	65
   296  000984  6E16               	movwf	??_main^0,c
   297  000986  0EEE               	movlw	238
   298  000988                     u227:
   299  000988  2EE8               	decfsz	wreg,f,c
   300  00098A  D7FE               	bra	u227
   301  00098C  2E16               	decfsz	??_main^0,f,c
   302  00098E  D7FC               	bra	u227
   303  000990  D000               	nop2	
   304  000992                     l1016:
   305                           
   306                           ;Parcial2.c: 45: canal=Recibir()-48;
   307  000992  EC7D  F005         	call	_Recibir	;wreg free
   308  000996  0FD0               	addlw	208
   309  000998  6E1A               	movwf	_canal^0,c
   310                           
   311                           ;Parcial2.c: 47: if(canal<8&&canal>=0){
   312  00099A  0E08               	movlw	8
   313  00099C  601A               	cpfslt	_canal^0,c
   314  00099E  D00E               	goto	l1024
   315                           
   316                           ;Parcial2.c: 48: Van=Conversion(canal);
   317  0009A0  501A               	movf	_canal^0,w,c
   318  0009A2  EC5F  F005         	call	_Conversion
   319  0009A6  6E16               	movwf	??_main^0,c
   320  0009A8  5016               	movf	??_main^0,w,c
   321  0009AA  6E18               	movwf	_Van^0,c
   322  0009AC  6A19               	clrf	(_Van+1)^0,c
   323                           
   324                           ;Parcial2.c: 49: TransmitirNumero(Van);
   325  0009AE  C018  F00D         	movff	_Van,TransmitirNumero@a
   326  0009B2  C019  F00E         	movff	_Van+1,TransmitirNumero@a+1
   327  0009B6  EC04  F004         	call	_TransmitirNumero	;wreg free
   328                           
   329                           ;Parcial2.c: 50: }else{
   330  0009BA  D004               	goto	l1026
   331  0009BC                     l1024:
   332                           
   333                           ;Parcial2.c: 51: TransmitirMensaje("ERROR");
   334  0009BC  0E01               	movlw	low STR_1
   335  0009BE  6E02               	movwf	TransmitirMensaje@a^0,c
   336  0009C0  EC38  F005         	call	_TransmitirMensaje	;wreg free
   337  0009C4                     l1026:
   338                           
   339                           ;Parcial2.c: 52: };Parcial2.c: 53: _delay((unsigned long)((1000)*(1000000/4000.0)));
   340  0009C4  0E02               	movlw	2
   341  0009C6  6E17               	movwf	(??_main+1)^0,c
   342  0009C8  0E45               	movlw	69
   343  0009CA  6E16               	movwf	??_main^0,c
   344  0009CC  0EAA               	movlw	170
   345  0009CE                     u237:
   346  0009CE  2EE8               	decfsz	wreg,f,c
   347  0009D0  D7FE               	bra	u237
   348  0009D2  2E16               	decfsz	??_main^0,f,c
   349  0009D4  D7FC               	bra	u237
   350  0009D6  2E17               	decfsz	(??_main+1)^0,f,c
   351  0009D8  D7FA               	bra	u237
   352  0009DA  D7DB               	goto	l1016
   353  0009DC                     __end_of_main:
   354                           	callstack 0
   355                           
   356 ;; *************** function _TransmitirNumero *****************
   357 ;; Defined at:
   358 ;;		line 75 in file "Parcial2.c"
   359 ;; Parameters:    Size  Location     Type
   360 ;;  a               2   12[COMRAM] unsigned int 
   361 ;; Auto vars:     Size  Location     Type
   362 ;;  var             2   17[COMRAM] int 
   363 ;;  centena         2   14[COMRAM] unsigned int 
   364 ;;  unidad          1   20[COMRAM] unsigned char 
   365 ;;  decena          1   19[COMRAM] unsigned char 
   366 ;;  b               1   16[COMRAM] unsigned char 
   367 ;; Return value:  Size  Location     Type
   368 ;;                  1    wreg      void 
   369 ;; Registers used:
   370 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   371 ;; Tracked objects:
   372 ;;		On entry : 0/0
   373 ;;		On exit  : 0/0
   374 ;;		Unchanged: 0/0
   375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   376 ;;      Params:         2       0       0       0       0       0       0       0       0
   377 ;;      Locals:         7       0       0       0       0       0       0       0       0
   378 ;;      Temps:          0       0       0       0       0       0       0       0       0
   379 ;;      Totals:         9       0       0       0       0       0       0       0       0
   380 ;;Total ram usage:        9 bytes
   381 ;; Hardware stack levels used: 1
   382 ;; Hardware stack levels required when called: 1
   383 ;; This function calls:
   384 ;;		_Transmitir
   385 ;;		___lwdiv
   386 ;;		___lwmod
   387 ;;		___wmul
   388 ;; This function is called by:
   389 ;;		_main
   390 ;; This function uses a non-reentrant model
   391 ;;
   392                           
   393                           	psect	text1
   394  000808                     __ptext1:
   395                           	callstack 0
   396  000808                     _TransmitirNumero:
   397                           	callstack 29
   398                           
   399                           ;Parcial2.c: 76: unsigned char decena,unidad;;Parcial2.c: 77: unsigned int centena;;Parc
      +                          ial2.c: 78: int var=1;
   400                           
   401                           ;incstack = 0
   402  000808  0E00               	movlw	0
   403  00080A  6E13               	movwf	(TransmitirNumero@var+1)^0,c
   404  00080C  0E01               	movlw	1
   405  00080E  6E12               	movwf	TransmitirNumero@var^0,c
   406                           
   407                           ;Parcial2.c: 79: char b=0;
   408  000810  0E00               	movlw	0
   409  000812  6E11               	movwf	TransmitirNumero@b^0,c
   410                           
   411                           ;Parcial2.c: 80: while(a>=var){
   412  000814  D00F               	goto	l992
   413  000816                     l988:
   414                           
   415                           ;Parcial2.c: 81: var*=10;
   416  000816  C012  F001         	movff	TransmitirNumero@var,___wmul@multiplier
   417  00081A  C013  F002         	movff	TransmitirNumero@var+1,___wmul@multiplier+1
   418  00081E  0E00               	movlw	0
   419  000820  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   420  000822  0E0A               	movlw	10
   421  000824  6E03               	movwf	___wmul@multiplicand^0,c
   422  000826  EC4C  F005         	call	___wmul	;wreg free
   423  00082A  C001  F012         	movff	?___wmul,TransmitirNumero@var
   424  00082E  C002  F013         	movff	?___wmul+1,TransmitirNumero@var+1
   425                           
   426                           ;Parcial2.c: 82: b+=1;
   427  000832  2A11               	incf	TransmitirNumero@b^0,f,c
   428  000834                     l992:
   429  000834  5012               	movf	TransmitirNumero@var^0,w,c
   430  000836  5C0D               	subwf	TransmitirNumero@a^0,w,c
   431  000838  5013               	movf	(TransmitirNumero@var+1)^0,w,c
   432  00083A  580E               	subwfb	(TransmitirNumero@a+1)^0,w,c
   433  00083C  A0D8               	btfss	status,0,c
   434  00083E  D084               	goto	l1002
   435  000840  D7EA               	goto	l988
   436  000842                     l994:
   437  000842  C00D  F001         	movff	TransmitirNumero@a,___lwmod@dividend
   438  000846  C00E  F002         	movff	TransmitirNumero@a+1,___lwmod@dividend+1
   439  00084A  0E00               	movlw	0
   440  00084C  6E04               	movwf	(___lwmod@divisor+1)^0,c
   441  00084E  0E0A               	movlw	10
   442  000850  6E03               	movwf	___lwmod@divisor^0,c
   443  000852  EC17  F005         	call	___lwmod	;wreg free
   444  000856  5001               	movf	?___lwmod^0,w,c
   445  000858  6E15               	movwf	TransmitirNumero@unidad^0,c
   446                           
   447                           ;Parcial2.c: 87: Transmitir(unidad+48);
   448  00085A  5015               	movf	TransmitirNumero@unidad^0,w,c
   449  00085C  0F30               	addlw	48
   450  00085E  EC77  F005         	call	_Transmitir
   451                           
   452                           ;Parcial2.c: 88: break;
   453  000862  0012               	return	
   454  000864                     l996:
   455  000864  0E00               	movlw	0
   456  000866  6E04               	movwf	(___lwmod@divisor+1)^0,c
   457  000868  0E64               	movlw	100
   458  00086A  6E03               	movwf	___lwmod@divisor^0,c
   459  00086C  C00D  F001         	movff	TransmitirNumero@a,___lwmod@dividend
   460  000870  C00E  F002         	movff	TransmitirNumero@a+1,___lwmod@dividend+1
   461  000874  EC17  F005         	call	___lwmod	;wreg free
   462  000878  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   463  00087C  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   464  000880  0E00               	movlw	0
   465  000882  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   466  000884  0E0A               	movlw	10
   467  000886  6E08               	movwf	___lwdiv@divisor^0,c
   468  000888  ECEE  F004         	call	___lwdiv	;wreg free
   469  00088C  5006               	movf	?___lwdiv^0,w,c
   470  00088E  6E14               	movwf	TransmitirNumero@decena^0,c
   471                           
   472                           ;Parcial2.c: 90: unidad=a%10;
   473  000890  C00D  F001         	movff	TransmitirNumero@a,___lwmod@dividend
   474  000894  C00E  F002         	movff	TransmitirNumero@a+1,___lwmod@dividend+1
   475  000898  0E00               	movlw	0
   476  00089A  6E04               	movwf	(___lwmod@divisor+1)^0,c
   477  00089C  0E0A               	movlw	10
   478  00089E  6E03               	movwf	___lwmod@divisor^0,c
   479  0008A0  EC17  F005         	call	___lwmod	;wreg free
   480  0008A4  5001               	movf	?___lwmod^0,w,c
   481  0008A6  6E15               	movwf	TransmitirNumero@unidad^0,c
   482                           
   483                           ;Parcial2.c: 91: Transmitir(decena+48);
   484  0008A8  5014               	movf	TransmitirNumero@decena^0,w,c
   485  0008AA  0F30               	addlw	48
   486  0008AC  EC77  F005         	call	_Transmitir
   487                           
   488                           ;Parcial2.c: 92: Transmitir(unidad+48);
   489  0008B0  5015               	movf	TransmitirNumero@unidad^0,w,c
   490  0008B2  0F30               	addlw	48
   491  0008B4  EC77  F005         	call	_Transmitir
   492                           
   493                           ;Parcial2.c: 93: break;
   494  0008B8  0012               	return	
   495  0008BA                     l998:
   496  0008BA  0E03               	movlw	3
   497  0008BC  6E04               	movwf	(___lwmod@divisor+1)^0,c
   498  0008BE  0EE8               	movlw	232
   499  0008C0  6E03               	movwf	___lwmod@divisor^0,c
   500  0008C2  C00D  F001         	movff	TransmitirNumero@a,___lwmod@dividend
   501  0008C6  C00E  F002         	movff	TransmitirNumero@a+1,___lwmod@dividend+1
   502  0008CA  EC17  F005         	call	___lwmod	;wreg free
   503  0008CE  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   504  0008D2  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   505  0008D6  0E00               	movlw	0
   506  0008D8  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   507  0008DA  0E64               	movlw	100
   508  0008DC  6E08               	movwf	___lwdiv@divisor^0,c
   509  0008DE  ECEE  F004         	call	___lwdiv	;wreg free
   510  0008E2  C006  F00F         	movff	?___lwdiv,TransmitirNumero@centena
   511  0008E6  C007  F010         	movff	?___lwdiv+1,TransmitirNumero@centena+1
   512                           
   513                           ;Parcial2.c: 95: decena=(a%100)/10;
   514  0008EA  0E00               	movlw	0
   515  0008EC  6E04               	movwf	(___lwmod@divisor+1)^0,c
   516  0008EE  0E64               	movlw	100
   517  0008F0  6E03               	movwf	___lwmod@divisor^0,c
   518  0008F2  C00D  F001         	movff	TransmitirNumero@a,___lwmod@dividend
   519  0008F6  C00E  F002         	movff	TransmitirNumero@a+1,___lwmod@dividend+1
   520  0008FA  EC17  F005         	call	___lwmod	;wreg free
   521  0008FE  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   522  000902  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   523  000906  0E00               	movlw	0
   524  000908  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   525  00090A  0E0A               	movlw	10
   526  00090C  6E08               	movwf	___lwdiv@divisor^0,c
   527  00090E  ECEE  F004         	call	___lwdiv	;wreg free
   528  000912  5006               	movf	?___lwdiv^0,w,c
   529  000914  6E14               	movwf	TransmitirNumero@decena^0,c
   530                           
   531                           ;Parcial2.c: 96: unidad=a%10;
   532  000916  C00D  F001         	movff	TransmitirNumero@a,___lwmod@dividend
   533  00091A  C00E  F002         	movff	TransmitirNumero@a+1,___lwmod@dividend+1
   534  00091E  0E00               	movlw	0
   535  000920  6E04               	movwf	(___lwmod@divisor+1)^0,c
   536  000922  0E0A               	movlw	10
   537  000924  6E03               	movwf	___lwmod@divisor^0,c
   538  000926  EC17  F005         	call	___lwmod	;wreg free
   539  00092A  5001               	movf	?___lwmod^0,w,c
   540  00092C  6E15               	movwf	TransmitirNumero@unidad^0,c
   541                           
   542                           ;Parcial2.c: 97: Transmitir(centena+48);
   543  00092E  500F               	movf	TransmitirNumero@centena^0,w,c
   544  000930  0F30               	addlw	48
   545  000932  EC77  F005         	call	_Transmitir
   546                           
   547                           ;Parcial2.c: 98: Transmitir(decena+48);
   548  000936  5014               	movf	TransmitirNumero@decena^0,w,c
   549  000938  0F30               	addlw	48
   550  00093A  EC77  F005         	call	_Transmitir
   551                           
   552                           ;Parcial2.c: 99: Transmitir(unidad+48);
   553  00093E  5015               	movf	TransmitirNumero@unidad^0,w,c
   554  000940  0F30               	addlw	48
   555  000942  EC77  F005         	call	_Transmitir
   556                           
   557                           ;Parcial2.c: 100: break;
   558  000946  0012               	return	
   559  000948                     l1002:
   560  000948  5011               	movf	TransmitirNumero@b^0,w,c
   561                           
   562                           ; Switch size 1, requested type "simple"
   563                           ; Number of cases is 3, Range of values is 1 to 3
   564                           ; switch strategies available:
   565                           ; Name         Instructions Cycles
   566                           ; simple_byte           10     6 (average)
   567                           ;	Chosen strategy is simple_byte
   568  00094A  0A01               	xorlw	1	; case 1
   569  00094C  B4D8               	btfsc	status,2,c
   570  00094E  D779               	goto	l994
   571  000950  0A03               	xorlw	3	; case 2
   572  000952  B4D8               	btfsc	status,2,c
   573  000954  D787               	goto	l996
   574  000956  0A01               	xorlw	1	; case 3
   575  000958  A4D8               	btfss	status,2,c
   576  00095A  0012               	return	
   577  00095C  D7AE               	goto	l998
   578  00095E                     __end_of_TransmitirNumero:
   579                           	callstack 0
   580                           
   581 ;; *************** function ___wmul *****************
   582 ;; Defined at:
   583 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul16.c"
   584 ;; Parameters:    Size  Location     Type
   585 ;;  multiplier      2    0[COMRAM] unsigned int 
   586 ;;  multiplicand    2    2[COMRAM] unsigned int 
   587 ;; Auto vars:     Size  Location     Type
   588 ;;  product         2    4[COMRAM] unsigned int 
   589 ;; Return value:  Size  Location     Type
   590 ;;                  2    0[COMRAM] unsigned int 
   591 ;; Registers used:
   592 ;;		wreg, status,2, status,0, prodl, prodh
   593 ;; Tracked objects:
   594 ;;		On entry : 0/0
   595 ;;		On exit  : 0/0
   596 ;;		Unchanged: 0/0
   597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   598 ;;      Params:         4       0       0       0       0       0       0       0       0
   599 ;;      Locals:         2       0       0       0       0       0       0       0       0
   600 ;;      Temps:          0       0       0       0       0       0       0       0       0
   601 ;;      Totals:         6       0       0       0       0       0       0       0       0
   602 ;;Total ram usage:        6 bytes
   603 ;; Hardware stack levels used: 1
   604 ;; This function calls:
   605 ;;		Nothing
   606 ;; This function is called by:
   607 ;;		_TransmitirNumero
   608 ;; This function uses a non-reentrant model
   609 ;;
   610                           
   611                           	psect	text2
   612  000A98                     __ptext2:
   613                           	callstack 0
   614  000A98                     ___wmul:
   615                           	callstack 29
   616                           
   617                           ;incstack = 0
   618  000A98  5001               	movf	___wmul@multiplier^0,w,c
   619  000A9A  0203               	mulwf	___wmul@multiplicand^0,c
   620  000A9C  CFF3 F005          	movff	prodl,___wmul@product
   621  000AA0  CFF4 F006          	movff	prodh,___wmul@product+1
   622  000AA4  5001               	movf	___wmul@multiplier^0,w,c
   623  000AA6  0204               	mulwf	(___wmul@multiplicand+1)^0,c
   624  000AA8  50F3               	movf	243,w,c
   625  000AAA  2606               	addwf	(___wmul@product+1)^0,f,c
   626  000AAC  5002               	movf	(___wmul@multiplier+1)^0,w,c
   627  000AAE  0203               	mulwf	___wmul@multiplicand^0,c
   628  000AB0  50F3               	movf	243,w,c
   629  000AB2  2606               	addwf	(___wmul@product+1)^0,f,c
   630  000AB4  C005  F001         	movff	___wmul@product,?___wmul
   631  000AB8  C006  F002         	movff	___wmul@product+1,?___wmul+1
   632  000ABC  0012               	return		;funcret
   633  000ABE                     __end_of___wmul:
   634                           	callstack 0
   635                           
   636 ;; *************** function ___lwmod *****************
   637 ;; Defined at:
   638 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
   639 ;; Parameters:    Size  Location     Type
   640 ;;  dividend        2    0[COMRAM] unsigned int 
   641 ;;  divisor         2    2[COMRAM] unsigned int 
   642 ;; Auto vars:     Size  Location     Type
   643 ;;  counter         1    4[COMRAM] unsigned char 
   644 ;; Return value:  Size  Location     Type
   645 ;;                  2    0[COMRAM] unsigned int 
   646 ;; Registers used:
   647 ;;		wreg, status,2, status,0
   648 ;; Tracked objects:
   649 ;;		On entry : 0/0
   650 ;;		On exit  : 0/0
   651 ;;		Unchanged: 0/0
   652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   653 ;;      Params:         4       0       0       0       0       0       0       0       0
   654 ;;      Locals:         1       0       0       0       0       0       0       0       0
   655 ;;      Temps:          0       0       0       0       0       0       0       0       0
   656 ;;      Totals:         5       0       0       0       0       0       0       0       0
   657 ;;Total ram usage:        5 bytes
   658 ;; Hardware stack levels used: 1
   659 ;; This function calls:
   660 ;;		Nothing
   661 ;; This function is called by:
   662 ;;		_TransmitirNumero
   663 ;; This function uses a non-reentrant model
   664 ;;
   665                           
   666                           	psect	text3
   667  000A2E                     __ptext3:
   668                           	callstack 0
   669  000A2E                     ___lwmod:
   670                           	callstack 29
   671                           
   672                           ;incstack = 0
   673  000A2E  5003               	movf	___lwmod@divisor^0,w,c
   674  000A30  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
   675  000A32  B4D8               	btfsc	status,2,c
   676  000A34  D018               	goto	l582
   677  000A36  0E01               	movlw	1
   678  000A38  6E05               	movwf	___lwmod@counter^0,c
   679  000A3A  D004               	goto	l976
   680  000A3C                     l974:
   681  000A3C  90D8               	bcf	status,0,c
   682  000A3E  3603               	rlcf	___lwmod@divisor^0,f,c
   683  000A40  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
   684  000A42  2A05               	incf	___lwmod@counter^0,f,c
   685  000A44                     l976:
   686  000A44  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
   687  000A46  D7FA               	goto	l974
   688  000A48                     u170:
   689  000A48  5003               	movf	___lwmod@divisor^0,w,c
   690  000A4A  5C01               	subwf	___lwmod@dividend^0,w,c
   691  000A4C  5004               	movf	(___lwmod@divisor+1)^0,w,c
   692  000A4E  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
   693  000A50  A0D8               	btfss	status,0,c
   694  000A52  D004               	goto	l982
   695  000A54  5003               	movf	___lwmod@divisor^0,w,c
   696  000A56  5E01               	subwf	___lwmod@dividend^0,f,c
   697  000A58  5004               	movf	(___lwmod@divisor+1)^0,w,c
   698  000A5A  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
   699  000A5C                     l982:
   700  000A5C  90D8               	bcf	status,0,c
   701  000A5E  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
   702  000A60  3203               	rrcf	___lwmod@divisor^0,f,c
   703  000A62  2E05               	decfsz	___lwmod@counter^0,f,c
   704  000A64  D7F1               	goto	u170
   705  000A66                     l582:
   706  000A66  C001  F001         	movff	___lwmod@dividend,?___lwmod
   707  000A6A  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
   708  000A6E  0012               	return		;funcret
   709  000A70                     __end_of___lwmod:
   710                           	callstack 0
   711                           
   712 ;; *************** function ___lwdiv *****************
   713 ;; Defined at:
   714 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
   715 ;; Parameters:    Size  Location     Type
   716 ;;  dividend        2    5[COMRAM] unsigned int 
   717 ;;  divisor         2    7[COMRAM] unsigned int 
   718 ;; Auto vars:     Size  Location     Type
   719 ;;  quotient        2    9[COMRAM] unsigned int 
   720 ;;  counter         1   11[COMRAM] unsigned char 
   721 ;; Return value:  Size  Location     Type
   722 ;;                  2    5[COMRAM] unsigned int 
   723 ;; Registers used:
   724 ;;		wreg, status,2, status,0
   725 ;; Tracked objects:
   726 ;;		On entry : 0/0
   727 ;;		On exit  : 0/0
   728 ;;		Unchanged: 0/0
   729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   730 ;;      Params:         4       0       0       0       0       0       0       0       0
   731 ;;      Locals:         3       0       0       0       0       0       0       0       0
   732 ;;      Temps:          0       0       0       0       0       0       0       0       0
   733 ;;      Totals:         7       0       0       0       0       0       0       0       0
   734 ;;Total ram usage:        7 bytes
   735 ;; Hardware stack levels used: 1
   736 ;; This function calls:
   737 ;;		Nothing
   738 ;; This function is called by:
   739 ;;		_TransmitirNumero
   740 ;; This function uses a non-reentrant model
   741 ;;
   742                           
   743                           	psect	text4
   744  0009DC                     __ptext4:
   745                           	callstack 0
   746  0009DC                     ___lwdiv:
   747                           	callstack 29
   748                           
   749                           ;incstack = 0
   750  0009DC  0E00               	movlw	0
   751  0009DE  6E0B               	movwf	(___lwdiv@quotient+1)^0,c
   752  0009E0  0E00               	movlw	0
   753  0009E2  6E0A               	movwf	___lwdiv@quotient^0,c
   754  0009E4  5008               	movf	___lwdiv@divisor^0,w,c
   755  0009E6  1009               	iorwf	(___lwdiv@divisor+1)^0,w,c
   756  0009E8  B4D8               	btfsc	status,2,c
   757  0009EA  D01C               	goto	l572
   758  0009EC  0E01               	movlw	1
   759  0009EE  6E0C               	movwf	___lwdiv@counter^0,c
   760  0009F0  D004               	goto	l956
   761  0009F2                     l954:
   762  0009F2  90D8               	bcf	status,0,c
   763  0009F4  3608               	rlcf	___lwdiv@divisor^0,f,c
   764  0009F6  3609               	rlcf	(___lwdiv@divisor+1)^0,f,c
   765  0009F8  2A0C               	incf	___lwdiv@counter^0,f,c
   766  0009FA                     l956:
   767  0009FA  AE09               	btfss	(___lwdiv@divisor+1)^0,7,c
   768  0009FC  D7FA               	goto	l954
   769  0009FE                     u140:
   770  0009FE  90D8               	bcf	status,0,c
   771  000A00  360A               	rlcf	___lwdiv@quotient^0,f,c
   772  000A02  360B               	rlcf	(___lwdiv@quotient+1)^0,f,c
   773  000A04  5008               	movf	___lwdiv@divisor^0,w,c
   774  000A06  5C06               	subwf	___lwdiv@dividend^0,w,c
   775  000A08  5009               	movf	(___lwdiv@divisor+1)^0,w,c
   776  000A0A  5807               	subwfb	(___lwdiv@dividend+1)^0,w,c
   777  000A0C  A0D8               	btfss	status,0,c
   778  000A0E  D005               	goto	l966
   779  000A10  5008               	movf	___lwdiv@divisor^0,w,c
   780  000A12  5E06               	subwf	___lwdiv@dividend^0,f,c
   781  000A14  5009               	movf	(___lwdiv@divisor+1)^0,w,c
   782  000A16  5A07               	subwfb	(___lwdiv@dividend+1)^0,f,c
   783  000A18  800A               	bsf	___lwdiv@quotient^0,0,c
   784  000A1A                     l966:
   785  000A1A  90D8               	bcf	status,0,c
   786  000A1C  3209               	rrcf	(___lwdiv@divisor+1)^0,f,c
   787  000A1E  3208               	rrcf	___lwdiv@divisor^0,f,c
   788  000A20  2E0C               	decfsz	___lwdiv@counter^0,f,c
   789  000A22  D7ED               	goto	u140
   790  000A24                     l572:
   791  000A24  C00A  F006         	movff	___lwdiv@quotient,?___lwdiv
   792  000A28  C00B  F007         	movff	___lwdiv@quotient+1,?___lwdiv+1
   793  000A2C  0012               	return		;funcret
   794  000A2E                     __end_of___lwdiv:
   795                           	callstack 0
   796                           
   797 ;; *************** function _TransmitirMensaje *****************
   798 ;; Defined at:
   799 ;;		line 68 in file "Parcial2.c"
   800 ;; Parameters:    Size  Location     Type
   801 ;;  a               1    1[COMRAM] PTR unsigned char 
   802 ;;		 -> STR_1(6), 
   803 ;; Auto vars:     Size  Location     Type
   804 ;;		None
   805 ;; Return value:  Size  Location     Type
   806 ;;                  1    wreg      void 
   807 ;; Registers used:
   808 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   809 ;; Tracked objects:
   810 ;;		On entry : 0/0
   811 ;;		On exit  : 0/0
   812 ;;		Unchanged: 0/0
   813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   814 ;;      Params:         1       0       0       0       0       0       0       0       0
   815 ;;      Locals:         0       0       0       0       0       0       0       0       0
   816 ;;      Temps:          0       0       0       0       0       0       0       0       0
   817 ;;      Totals:         1       0       0       0       0       0       0       0       0
   818 ;;Total ram usage:        1 bytes
   819 ;; Hardware stack levels used: 1
   820 ;; Hardware stack levels required when called: 1
   821 ;; This function calls:
   822 ;;		_Transmitir
   823 ;; This function is called by:
   824 ;;		_main
   825 ;; This function uses a non-reentrant model
   826 ;;
   827                           
   828                           	psect	text5
   829  000A70                     __ptext5:
   830                           	callstack 0
   831  000A70                     _TransmitirMensaje:
   832                           	callstack 29
   833                           
   834                           ;Parcial2.c: 69: while(*a != '\0'){
   835                           
   836                           ;incstack = 0
   837  000A70  D009               	goto	l1010
   838  000A72                     l1006:
   839                           
   840                           ;Parcial2.c: 70: Transmitir(*a);
   841  000A72  C002  FFF6         	movff	TransmitirMensaje@a,tblptrl
   842  000A76                     	if	1	;There is more than 1 active tblptr byte
   843  000A76  0E08               	movlw	high __smallconst
   844  000A78  6EF7               	movwf	tblptrh,c
   845  000A7A                     	endif
   846  000A7A                     	if	0	;tblptru may be non-zero
   847  000A7A                     	endif
   848  000A7A                     	if	0	;tblptru may be non-zero
   849  000A7A                     	endif
   850  000A7A  0008               	tblrd		*
   851  000A7C  50F5               	movf	tablat,w,c
   852  000A7E  EC77  F005         	call	_Transmitir
   853                           
   854                           ;Parcial2.c: 71: a++;
   855  000A82  2A02               	incf	TransmitirMensaje@a^0,f,c
   856  000A84                     l1010:
   857  000A84  C002  FFF6         	movff	TransmitirMensaje@a,tblptrl
   858  000A88                     	if	1	;There is more than 1 active tblptr byte
   859  000A88  0E08               	movlw	high __smallconst
   860  000A8A  6EF7               	movwf	tblptrh,c
   861  000A8C                     	endif
   862  000A8C                     	if	0	;tblptru may be non-zero
   863  000A8C                     	endif
   864  000A8C                     	if	0	;tblptru may be non-zero
   865  000A8C                     	endif
   866  000A8C  0008               	tblrd		*
   867  000A8E  50F5               	movf	tablat,w,c
   868  000A90  0900               	iorlw	0
   869  000A92  B4D8               	btfsc	status,2,c
   870  000A94  0012               	return	
   871  000A96  D7ED               	goto	l1006
   872  000A98                     __end_of_TransmitirMensaje:
   873                           	callstack 0
   874                           
   875 ;; *************** function _Transmitir *****************
   876 ;; Defined at:
   877 ;;		line 63 in file "Parcial2.c"
   878 ;; Parameters:    Size  Location     Type
   879 ;;  BufferT         1    wreg     unsigned char 
   880 ;; Auto vars:     Size  Location     Type
   881 ;;  BufferT         1    0[COMRAM] unsigned char 
   882 ;; Return value:  Size  Location     Type
   883 ;;                  1    wreg      void 
   884 ;; Registers used:
   885 ;;		wreg
   886 ;; Tracked objects:
   887 ;;		On entry : 0/0
   888 ;;		On exit  : 0/0
   889 ;;		Unchanged: 0/0
   890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   891 ;;      Params:         0       0       0       0       0       0       0       0       0
   892 ;;      Locals:         1       0       0       0       0       0       0       0       0
   893 ;;      Temps:          0       0       0       0       0       0       0       0       0
   894 ;;      Totals:         1       0       0       0       0       0       0       0       0
   895 ;;Total ram usage:        1 bytes
   896 ;; Hardware stack levels used: 1
   897 ;; This function calls:
   898 ;;		Nothing
   899 ;; This function is called by:
   900 ;;		_TransmitirMensaje
   901 ;;		_TransmitirNumero
   902 ;; This function uses a non-reentrant model
   903 ;;
   904                           
   905                           	psect	text6
   906  000AEE                     __ptext6:
   907                           	callstack 0
   908  000AEE                     _Transmitir:
   909                           	callstack 29
   910                           
   911                           ;incstack = 0
   912                           ;Transmitir@BufferT stored from wreg
   913  000AEE  6E01               	movwf	Transmitir@BufferT^0,c
   914  000AF0                     
   915                           ;Parcial2.c: 64: while(TRMT==0);
   916  000AF0  A2AC               	btfss	4012,1,c	;volatile
   917  000AF2  D7FE               	goto	l838
   918                           
   919                           ;Parcial2.c: 65: TXREG=BufferT;
   920  000AF4  C001  FFAD         	movff	Transmitir@BufferT,4013	;volatile
   921  000AF8  0012               	return		;funcret
   922  000AFA                     __end_of_Transmitir:
   923                           	callstack 0
   924                           
   925 ;; *************** function _Recibir *****************
   926 ;; Defined at:
   927 ;;		line 58 in file "Parcial2.c"
   928 ;; Parameters:    Size  Location     Type
   929 ;;		None
   930 ;; Auto vars:     Size  Location     Type
   931 ;;		None
   932 ;; Return value:  Size  Location     Type
   933 ;;                  1    wreg      unsigned char 
   934 ;; Registers used:
   935 ;;		wreg, status,2
   936 ;; Tracked objects:
   937 ;;		On entry : 0/0
   938 ;;		On exit  : 0/0
   939 ;;		Unchanged: 0/0
   940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   941 ;;      Params:         0       0       0       0       0       0       0       0       0
   942 ;;      Locals:         0       0       0       0       0       0       0       0       0
   943 ;;      Temps:          0       0       0       0       0       0       0       0       0
   944 ;;      Totals:         0       0       0       0       0       0       0       0       0
   945 ;;Total ram usage:        0 bytes
   946 ;; Hardware stack levels used: 1
   947 ;; This function calls:
   948 ;;		Nothing
   949 ;; This function is called by:
   950 ;;		_main
   951 ;; This function uses a non-reentrant model
   952 ;;
   953                           
   954                           	psect	text7
   955  000AFA                     __ptext7:
   956                           	callstack 0
   957  000AFA                     _Recibir:
   958                           	callstack 30
   959                           
   960                           ;Parcial2.c: 59: while(RCIF==0);
   961                           
   962                           ;incstack = 0
   963  000AFA  AA9E               	btfss	3998,5,c	;volatile
   964  000AFC  D7FE               	goto	_Recibir
   965                           
   966                           ;Parcial2.c: 60: return RCREG;
   967  000AFE  50AE               	movf	174,w,c	;volatile
   968  000B00  0012               	return		;funcret
   969  000B02                     __end_of_Recibir:
   970                           	callstack 0
   971                           
   972 ;; *************** function _Conversion *****************
   973 ;; Defined at:
   974 ;;		line 106 in file "Parcial2.c"
   975 ;; Parameters:    Size  Location     Type
   976 ;;  canal           1    wreg     unsigned char 
   977 ;; Auto vars:     Size  Location     Type
   978 ;;  canal           1    1[COMRAM] unsigned char 
   979 ;; Return value:  Size  Location     Type
   980 ;;                  1    wreg      unsigned char 
   981 ;; Registers used:
   982 ;;		wreg, status,2, status,0
   983 ;; Tracked objects:
   984 ;;		On entry : 0/0
   985 ;;		On exit  : 0/0
   986 ;;		Unchanged: 0/0
   987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   988 ;;      Params:         0       0       0       0       0       0       0       0       0
   989 ;;      Locals:         1       0       0       0       0       0       0       0       0
   990 ;;      Temps:          1       0       0       0       0       0       0       0       0
   991 ;;      Totals:         2       0       0       0       0       0       0       0       0
   992 ;;Total ram usage:        2 bytes
   993 ;; Hardware stack levels used: 1
   994 ;; This function calls:
   995 ;;		Nothing
   996 ;; This function is called by:
   997 ;;		_main
   998 ;; This function uses a non-reentrant model
   999 ;;
  1000                           
  1001                           	psect	text8
  1002  000ABE                     __ptext8:
  1003                           	callstack 0
  1004  000ABE                     _Conversion:
  1005                           	callstack 30
  1006                           
  1007                           ;incstack = 0
  1008                           ;Conversion@canal stored from wreg
  1009  000ABE  6E02               	movwf	Conversion@canal^0,c
  1010                           
  1011                           ;Parcial2.c: 107: ADCON0=(ADCON0 & 0b00000011) | (canal<<2);
  1012  000AC0  C002  F001         	movff	Conversion@canal,??_Conversion
  1013  000AC4  90D8               	bcf	status,0,c
  1014  000AC6  3601               	rlcf	??_Conversion^0,f,c
  1015  000AC8  90D8               	bcf	status,0,c
  1016  000ACA  3601               	rlcf	??_Conversion^0,f,c
  1017  000ACC  50C2               	movf	194,w,c	;volatile
  1018  000ACE  0B03               	andlw	3
  1019  000AD0  1001               	iorwf	??_Conversion^0,w,c
  1020  000AD2  6EC2               	movwf	194,c	;volatile
  1021                           
  1022                           ;Parcial2.c: 108: GO=1;
  1023  000AD4  82C2               	bsf	4034,1,c	;volatile
  1024  000AD6                     l87:
  1025  000AD6  B2C2               	btfsc	4034,1,c	;volatile
  1026  000AD8  D7FE               	goto	l87
  1027                           
  1028                           ;Parcial2.c: 110: return ADRESH;
  1029  000ADA  50C4               	movf	196,w,c	;volatile
  1030  000ADC  0012               	return		;funcret
  1031  000ADE                     __end_of_Conversion:
  1032                           	callstack 0
  1033                           
  1034                           	psect	rparam
  1035  0000                     
  1036                           	psect	idloc
  1037                           
  1038                           ;Config register IDLOC0 @ 0x200000
  1039                           ;	unspecified, using default values
  1040  200000                     	org	2097152
  1041  200000  FF                 	db	255
  1042                           
  1043                           ;Config register IDLOC1 @ 0x200001
  1044                           ;	unspecified, using default values
  1045  200001                     	org	2097153
  1046  200001  FF                 	db	255
  1047                           
  1048                           ;Config register IDLOC2 @ 0x200002
  1049                           ;	unspecified, using default values
  1050  200002                     	org	2097154
  1051  200002  FF                 	db	255
  1052                           
  1053                           ;Config register IDLOC3 @ 0x200003
  1054                           ;	unspecified, using default values
  1055  200003                     	org	2097155
  1056  200003  FF                 	db	255
  1057                           
  1058                           ;Config register IDLOC4 @ 0x200004
  1059                           ;	unspecified, using default values
  1060  200004                     	org	2097156
  1061  200004  FF                 	db	255
  1062                           
  1063                           ;Config register IDLOC5 @ 0x200005
  1064                           ;	unspecified, using default values
  1065  200005                     	org	2097157
  1066  200005  FF                 	db	255
  1067                           
  1068                           ;Config register IDLOC6 @ 0x200006
  1069                           ;	unspecified, using default values
  1070  200006                     	org	2097158
  1071  200006  FF                 	db	255
  1072                           
  1073                           ;Config register IDLOC7 @ 0x200007
  1074                           ;	unspecified, using default values
  1075  200007                     	org	2097159
  1076  200007  FF                 	db	255
  1077                           
  1078                           	psect	config
  1079                           
  1080                           ;Config register CONFIG1L @ 0x300000
  1081                           ;	unspecified, using default values
  1082                           ;	PLL Prescaler Selection bits
  1083                           ;	PLLDIV = 0x0, unprogrammed default
  1084                           ;	System Clock Postscaler Selection bits
  1085                           ;	CPUDIV = 0x0, unprogrammed default
  1086                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1087                           ;	USBDIV = 0x0, unprogrammed default
  1088  300000                     	org	3145728
  1089  300000  00                 	db	0
  1090                           
  1091                           ;Config register CONFIG1H @ 0x300001
  1092                           ;	Oscillator Selection bits
  1093                           ;	FOSC = INTOSC_EC, Internal oscillator, CLKO function on RA6, EC used by USB (INTCKO)
  1094                           ;	Fail-Safe Clock Monitor Enable bit
  1095                           ;	FCMEN = 0x0, unprogrammed default
  1096                           ;	Internal/External Oscillator Switchover bit
  1097                           ;	IESO = 0x0, unprogrammed default
  1098  300001                     	org	3145729
  1099  300001  09                 	db	9
  1100                           
  1101                           ;Config register CONFIG2L @ 0x300002
  1102                           ;	unspecified, using default values
  1103                           ;	Power-up Timer Enable bit
  1104                           ;	PWRT = 0x1, unprogrammed default
  1105                           ;	Brown-out Reset Enable bits
  1106                           ;	BOR = 0x3, unprogrammed default
  1107                           ;	Brown-out Reset Voltage bits
  1108                           ;	BORV = 0x3, unprogrammed default
  1109                           ;	USB Voltage Regulator Enable bit
  1110                           ;	VREGEN = 0x0, unprogrammed default
  1111  300002                     	org	3145730
  1112  300002  1F                 	db	31
  1113                           
  1114                           ;Config register CONFIG2H @ 0x300003
  1115                           ;	Watchdog Timer Enable bit
  1116                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1117                           ;	Watchdog Timer Postscale Select bits
  1118                           ;	WDTPS = 0xF, unprogrammed default
  1119  300003                     	org	3145731
  1120  300003  1E                 	db	30
  1121                           
  1122                           ; Padding undefined space
  1123  300004                     	org	3145732
  1124  300004  FF                 	db	255
  1125                           
  1126                           ;Config register CONFIG3H @ 0x300005
  1127                           ;	unspecified, using default values
  1128                           ;	CCP2 MUX bit
  1129                           ;	CCP2MX = 0x1, unprogrammed default
  1130                           ;	PORTB A/D Enable bit
  1131                           ;	PBADEN = 0x1, unprogrammed default
  1132                           ;	Low-Power Timer 1 Oscillator Enable bit
  1133                           ;	LPT1OSC = 0x0, unprogrammed default
  1134                           ;	MCLR Pin Enable bit
  1135                           ;	MCLRE = 0x1, unprogrammed default
  1136  300005                     	org	3145733
  1137  300005  83                 	db	131
  1138                           
  1139                           ;Config register CONFIG4L @ 0x300006
  1140                           ;	unspecified, using default values
  1141                           ;	Stack Full/Underflow Reset Enable bit
  1142                           ;	STVREN = 0x1, unprogrammed default
  1143                           ;	Single-Supply ICSP Enable bit
  1144                           ;	LVP = 0x1, unprogrammed default
  1145                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1146                           ;	ICPRT = 0x0, unprogrammed default
  1147                           ;	Extended Instruction Set Enable bit
  1148                           ;	XINST = 0x0, unprogrammed default
  1149                           ;	Background Debugger Enable bit
  1150                           ;	DEBUG = 0x1, unprogrammed default
  1151  300006                     	org	3145734
  1152  300006  85                 	db	133
  1153                           
  1154                           ; Padding undefined space
  1155  300007                     	org	3145735
  1156  300007  FF                 	db	255
  1157                           
  1158                           ;Config register CONFIG5L @ 0x300008
  1159                           ;	unspecified, using default values
  1160                           ;	Code Protection bit
  1161                           ;	CP0 = 0x1, unprogrammed default
  1162                           ;	Code Protection bit
  1163                           ;	CP1 = 0x1, unprogrammed default
  1164                           ;	Code Protection bit
  1165                           ;	CP2 = 0x1, unprogrammed default
  1166                           ;	Code Protection bit
  1167                           ;	CP3 = 0x1, unprogrammed default
  1168  300008                     	org	3145736
  1169  300008  0F                 	db	15
  1170                           
  1171                           ;Config register CONFIG5H @ 0x300009
  1172                           ;	unspecified, using default values
  1173                           ;	Boot Block Code Protection bit
  1174                           ;	CPB = 0x1, unprogrammed default
  1175                           ;	Data EEPROM Code Protection bit
  1176                           ;	CPD = 0x1, unprogrammed default
  1177  300009                     	org	3145737
  1178  300009  C0                 	db	192
  1179                           
  1180                           ;Config register CONFIG6L @ 0x30000A
  1181                           ;	unspecified, using default values
  1182                           ;	Write Protection bit
  1183                           ;	WRT0 = 0x1, unprogrammed default
  1184                           ;	Write Protection bit
  1185                           ;	WRT1 = 0x1, unprogrammed default
  1186                           ;	Write Protection bit
  1187                           ;	WRT2 = 0x1, unprogrammed default
  1188                           ;	Write Protection bit
  1189                           ;	WRT3 = 0x1, unprogrammed default
  1190  30000A                     	org	3145738
  1191  30000A  0F                 	db	15
  1192                           
  1193                           ;Config register CONFIG6H @ 0x30000B
  1194                           ;	unspecified, using default values
  1195                           ;	Configuration Register Write Protection bit
  1196                           ;	WRTC = 0x1, unprogrammed default
  1197                           ;	Boot Block Write Protection bit
  1198                           ;	WRTB = 0x1, unprogrammed default
  1199                           ;	Data EEPROM Write Protection bit
  1200                           ;	WRTD = 0x1, unprogrammed default
  1201  30000B                     	org	3145739
  1202  30000B  E0                 	db	224
  1203                           
  1204                           ;Config register CONFIG7L @ 0x30000C
  1205                           ;	unspecified, using default values
  1206                           ;	Table Read Protection bit
  1207                           ;	EBTR0 = 0x1, unprogrammed default
  1208                           ;	Table Read Protection bit
  1209                           ;	EBTR1 = 0x1, unprogrammed default
  1210                           ;	Table Read Protection bit
  1211                           ;	EBTR2 = 0x1, unprogrammed default
  1212                           ;	Table Read Protection bit
  1213                           ;	EBTR3 = 0x1, unprogrammed default
  1214  30000C                     	org	3145740
  1215  30000C  0F                 	db	15
  1216                           
  1217                           ;Config register CONFIG7H @ 0x30000D
  1218                           ;	unspecified, using default values
  1219                           ;	Boot Block Table Read Protection bit
  1220                           ;	EBTRB = 0x1, unprogrammed default
  1221  30000D                     	org	3145741
  1222  30000D  40                 	db	64
  1223                           tosu	equ	0xFFF
  1224                           tosh	equ	0xFFE
  1225                           tosl	equ	0xFFD
  1226                           stkptr	equ	0xFFC
  1227                           pclatu	equ	0xFFB
  1228                           pclath	equ	0xFFA
  1229                           pcl	equ	0xFF9
  1230                           tblptru	equ	0xFF8
  1231                           tblptrh	equ	0xFF7
  1232                           tblptrl	equ	0xFF6
  1233                           tablat	equ	0xFF5
  1234                           prodh	equ	0xFF4
  1235                           prodl	equ	0xFF3
  1236                           indf0	equ	0xFEF
  1237                           postinc0	equ	0xFEE
  1238                           postdec0	equ	0xFED
  1239                           preinc0	equ	0xFEC
  1240                           plusw0	equ	0xFEB
  1241                           fsr0h	equ	0xFEA
  1242                           fsr0l	equ	0xFE9
  1243                           wreg	equ	0xFE8
  1244                           indf1	equ	0xFE7
  1245                           postinc1	equ	0xFE6
  1246                           postdec1	equ	0xFE5
  1247                           preinc1	equ	0xFE4
  1248                           plusw1	equ	0xFE3
  1249                           fsr1h	equ	0xFE2
  1250                           fsr1l	equ	0xFE1
  1251                           bsr	equ	0xFE0
  1252                           indf2	equ	0xFDF
  1253                           postinc2	equ	0xFDE
  1254                           postdec2	equ	0xFDD
  1255                           preinc2	equ	0xFDC
  1256                           plusw2	equ	0xFDB
  1257                           fsr2h	equ	0xFDA
  1258                           fsr2l	equ	0xFD9
  1259                           status	equ	0xFD8

Data Sizes:
    Strings     6
    Constant    0
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     23      26
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    TransmitirMensaje@a	PTR unsigned char  size(1) Largest target is 6
		 -> STR_1(CODE[6]), 


Critical Paths under _main in COMRAM

    _main->_TransmitirNumero
    _TransmitirNumero->___lwdiv
    ___lwdiv->___lwmod
    _TransmitirMensaje->_Transmitir

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2604
                                             21 COMRAM     2     2      0
                         _Conversion
                            _Recibir
                  _TransmitirMensaje
                   _TransmitirNumero
 ---------------------------------------------------------------------------------
 (1) _TransmitirNumero                                     9     7      2    2453
                                             12 COMRAM     9     7      2
                         _Transmitir
                            ___lwdiv
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4    1071
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     618
                                              5 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _TransmitirMensaje                                    1     0      1     136
                                              1 COMRAM     1     0      1
                         _Transmitir
 ---------------------------------------------------------------------------------
 (2) _Transmitir                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Recibir                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Conversion                                           2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Conversion
   _Recibir
   _TransmitirMensaje
     _Transmitir
   _TransmitirNumero
     _Transmitir
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     17      1A       1       27.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1A      20        0.0%
DATA                 0      0      1A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Tue Feb 01 15:20:32 2022

         Transmitir@BufferT 0001                          l87 0AD6                          _GO 007E11  
       ___wmul@multiplicand 0003                         l572 0A24                         l582 0A66  
                       l838 0AF0                         l954 09F2                         l956 09FA  
                       l966 0A1A                         l982 0A5C                         l974 0A3C  
                       l976 0A44                         l992 0834                         l994 0842  
                       l996 0864                         l988 0816                         l998 08BA  
                       u140 09FE                         u170 0A48                         u227 0988  
                       u237 09CE                         _Van 0018                         wreg 000FE8  
                      l1010 0A84                        l1002 0948                        l1006 0A72  
                      l1024 09BC                        l1016 0992                        l1026 09C4  
                      STR_1 0801                        _RCIF 007CF5                        _TRMT 007D61  
                      _main 095E                        prodh 000FF4                        prodl 000FF3  
                      start 0000  __size_of_TransmitirMensaje 0028                ___param_bank 000000  
           __end_of_Recibir 0B02                       ?_main 0001           TransmitirNumero@a 000D  
         TransmitirNumero@b 0011             __end_of___lwdiv 0A2E             __end_of___lwmod 0A70  
                     _RCREG 000FAE                       _RCSTA 000FAB                       _SPBRG 000FAF  
                     _TRISA 000F92                       _TRISE 000F96                       _TXREG 000FAD  
                     _TXSTA 000FAC                       _canal 001A                       tablat 000FF5  
                _Conversion 0ABE                       status 000FD8             __initialization 0ADE  
              __end_of_main 09DC          TransmitirMensaje@a 0002                      ??_main 0016  
             __activetblptr 000002                      _ADCON0 000FC2                      _ADCON1 000FC1  
                    _ADCON2 000FC0                      _ADRESH 000FC4                   ??_Recibir 0001  
                    ___wmul 0A98                   ??___lwdiv 000A                   ??___lwmod 0005  
                    isa$std 000001                __mediumconst 0000                      tblptrh 000FF7  
                    tblptrl 000FF6                      tblptru 000FF8                  _Transmitir 0AEE  
 __size_of_TransmitirNumero 0156                 ?_Conversion 0001                  __accesstop 0060  
   __end_of__initialization 0AE4               ___rparam_used 000001              __pcstackCOMRAM 0001  
                   ?___wmul 0001                     _BAUDCON 000FB8         __size_of_Conversion 0020  
       TransmitirNumero@var 0012                 ?_Transmitir 0001                     _Recibir 0AFA  
                   __Hparam 0000                     __Lparam 0000             __size_of___wmul 0026  
                   ___lwdiv 09DC                     ___lwmod 0A2E                __psmallconst 0800  
                   __pcinit 0ADE                     __ramtop 0800                     __ptext0 095E  
                   __ptext1 0808                     __ptext2 0A98                     __ptext3 0A2E  
                   __ptext4 09DC                     __ptext5 0A70                     __ptext6 0AEE  
                   __ptext7 0AFA                     __ptext8 0ABE            _TransmitirNumero 0808  
      end_of_initialization 0AE4             Conversion@canal 0002               __Lmediumconst 0000  
       __size_of_Transmitir 000C                ??_Conversion 0001              __end_of___wmul 0ABE  
        __end_of_Conversion 0ADE         start_initialization 0ADE                    ??___wmul 0005  
               __pbssCOMRAM 0018                ??_Transmitir 0001                    ?_Recibir 0001  
          ___lwdiv@dividend 0006    __end_of_TransmitirNumero 095E                    ?___lwdiv 0006  
                  ?___lwmod 0001          __end_of_Transmitir 0AFA                 __smallconst 0800  
   TransmitirNumero@centena 000F            ___lwdiv@quotient 000A              ___wmul@product 0005  
         ___wmul@multiplier 0001                    __Hrparam 0000            __size_of_Recibir 0008  
                  __Lrparam 0000            __size_of___lwdiv 0052            __size_of___lwmod 0042  
           ___lwdiv@divisor 0008             ___lwdiv@counter 000C      TransmitirNumero@decena 0014  
             __size_of_main 007E      TransmitirNumero@unidad 0015                    isa$xinst 000000  
         _TransmitirMensaje 0A70          ?_TransmitirMensaje 0002         ??_TransmitirMensaje 0003  
          ___lwmod@dividend 0001   __end_of_TransmitirMensaje 0A98           ?_TransmitirNumero 000D  
        ??_TransmitirNumero 000F             ___lwmod@divisor 0003             ___lwmod@counter 0005  
