

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sat Jan 15 23:29:16 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og9 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    27                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    28  0000                     
    29                           ; Version 2.32
    30                           ; Generated 02/02/2021 GMT
    31                           ; 
    32                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution. Publication is not required when
    46                           ;        this file is used in an embedded application.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F4550 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     
    65                           	psect	idataCOMRAM
    66  000E40                     __pidataCOMRAM:
    67                           	callstack 0
    68                           
    69                           ;initializer for _interfaz
    70  000E40  08                 	db	8
    71  0000                     _ADRES	set	4035
    72  0000                     _TRISD	set	3989
    73  0000                     _ADCON2	set	4032
    74  0000                     _ADCON1	set	4033
    75  0000                     _ADCON0	set	4034
    76  0000                     _LATD	set	3980
    77  0000                     _GO	set	32273
    78  0000                     _LATD3	set	31843
    79  0000                     _LATD2	set	31842
    80                           
    81                           	psect	smallconst
    82  000800                     __psmallconst:
    83                           	callstack 0
    84  000800  00                 	db	0
    85  000801                     STR_2:
    86  000801  50                 	db	80	;'P'
    87  000802  72                 	db	114	;'r'
    88  000803  75                 	db	117	;'u'
    89  000804  65                 	db	101	;'e'
    90  000805  62                 	db	98	;'b'
    91  000806  61                 	db	97	;'a'
    92  000807  20                 	db	32
    93  000808  41                 	db	65	;'A'
    94  000809  44                 	db	68	;'D'
    95  00080A  43                 	db	67	;'C'
    96  00080B  00                 	db	0
    97  00080C                     STR_1:
    98  00080C  48                 	db	72	;'H'
    99  00080D  6F                 	db	111	;'o'
   100  00080E  6C                 	db	108	;'l'
   101  00080F  61                 	db	97	;'a'
   102  000810  20                 	db	32
   103  000811  6D                 	db	109	;'m'
   104  000812  75                 	db	117	;'u'
   105  000813  6E                 	db	110	;'n'
   106  000814  64                 	db	100	;'d'
   107  000815  6F                 	db	111	;'o'
   108  000816  00                 	db	0
   109  000817  00                 	db	0	; dummy byte at the end
   110  0000                     
   111                           ; #config settings
   112                           
   113                           	psect	cinit
   114  000DBE                     __pcinit:
   115                           	callstack 0
   116  000DBE                     start_initialization:
   117                           	callstack 0
   118  000DBE                     __initialization:
   119                           	callstack 0
   120                           
   121                           ; Initialize objects allocated to COMRAM (1 bytes)
   122                           ; load TBLPTR registers with __pidataCOMRAM
   123  000DBE  0E40               	movlw	low __pidataCOMRAM
   124  000DC0  6EF6               	movwf	tblptrl,c
   125  000DC2  0E0E               	movlw	high __pidataCOMRAM
   126  000DC4  6EF7               	movwf	tblptrh,c
   127  000DC6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   128  000DC8  6EF8               	movwf	tblptru,c
   129  000DCA  0009               	tblrd		*+	;fetch initializer
   130  000DCC  CFF5 F01C          	movff	tablat,__pdataCOMRAM
   131  000DD0                     end_of_initialization:
   132                           	callstack 0
   133  000DD0                     __end_of__initialization:
   134                           	callstack 0
   135  000DD0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   136  000DD2  6EF8               	movwf	tblptru,c
   137  000DD4  0100               	movlb	0
   138  000DD6  EF76  F005         	goto	_main	;jump to C main() function
   139                           
   140                           	psect	dataCOMRAM
   141  00001C                     __pdataCOMRAM:
   142                           	callstack 0
   143  00001C                     _interfaz:
   144                           	callstack 0
   145  00001C                     	ds	1
   146                           
   147                           	psect	cstackCOMRAM
   148  000001                     __pcstackCOMRAM:
   149                           	callstack 0
   150  000001                     ??_RetardoLCD:
   151  000001                     ?_Conversion:
   152                           	callstack 0
   153  000001                     ?___lwmod:
   154                           	callstack 0
   155  000001                     ConfiguraLCD@a:
   156                           	callstack 0
   157  000001                     ___lwmod@dividend:
   158                           	callstack 0
   159                           
   160                           ; 2 bytes @ 0x0
   161  000001                     	ds	1
   162  000002                     RetardoLCD@a:
   163                           	callstack 0
   164                           
   165                           ; 1 bytes @ 0x1
   166  000002                     	ds	1
   167  000003                     ??_Conversion:
   168  000003                     ??_EnviaDato:
   169  000003                     ___lwmod@divisor:
   170                           	callstack 0
   171                           
   172                           ; 2 bytes @ 0x2
   173  000003                     	ds	1
   174  000004                     EnviaDato@a:
   175                           	callstack 0
   176  000004                     Conversion@canal:
   177                           	callstack 0
   178                           
   179                           ; 1 bytes @ 0x3
   180  000004                     	ds	1
   181  000005                     EscribeLCD_c@a:
   182                           	callstack 0
   183  000005                     DireccionaLCD@a:
   184                           	callstack 0
   185  000005                     ___lwmod@counter:
   186                           	callstack 0
   187                           
   188                           ; 1 bytes @ 0x4
   189  000005                     	ds	1
   190  000006                     ?___lwdiv:
   191                           	callstack 0
   192  000006                     MensajeLCD_Var@a:
   193                           	callstack 0
   194  000006                     ___lwdiv@dividend:
   195                           	callstack 0
   196                           
   197                           ; 2 bytes @ 0x5
   198  000006                     	ds	1
   199  000007                     
   200                           ; 1 bytes @ 0x6
   201  000007                     	ds	1
   202  000008                     ___lwdiv@divisor:
   203                           	callstack 0
   204                           
   205                           ; 2 bytes @ 0x7
   206  000008                     	ds	2
   207  00000A                     ___lwdiv@quotient:
   208                           	callstack 0
   209                           
   210                           ; 2 bytes @ 0x9
   211  00000A                     	ds	2
   212  00000C                     ___lwdiv@counter:
   213                           	callstack 0
   214                           
   215                           ; 1 bytes @ 0xB
   216  00000C                     	ds	1
   217  00000D                     EscribeLCD_n16@a:
   218                           	callstack 0
   219                           
   220                           ; 2 bytes @ 0xC
   221  00000D                     	ds	2
   222  00000F                     EscribeLCD_n16@b:
   223                           	callstack 0
   224                           
   225                           ; 1 bytes @ 0xE
   226  00000F                     	ds	1
   227  000010                     EscribeLCD_n16@millar:
   228                           	callstack 0
   229                           
   230                           ; 2 bytes @ 0xF
   231  000010                     	ds	2
   232  000012                     EscribeLCD_n16@centena:
   233                           	callstack 0
   234                           
   235                           ; 2 bytes @ 0x11
   236  000012                     	ds	2
   237  000014                     EscribeLCD_n16@decena:
   238                           	callstack 0
   239                           
   240                           ; 1 bytes @ 0x13
   241  000014                     	ds	1
   242  000015                     EscribeLCD_n16@unidad:
   243                           	callstack 0
   244                           
   245                           ; 1 bytes @ 0x14
   246  000015                     	ds	1
   247  000016                     ??_main:
   248                           
   249                           ; 1 bytes @ 0x15
   250  000016                     	ds	2
   251  000018                     main@resultado1:
   252                           	callstack 0
   253                           
   254                           ; 2 bytes @ 0x17
   255  000018                     	ds	2
   256  00001A                     main@resultado2:
   257                           	callstack 0
   258                           
   259                           ; 2 bytes @ 0x19
   260  00001A                     	ds	2
   261                           
   262 ;;
   263 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   264 ;;
   265 ;; *************** function _main *****************
   266 ;; Defined at:
   267 ;;		line 8 in file "PruebaADC.c"
   268 ;; Parameters:    Size  Location     Type
   269 ;;		None
   270 ;; Auto vars:     Size  Location     Type
   271 ;;  resultado2      2   25[COMRAM] unsigned int 
   272 ;;  resultado1      2   23[COMRAM] unsigned int 
   273 ;; Return value:  Size  Location     Type
   274 ;;                  1    wreg      void 
   275 ;; Registers used:
   276 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   277 ;; Tracked objects:
   278 ;;		On entry : 0/0
   279 ;;		On exit  : 0/0
   280 ;;		Unchanged: 0/0
   281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   282 ;;      Params:         0       0       0       0       0       0       0       0       0
   283 ;;      Locals:         4       0       0       0       0       0       0       0       0
   284 ;;      Temps:          2       0       0       0       0       0       0       0       0
   285 ;;      Totals:         6       0       0       0       0       0       0       0       0
   286 ;;Total ram usage:        6 bytes
   287 ;; Hardware stack levels required when called: 4
   288 ;; This function calls:
   289 ;;		_BorraLCD
   290 ;;		_ConfiguraLCD
   291 ;;		_Conversion
   292 ;;		_DireccionaLCD
   293 ;;		_EscribeLCD_n16
   294 ;;		_InicializaLCD
   295 ;;		_MensajeLCD_Var
   296 ;; This function is called by:
   297 ;;		Startup code after reset
   298 ;; This function uses a non-reentrant model
   299 ;;
   300                           
   301                           	psect	text0
   302  000AEC                     __ptext0:
   303                           	callstack 0
   304  000AEC                     _main:
   305                           	callstack 27
   306                           
   307                           ;PruebaADC.c: 9: unsigned int resultado1,resultado2;;PruebaADC.c: 10: ADCON0=0b00000001;
   308                           
   309                           ;incstack = 0
   310  000AEC  0E01               	movlw	1
   311  000AEE  6EC2               	movwf	194,c	;volatile
   312                           
   313                           ;PruebaADC.c: 11: ADCON1=13;
   314  000AF0  0E0D               	movlw	13
   315  000AF2  6EC1               	movwf	193,c	;volatile
   316                           
   317                           ;PruebaADC.c: 12: ADCON2=0b10001000;
   318  000AF4  0E88               	movlw	136
   319  000AF6  6EC0               	movwf	192,c	;volatile
   320                           
   321                           ;PruebaADC.c: 13: TRISD=0;
   322  000AF8  0E00               	movlw	0
   323  000AFA  6E95               	movwf	149,c	;volatile
   324                           
   325                           ;PruebaADC.c: 14: LATD=0;
   326  000AFC  0E00               	movlw	0
   327  000AFE  6E8C               	movwf	140,c	;volatile
   328                           
   329                           ;PruebaADC.c: 15: _delay((unsigned long)((1000)*(1000000/4000.0)));
   330  000B00  0E02               	movlw	2
   331  000B02  6E17               	movwf	(??_main+1)^0,c
   332  000B04  0E45               	movlw	69
   333  000B06  6E16               	movwf	??_main^0,c
   334  000B08  0EAA               	movlw	170
   335  000B0A                     u257:
   336  000B0A  2EE8               	decfsz	wreg,f,c
   337  000B0C  D7FE               	bra	u257
   338  000B0E  2E16               	decfsz	??_main^0,f,c
   339  000B10  D7FC               	bra	u257
   340  000B12  2E17               	decfsz	(??_main+1)^0,f,c
   341  000B14  D7FA               	bra	u257
   342                           
   343                           ;PruebaADC.c: 16: ConfiguraLCD(4);
   344  000B16  0E04               	movlw	4
   345  000B18  ECED  F006         	call	_ConfiguraLCD
   346                           
   347                           ;PruebaADC.c: 17: InicializaLCD();
   348  000B1C  ECD2  F005         	call	_InicializaLCD	;wreg free
   349                           
   350                           ;PruebaADC.c: 18: MensajeLCD_Var("Hola mundo");
   351  000B20  0E0C               	movlw	low STR_1
   352  000B22  6E06               	movwf	MensajeLCD_Var@a^0,c
   353  000B24  ECB8  F006         	call	_MensajeLCD_Var	;wreg free
   354                           
   355                           ;PruebaADC.c: 19: DireccionaLCD(0xC0);
   356  000B28  0EC0               	movlw	192
   357  000B2A  EC04  F007         	call	_DireccionaLCD
   358                           
   359                           ;PruebaADC.c: 20: MensajeLCD_Var("Prueba ADC");
   360  000B2E  0E01               	movlw	low STR_2
   361  000B30  6E06               	movwf	MensajeLCD_Var@a^0,c
   362  000B32  ECB8  F006         	call	_MensajeLCD_Var	;wreg free
   363                           
   364                           ;PruebaADC.c: 21: _delay((unsigned long)((2000)*(1000000/4000.0)));
   365  000B36  0E03               	movlw	3
   366  000B38  6E17               	movwf	(??_main+1)^0,c
   367  000B3A  0E8A               	movlw	138
   368  000B3C  6E16               	movwf	??_main^0,c
   369  000B3E  0E56               	movlw	86
   370  000B40                     u267:
   371  000B40  2EE8               	decfsz	wreg,f,c
   372  000B42  D7FE               	bra	u267
   373  000B44  2E16               	decfsz	??_main^0,f,c
   374  000B46  D7FC               	bra	u267
   375  000B48  2E17               	decfsz	(??_main+1)^0,f,c
   376  000B4A  D7FA               	bra	u267
   377  000B4C                     l1184:
   378                           
   379                           ;PruebaADC.c: 23: resultado1=Conversion(0);
   380  000B4C  0E00               	movlw	0
   381  000B4E  ECCC  F006         	call	_Conversion
   382  000B52  C001  F018         	movff	?_Conversion,main@resultado1
   383  000B56  C002  F019         	movff	?_Conversion+1,main@resultado1+1
   384                           
   385                           ;PruebaADC.c: 24: resultado2=Conversion(1);
   386  000B5A  0E01               	movlw	1
   387  000B5C  ECCC  F006         	call	_Conversion
   388  000B60  C001  F01A         	movff	?_Conversion,main@resultado2
   389  000B64  C002  F01B         	movff	?_Conversion+1,main@resultado2+1
   390                           
   391                           ;PruebaADC.c: 25: BorraLCD();
   392  000B68  EC0F  F007         	call	_BorraLCD	;wreg free
   393                           
   394                           ;PruebaADC.c: 26: EscribeLCD_n16(resultado1,4);
   395  000B6C  C018  F00D         	movff	main@resultado1,EscribeLCD_n16@a
   396  000B70  C019  F00E         	movff	main@resultado1+1,EscribeLCD_n16@a+1
   397  000B74  0E04               	movlw	4
   398  000B76  6E0F               	movwf	EscribeLCD_n16@b^0,c
   399  000B78  EC0C  F004         	call	_EscribeLCD_n16	;wreg free
   400                           
   401                           ;PruebaADC.c: 27: DireccionaLCD(0xC0);
   402  000B7C  0EC0               	movlw	192
   403  000B7E  EC04  F007         	call	_DireccionaLCD
   404                           
   405                           ;PruebaADC.c: 28: EscribeLCD_n16(resultado2,4);
   406  000B82  C01A  F00D         	movff	main@resultado2,EscribeLCD_n16@a
   407  000B86  C01B  F00E         	movff	main@resultado2+1,EscribeLCD_n16@a+1
   408  000B8A  0E04               	movlw	4
   409  000B8C  6E0F               	movwf	EscribeLCD_n16@b^0,c
   410  000B8E  EC0C  F004         	call	_EscribeLCD_n16	;wreg free
   411                           
   412                           ;PruebaADC.c: 29: _delay((unsigned long)((500)*(1000000/4000.0)));
   413  000B92  0EA3               	movlw	163
   414  000B94  6E16               	movwf	??_main^0,c
   415  000B96  0E55               	movlw	85
   416  000B98                     u277:
   417  000B98  2EE8               	decfsz	wreg,f,c
   418  000B9A  D7FE               	bra	u277
   419  000B9C  2E16               	decfsz	??_main^0,f,c
   420  000B9E  D7FC               	bra	u277
   421  000BA0  F000               	nop	
   422  000BA2  D7D4               	goto	l1184
   423  000BA4                     __end_of_main:
   424                           	callstack 0
   425                           
   426 ;; *************** function _MensajeLCD_Var *****************
   427 ;; Defined at:
   428 ;;		line 232 in file "LibLCDXC8.h"
   429 ;; Parameters:    Size  Location     Type
   430 ;;  a               1    5[COMRAM] PTR unsigned char 
   431 ;;		 -> STR_2(11), STR_1(11), 
   432 ;; Auto vars:     Size  Location     Type
   433 ;;		None
   434 ;; Return value:  Size  Location     Type
   435 ;;                  1    wreg      void 
   436 ;; Registers used:
   437 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   438 ;; Tracked objects:
   439 ;;		On entry : 0/0
   440 ;;		On exit  : 0/0
   441 ;;		Unchanged: 0/0
   442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   443 ;;      Params:         1       0       0       0       0       0       0       0       0
   444 ;;      Locals:         0       0       0       0       0       0       0       0       0
   445 ;;      Temps:          0       0       0       0       0       0       0       0       0
   446 ;;      Totals:         1       0       0       0       0       0       0       0       0
   447 ;;Total ram usage:        1 bytes
   448 ;; Hardware stack levels used: 1
   449 ;; Hardware stack levels required when called: 3
   450 ;; This function calls:
   451 ;;		_EscribeLCD_c
   452 ;; This function is called by:
   453 ;;		_main
   454 ;; This function uses a non-reentrant model
   455 ;;
   456                           
   457                           	psect	text1
   458  000D70                     __ptext1:
   459                           	callstack 0
   460  000D70                     _MensajeLCD_Var:
   461                           	callstack 27
   462                           
   463                           ;LibLCDXC8.h: 236: while(*a != '\0'){
   464                           
   465                           ;incstack = 0
   466  000D70  D009               	goto	l1162
   467  000D72                     l1158:
   468                           
   469                           ;LibLCDXC8.h: 237: EscribeLCD_c(*a);
   470  000D72  C006  FFF6         	movff	MensajeLCD_Var@a,tblptrl
   471  000D76                     	if	1	;There is more than 1 active tblptr byte
   472  000D76  0E08               	movlw	high __smallconst
   473  000D78  6EF7               	movwf	tblptrh,c
   474  000D7A                     	endif
   475  000D7A                     	if	0	;tblptru may be non-zero
   476  000D7A                     	endif
   477  000D7A                     	if	0	;tblptru may be non-zero
   478  000D7A                     	endif
   479  000D7A  0008               	tblrd		*
   480  000D7C  50F5               	movf	tablat,w,c
   481  000D7E  ECF9  F006         	call	_EscribeLCD_c
   482                           
   483                           ;LibLCDXC8.h: 238: a++;
   484  000D82  2A06               	incf	MensajeLCD_Var@a^0,f,c
   485  000D84                     l1162:
   486  000D84  C006  FFF6         	movff	MensajeLCD_Var@a,tblptrl
   487  000D88                     	if	1	;There is more than 1 active tblptr byte
   488  000D88  0E08               	movlw	high __smallconst
   489  000D8A  6EF7               	movwf	tblptrh,c
   490  000D8C                     	endif
   491  000D8C                     	if	0	;tblptru may be non-zero
   492  000D8C                     	endif
   493  000D8C                     	if	0	;tblptru may be non-zero
   494  000D8C                     	endif
   495  000D8C  0008               	tblrd		*
   496  000D8E  50F5               	movf	tablat,w,c
   497  000D90  0900               	iorlw	0
   498  000D92  B4D8               	btfsc	status,2,c
   499  000D94  0012               	return	
   500  000D96  D7ED               	goto	l1158
   501  000D98                     __end_of_MensajeLCD_Var:
   502                           	callstack 0
   503                           
   504 ;; *************** function _InicializaLCD *****************
   505 ;; Defined at:
   506 ;;		line 71 in file "LibLCDXC8.h"
   507 ;; Parameters:    Size  Location     Type
   508 ;;		None
   509 ;; Auto vars:     Size  Location     Type
   510 ;;		None
   511 ;; Return value:  Size  Location     Type
   512 ;;                  1    wreg      void 
   513 ;; Registers used:
   514 ;;		wreg, status,2, status,0, cstack
   515 ;; Tracked objects:
   516 ;;		On entry : 0/0
   517 ;;		On exit  : 0/0
   518 ;;		Unchanged: 0/0
   519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   520 ;;      Params:         0       0       0       0       0       0       0       0       0
   521 ;;      Locals:         0       0       0       0       0       0       0       0       0
   522 ;;      Temps:          0       0       0       0       0       0       0       0       0
   523 ;;      Totals:         0       0       0       0       0       0       0       0       0
   524 ;;Total ram usage:        0 bytes
   525 ;; Hardware stack levels used: 1
   526 ;; Hardware stack levels required when called: 3
   527 ;; This function calls:
   528 ;;		_BorraLCD
   529 ;;		_EnviaDato
   530 ;;		_HabilitaLCD
   531 ;;		_RetardoLCD
   532 ;; This function is called by:
   533 ;;		_main
   534 ;; This function uses a non-reentrant model
   535 ;;
   536                           
   537                           	psect	text2
   538  000BA4                     __ptext2:
   539                           	callstack 0
   540  000BA4                     _InicializaLCD:
   541                           	callstack 27
   542                           
   543                           ;LibLCDXC8.h: 73: LATD2=0;
   544                           
   545                           ;incstack = 0
   546  000BA4  948C               	bcf	3980,2,c	;volatile
   547                           
   548                           ;LibLCDXC8.h: 74: if(interfaz==4)
   549  000BA6  0E04               	movlw	4
   550  000BA8  181C               	xorwf	_interfaz^0,w,c
   551  000BAA  A4D8               	btfss	status,2,c
   552  000BAC  D004               	goto	l988
   553                           
   554                           ;LibLCDXC8.h: 75: LATD=(LATD & 0b00001111) | 0x30;
   555  000BAE  508C               	movf	140,w,c	;volatile
   556  000BB0  0B0F               	andlw	15
   557  000BB2  0930               	iorlw	48
   558  000BB4  D001               	goto	L1
   559  000BB6                     l988:
   560                           
   561                           ;LibLCDXC8.h: 76: else;LibLCDXC8.h: 77: LATD=0x3F;
   562  000BB6  0E3F               	movlw	63
   563  000BB8                     L1:
   564  000BB8  6E8C               	movwf	140,c	;volatile
   565                           
   566                           ;LibLCDXC8.h: 78: HabilitaLCD();
   567  000BBA  EC19  F007         	call	_HabilitaLCD	;wreg free
   568                           
   569                           ;LibLCDXC8.h: 79: RetardoLCD(1);
   570  000BBE  0E01               	movlw	1
   571  000BC0  EC20  F006         	call	_RetardoLCD
   572                           
   573                           ;LibLCDXC8.h: 80: if(interfaz==4)
   574  000BC4  0E04               	movlw	4
   575  000BC6  181C               	xorwf	_interfaz^0,w,c
   576  000BC8  A4D8               	btfss	status,2,c
   577  000BCA  D004               	goto	l998
   578                           
   579                           ;LibLCDXC8.h: 81: LATD=(LATD & 0b00001111) | 0x30;
   580  000BCC  508C               	movf	140,w,c	;volatile
   581  000BCE  0B0F               	andlw	15
   582  000BD0  0930               	iorlw	48
   583  000BD2  D001               	goto	L2
   584  000BD4                     l998:
   585                           
   586                           ;LibLCDXC8.h: 82: else;LibLCDXC8.h: 83: LATD=0x3F;
   587  000BD4  0E3F               	movlw	63
   588  000BD6                     L2:
   589  000BD6  6E8C               	movwf	140,c	;volatile
   590                           
   591                           ;LibLCDXC8.h: 84: HabilitaLCD();
   592  000BD8  EC19  F007         	call	_HabilitaLCD	;wreg free
   593                           
   594                           ;LibLCDXC8.h: 85: RetardoLCD(3);
   595  000BDC  0E03               	movlw	3
   596  000BDE  EC20  F006         	call	_RetardoLCD
   597                           
   598                           ;LibLCDXC8.h: 86: if(interfaz==4)
   599  000BE2  0E04               	movlw	4
   600  000BE4  181C               	xorwf	_interfaz^0,w,c
   601  000BE6  A4D8               	btfss	status,2,c
   602  000BE8  D004               	goto	l1008
   603                           
   604                           ;LibLCDXC8.h: 87: LATD=(LATD & 0b00001111) | 0x30;
   605  000BEA  508C               	movf	140,w,c	;volatile
   606  000BEC  0B0F               	andlw	15
   607  000BEE  0930               	iorlw	48
   608  000BF0  D001               	goto	L3
   609  000BF2                     l1008:
   610                           
   611                           ;LibLCDXC8.h: 88: else;LibLCDXC8.h: 89: LATD=0x3F;
   612  000BF2  0E3F               	movlw	63
   613  000BF4                     L3:
   614  000BF4  6E8C               	movwf	140,c	;volatile
   615                           
   616                           ;LibLCDXC8.h: 90: HabilitaLCD();
   617  000BF6  EC19  F007         	call	_HabilitaLCD	;wreg free
   618                           
   619                           ;LibLCDXC8.h: 91: RetardoLCD(4);
   620  000BFA  0E04               	movlw	4
   621  000BFC  EC20  F006         	call	_RetardoLCD
   622                           
   623                           ;LibLCDXC8.h: 92: if(interfaz==4){
   624  000C00  0E04               	movlw	4
   625  000C02  181C               	xorwf	_interfaz^0,w,c
   626  000C04  A4D8               	btfss	status,2,c
   627  000C06  D011               	goto	l1028
   628                           
   629                           ;LibLCDXC8.h: 93: LATD=(LATD & 0b00001111) | 0x20;
   630  000C08  508C               	movf	140,w,c	;volatile
   631  000C0A  0B0F               	andlw	15
   632  000C0C  0920               	iorlw	32
   633  000C0E  6E8C               	movwf	140,c	;volatile
   634                           
   635                           ;LibLCDXC8.h: 94: HabilitaLCD();
   636  000C10  EC19  F007         	call	_HabilitaLCD	;wreg free
   637                           
   638                           ;LibLCDXC8.h: 95: RetardoLCD(4);
   639  000C14  0E04               	movlw	4
   640  000C16  EC20  F006         	call	_RetardoLCD
   641                           
   642                           ;LibLCDXC8.h: 96: EnviaDato(0x2F);
   643  000C1A  0E2F               	movlw	47
   644  000C1C  EC74  F006         	call	_EnviaDato
   645                           
   646                           ;LibLCDXC8.h: 97: HabilitaLCD();
   647  000C20  EC19  F007         	call	_HabilitaLCD	;wreg free
   648                           
   649                           ;LibLCDXC8.h: 98: RetardoLCD(4);
   650  000C24  0E04               	movlw	4
   651  000C26  EC20  F006         	call	_RetardoLCD
   652  000C2A                     l1028:
   653                           
   654                           ;LibLCDXC8.h: 99: };LibLCDXC8.h: 100: BorraLCD();
   655  000C2A  EC0F  F007         	call	_BorraLCD	;wreg free
   656                           
   657                           ;LibLCDXC8.h: 101: EnviaDato(0xF);
   658  000C2E  0E0F               	movlw	15
   659  000C30  EC74  F006         	call	_EnviaDato
   660                           
   661                           ;LibLCDXC8.h: 102: HabilitaLCD();
   662  000C34  EC19  F007         	call	_HabilitaLCD	;wreg free
   663                           
   664                           ;LibLCDXC8.h: 103: RetardoLCD(4);
   665  000C38  0E04               	movlw	4
   666  000C3A  EC20  F006         	call	_RetardoLCD
   667  000C3E  0012               	return		;funcret
   668  000C40                     __end_of_InicializaLCD:
   669                           	callstack 0
   670                           
   671 ;; *************** function _BorraLCD *****************
   672 ;; Defined at:
   673 ;;		line 112 in file "LibLCDXC8.h"
   674 ;; Parameters:    Size  Location     Type
   675 ;;		None
   676 ;; Auto vars:     Size  Location     Type
   677 ;;		None
   678 ;; Return value:  Size  Location     Type
   679 ;;                  1    wreg      void 
   680 ;; Registers used:
   681 ;;		wreg, status,2, status,0, cstack
   682 ;; Tracked objects:
   683 ;;		On entry : 0/0
   684 ;;		On exit  : 0/0
   685 ;;		Unchanged: 0/0
   686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   687 ;;      Params:         0       0       0       0       0       0       0       0       0
   688 ;;      Locals:         0       0       0       0       0       0       0       0       0
   689 ;;      Temps:          0       0       0       0       0       0       0       0       0
   690 ;;      Totals:         0       0       0       0       0       0       0       0       0
   691 ;;Total ram usage:        0 bytes
   692 ;; Hardware stack levels used: 1
   693 ;; Hardware stack levels required when called: 2
   694 ;; This function calls:
   695 ;;		_EnviaDato
   696 ;;		_HabilitaLCD
   697 ;;		_RetardoLCD
   698 ;; This function is called by:
   699 ;;		_InicializaLCD
   700 ;;		_main
   701 ;; This function uses a non-reentrant model
   702 ;;
   703                           
   704                           	psect	text3
   705  000E1E                     __ptext3:
   706                           	callstack 0
   707  000E1E                     _BorraLCD:
   708                           	callstack 27
   709                           
   710                           ;LibLCDXC8.h: 114: LATD2=0;
   711                           
   712                           ;incstack = 0
   713  000E1E  948C               	bcf	3980,2,c	;volatile
   714                           
   715                           ;LibLCDXC8.h: 115: EnviaDato(0x01);
   716  000E20  0E01               	movlw	1
   717  000E22  EC74  F006         	call	_EnviaDato
   718                           
   719                           ;LibLCDXC8.h: 116: HabilitaLCD();
   720  000E26  EC19  F007         	call	_HabilitaLCD	;wreg free
   721                           
   722                           ;LibLCDXC8.h: 117: RetardoLCD(2);
   723  000E2A  0E02               	movlw	2
   724  000E2C  EC20  F006         	call	_RetardoLCD
   725  000E30  0012               	return		;funcret
   726  000E32                     __end_of_BorraLCD:
   727                           	callstack 0
   728                           
   729 ;; *************** function _EscribeLCD_n16 *****************
   730 ;; Defined at:
   731 ;;		line 183 in file "LibLCDXC8.h"
   732 ;; Parameters:    Size  Location     Type
   733 ;;  a               2   12[COMRAM] unsigned int 
   734 ;;  b               1   14[COMRAM] unsigned char 
   735 ;; Auto vars:     Size  Location     Type
   736 ;;  centena         2   17[COMRAM] unsigned int 
   737 ;;  millar          2   15[COMRAM] unsigned int 
   738 ;;  unidad          1   20[COMRAM] unsigned char 
   739 ;;  decena          1   19[COMRAM] unsigned char 
   740 ;; Return value:  Size  Location     Type
   741 ;;                  1    wreg      void 
   742 ;; Registers used:
   743 ;;		wreg, status,2, status,0, cstack
   744 ;; Tracked objects:
   745 ;;		On entry : 0/0
   746 ;;		On exit  : 0/0
   747 ;;		Unchanged: 0/0
   748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   749 ;;      Params:         3       0       0       0       0       0       0       0       0
   750 ;;      Locals:         6       0       0       0       0       0       0       0       0
   751 ;;      Temps:          0       0       0       0       0       0       0       0       0
   752 ;;      Totals:         9       0       0       0       0       0       0       0       0
   753 ;;Total ram usage:        9 bytes
   754 ;; Hardware stack levels used: 1
   755 ;; Hardware stack levels required when called: 3
   756 ;; This function calls:
   757 ;;		_EscribeLCD_c
   758 ;;		___lwdiv
   759 ;;		___lwmod
   760 ;; This function is called by:
   761 ;;		_main
   762 ;; This function uses a non-reentrant model
   763 ;;
   764                           
   765                           	psect	text4
   766  000818                     __ptext4:
   767                           	callstack 0
   768  000818                     _EscribeLCD_n16:
   769                           	callstack 27
   770                           
   771                           ;LibLCDXC8.h: 188: unsigned char decena,unidad;;LibLCDXC8.h: 189: unsigned int centena,m
      +                          illar;;LibLCDXC8.h: 190: LATD2=1;
   772                           
   773                           ;incstack = 0
   774  000818  848C               	bsf	3980,2,c	;volatile
   775                           
   776                           ;LibLCDXC8.h: 191: switch(b){
   777  00081A  D157               	goto	l1154
   778  00081C                     l1142:
   779  00081C  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
   780  000820  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
   781  000824  0E00               	movlw	0
   782  000826  6E04               	movwf	(___lwmod@divisor+1)^0,c
   783  000828  0E0A               	movlw	10
   784  00082A  6E03               	movwf	___lwmod@divisor^0,c
   785  00082C  EC97  F006         	call	___lwmod	;wreg free
   786  000830  5001               	movf	?___lwmod^0,w,c
   787  000832  6E15               	movwf	EscribeLCD_n16@unidad^0,c
   788                           
   789                           ;LibLCDXC8.h: 193: EscribeLCD_c(unidad+48);
   790  000834  5015               	movf	EscribeLCD_n16@unidad^0,w,c
   791  000836  0F30               	addlw	48
   792  000838  ECF9  F006         	call	_EscribeLCD_c
   793                           
   794                           ;LibLCDXC8.h: 194: break;
   795  00083C  0012               	return	
   796  00083E                     l1144:
   797  00083E  0E00               	movlw	0
   798  000840  6E04               	movwf	(___lwmod@divisor+1)^0,c
   799  000842  0E64               	movlw	100
   800  000844  6E03               	movwf	___lwmod@divisor^0,c
   801  000846  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
   802  00084A  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
   803  00084E  EC97  F006         	call	___lwmod	;wreg free
   804  000852  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   805  000856  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   806  00085A  0E00               	movlw	0
   807  00085C  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   808  00085E  0E0A               	movlw	10
   809  000860  6E08               	movwf	___lwdiv@divisor^0,c
   810  000862  EC4B  F006         	call	___lwdiv	;wreg free
   811  000866  5006               	movf	?___lwdiv^0,w,c
   812  000868  6E14               	movwf	EscribeLCD_n16@decena^0,c
   813                           
   814                           ;LibLCDXC8.h: 196: unidad=a%10;
   815  00086A  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
   816  00086E  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
   817  000872  0E00               	movlw	0
   818  000874  6E04               	movwf	(___lwmod@divisor+1)^0,c
   819  000876  0E0A               	movlw	10
   820  000878  6E03               	movwf	___lwmod@divisor^0,c
   821  00087A  EC97  F006         	call	___lwmod	;wreg free
   822  00087E  5001               	movf	?___lwmod^0,w,c
   823  000880  6E15               	movwf	EscribeLCD_n16@unidad^0,c
   824                           
   825                           ;LibLCDXC8.h: 197: EscribeLCD_c(decena+48);
   826  000882  5014               	movf	EscribeLCD_n16@decena^0,w,c
   827  000884  0F30               	addlw	48
   828  000886  ECF9  F006         	call	_EscribeLCD_c
   829                           
   830                           ;LibLCDXC8.h: 198: EscribeLCD_c(unidad+48);
   831  00088A  5015               	movf	EscribeLCD_n16@unidad^0,w,c
   832  00088C  0F30               	addlw	48
   833  00088E  ECF9  F006         	call	_EscribeLCD_c
   834                           
   835                           ;LibLCDXC8.h: 199: break;
   836  000892  0012               	return	
   837  000894                     l1146:
   838  000894  0E03               	movlw	3
   839  000896  6E04               	movwf	(___lwmod@divisor+1)^0,c
   840  000898  0EE8               	movlw	232
   841  00089A  6E03               	movwf	___lwmod@divisor^0,c
   842  00089C  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
   843  0008A0  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
   844  0008A4  EC97  F006         	call	___lwmod	;wreg free
   845  0008A8  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   846  0008AC  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   847  0008B0  0E00               	movlw	0
   848  0008B2  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   849  0008B4  0E64               	movlw	100
   850  0008B6  6E08               	movwf	___lwdiv@divisor^0,c
   851  0008B8  EC4B  F006         	call	___lwdiv	;wreg free
   852  0008BC  C006  F012         	movff	?___lwdiv,EscribeLCD_n16@centena
   853  0008C0  C007  F013         	movff	?___lwdiv+1,EscribeLCD_n16@centena+1
   854                           
   855                           ;LibLCDXC8.h: 201: decena=(a%100)/10;
   856  0008C4  0E00               	movlw	0
   857  0008C6  6E04               	movwf	(___lwmod@divisor+1)^0,c
   858  0008C8  0E64               	movlw	100
   859  0008CA  6E03               	movwf	___lwmod@divisor^0,c
   860  0008CC  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
   861  0008D0  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
   862  0008D4  EC97  F006         	call	___lwmod	;wreg free
   863  0008D8  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   864  0008DC  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   865  0008E0  0E00               	movlw	0
   866  0008E2  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   867  0008E4  0E0A               	movlw	10
   868  0008E6  6E08               	movwf	___lwdiv@divisor^0,c
   869  0008E8  EC4B  F006         	call	___lwdiv	;wreg free
   870  0008EC  5006               	movf	?___lwdiv^0,w,c
   871  0008EE  6E14               	movwf	EscribeLCD_n16@decena^0,c
   872                           
   873                           ;LibLCDXC8.h: 202: unidad=a%10;
   874  0008F0  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
   875  0008F4  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
   876  0008F8  0E00               	movlw	0
   877  0008FA  6E04               	movwf	(___lwmod@divisor+1)^0,c
   878  0008FC  0E0A               	movlw	10
   879  0008FE  6E03               	movwf	___lwmod@divisor^0,c
   880  000900  EC97  F006         	call	___lwmod	;wreg free
   881  000904  5001               	movf	?___lwmod^0,w,c
   882  000906  6E15               	movwf	EscribeLCD_n16@unidad^0,c
   883                           
   884                           ;LibLCDXC8.h: 203: EscribeLCD_c(centena+48);
   885  000908  5012               	movf	EscribeLCD_n16@centena^0,w,c
   886  00090A  0F30               	addlw	48
   887  00090C  ECF9  F006         	call	_EscribeLCD_c
   888                           
   889                           ;LibLCDXC8.h: 204: EscribeLCD_c(decena+48);
   890  000910  5014               	movf	EscribeLCD_n16@decena^0,w,c
   891  000912  0F30               	addlw	48
   892  000914  ECF9  F006         	call	_EscribeLCD_c
   893                           
   894                           ;LibLCDXC8.h: 205: EscribeLCD_c(unidad+48);
   895  000918  5015               	movf	EscribeLCD_n16@unidad^0,w,c
   896  00091A  0F30               	addlw	48
   897  00091C  ECF9  F006         	call	_EscribeLCD_c
   898                           
   899                           ;LibLCDXC8.h: 206: break;
   900  000920  0012               	return	
   901  000922                     l1148:
   902  000922  0E27               	movlw	39
   903  000924  6E04               	movwf	(___lwmod@divisor+1)^0,c
   904  000926  0E10               	movlw	16
   905  000928  6E03               	movwf	___lwmod@divisor^0,c
   906  00092A  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
   907  00092E  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
   908  000932  EC97  F006         	call	___lwmod	;wreg free
   909  000936  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   910  00093A  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   911  00093E  0E03               	movlw	3
   912  000940  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   913  000942  0EE8               	movlw	232
   914  000944  6E08               	movwf	___lwdiv@divisor^0,c
   915  000946  EC4B  F006         	call	___lwdiv	;wreg free
   916  00094A  C006  F010         	movff	?___lwdiv,EscribeLCD_n16@millar
   917  00094E  C007  F011         	movff	?___lwdiv+1,EscribeLCD_n16@millar+1
   918                           
   919                           ;LibLCDXC8.h: 208: centena=(a%1000)/100;
   920  000952  0E03               	movlw	3
   921  000954  6E04               	movwf	(___lwmod@divisor+1)^0,c
   922  000956  0EE8               	movlw	232
   923  000958  6E03               	movwf	___lwmod@divisor^0,c
   924  00095A  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
   925  00095E  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
   926  000962  EC97  F006         	call	___lwmod	;wreg free
   927  000966  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   928  00096A  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   929  00096E  0E00               	movlw	0
   930  000970  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   931  000972  0E64               	movlw	100
   932  000974  6E08               	movwf	___lwdiv@divisor^0,c
   933  000976  EC4B  F006         	call	___lwdiv	;wreg free
   934  00097A  C006  F012         	movff	?___lwdiv,EscribeLCD_n16@centena
   935  00097E  C007  F013         	movff	?___lwdiv+1,EscribeLCD_n16@centena+1
   936                           
   937                           ;LibLCDXC8.h: 209: decena=(a%100)/10;
   938  000982  0E00               	movlw	0
   939  000984  6E04               	movwf	(___lwmod@divisor+1)^0,c
   940  000986  0E64               	movlw	100
   941  000988  6E03               	movwf	___lwmod@divisor^0,c
   942  00098A  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
   943  00098E  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
   944  000992  EC97  F006         	call	___lwmod	;wreg free
   945  000996  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   946  00099A  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   947  00099E  0E00               	movlw	0
   948  0009A0  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   949  0009A2  0E0A               	movlw	10
   950  0009A4  6E08               	movwf	___lwdiv@divisor^0,c
   951  0009A6  EC4B  F006         	call	___lwdiv	;wreg free
   952  0009AA  5006               	movf	?___lwdiv^0,w,c
   953  0009AC  6E14               	movwf	EscribeLCD_n16@decena^0,c
   954                           
   955                           ;LibLCDXC8.h: 210: unidad=a%10;
   956  0009AE  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
   957  0009B2  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
   958  0009B6  0E00               	movlw	0
   959  0009B8  6E04               	movwf	(___lwmod@divisor+1)^0,c
   960  0009BA  0E0A               	movlw	10
   961  0009BC  6E03               	movwf	___lwmod@divisor^0,c
   962  0009BE  EC97  F006         	call	___lwmod	;wreg free
   963  0009C2  5001               	movf	?___lwmod^0,w,c
   964  0009C4  6E15               	movwf	EscribeLCD_n16@unidad^0,c
   965                           
   966                           ;LibLCDXC8.h: 211: EscribeLCD_c(millar+48);
   967  0009C6  5010               	movf	EscribeLCD_n16@millar^0,w,c
   968  0009C8  0F30               	addlw	48
   969  0009CA  ECF9  F006         	call	_EscribeLCD_c
   970                           
   971                           ;LibLCDXC8.h: 212: EscribeLCD_c(centena+48);
   972  0009CE  5012               	movf	EscribeLCD_n16@centena^0,w,c
   973  0009D0  0F30               	addlw	48
   974  0009D2  ECF9  F006         	call	_EscribeLCD_c
   975                           
   976                           ;LibLCDXC8.h: 213: EscribeLCD_c(decena+48);
   977  0009D6  5014               	movf	EscribeLCD_n16@decena^0,w,c
   978  0009D8  0F30               	addlw	48
   979  0009DA  ECF9  F006         	call	_EscribeLCD_c
   980                           
   981                           ;LibLCDXC8.h: 214: EscribeLCD_c(unidad+48);
   982  0009DE  5015               	movf	EscribeLCD_n16@unidad^0,w,c
   983  0009E0  0F30               	addlw	48
   984  0009E2  ECF9  F006         	call	_EscribeLCD_c
   985                           
   986                           ;LibLCDXC8.h: 215: break;
   987  0009E6  0012               	return	
   988  0009E8                     l1150:
   989  0009E8  C00D  F006         	movff	EscribeLCD_n16@a,___lwdiv@dividend
   990  0009EC  C00E  F007         	movff	EscribeLCD_n16@a+1,___lwdiv@dividend+1
   991  0009F0  0E27               	movlw	39
   992  0009F2  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   993  0009F4  0E10               	movlw	16
   994  0009F6  6E08               	movwf	___lwdiv@divisor^0,c
   995  0009F8  EC4B  F006         	call	___lwdiv	;wreg free
   996  0009FC  5006               	movf	?___lwdiv^0,w,c
   997  0009FE  0F30               	addlw	48
   998  000A00  ECF9  F006         	call	_EscribeLCD_c
   999                           
  1000                           ;LibLCDXC8.h: 217: millar=(a%10000)/1000;
  1001  000A04  0E27               	movlw	39
  1002  000A06  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1003  000A08  0E10               	movlw	16
  1004  000A0A  6E03               	movwf	___lwmod@divisor^0,c
  1005  000A0C  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
  1006  000A10  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
  1007  000A14  EC97  F006         	call	___lwmod	;wreg free
  1008  000A18  C001  F006         	movff	?___lwmod,___lwdiv@dividend
  1009  000A1C  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
  1010  000A20  0E03               	movlw	3
  1011  000A22  6E09               	movwf	(___lwdiv@divisor+1)^0,c
  1012  000A24  0EE8               	movlw	232
  1013  000A26  6E08               	movwf	___lwdiv@divisor^0,c
  1014  000A28  EC4B  F006         	call	___lwdiv	;wreg free
  1015  000A2C  C006  F010         	movff	?___lwdiv,EscribeLCD_n16@millar
  1016  000A30  C007  F011         	movff	?___lwdiv+1,EscribeLCD_n16@millar+1
  1017                           
  1018                           ;LibLCDXC8.h: 218: centena=(a%1000)/100;
  1019  000A34  0E03               	movlw	3
  1020  000A36  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1021  000A38  0EE8               	movlw	232
  1022  000A3A  6E03               	movwf	___lwmod@divisor^0,c
  1023  000A3C  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
  1024  000A40  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
  1025  000A44  EC97  F006         	call	___lwmod	;wreg free
  1026  000A48  C001  F006         	movff	?___lwmod,___lwdiv@dividend
  1027  000A4C  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
  1028  000A50  0E00               	movlw	0
  1029  000A52  6E09               	movwf	(___lwdiv@divisor+1)^0,c
  1030  000A54  0E64               	movlw	100
  1031  000A56  6E08               	movwf	___lwdiv@divisor^0,c
  1032  000A58  EC4B  F006         	call	___lwdiv	;wreg free
  1033  000A5C  C006  F012         	movff	?___lwdiv,EscribeLCD_n16@centena
  1034  000A60  C007  F013         	movff	?___lwdiv+1,EscribeLCD_n16@centena+1
  1035                           
  1036                           ;LibLCDXC8.h: 219: decena=(a%100)/10;
  1037  000A64  0E00               	movlw	0
  1038  000A66  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1039  000A68  0E64               	movlw	100
  1040  000A6A  6E03               	movwf	___lwmod@divisor^0,c
  1041  000A6C  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
  1042  000A70  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
  1043  000A74  EC97  F006         	call	___lwmod	;wreg free
  1044  000A78  C001  F006         	movff	?___lwmod,___lwdiv@dividend
  1045  000A7C  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
  1046  000A80  0E00               	movlw	0
  1047  000A82  6E09               	movwf	(___lwdiv@divisor+1)^0,c
  1048  000A84  0E0A               	movlw	10
  1049  000A86  6E08               	movwf	___lwdiv@divisor^0,c
  1050  000A88  EC4B  F006         	call	___lwdiv	;wreg free
  1051  000A8C  5006               	movf	?___lwdiv^0,w,c
  1052  000A8E  6E14               	movwf	EscribeLCD_n16@decena^0,c
  1053                           
  1054                           ;LibLCDXC8.h: 220: unidad=a%10;
  1055  000A90  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
  1056  000A94  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
  1057  000A98  0E00               	movlw	0
  1058  000A9A  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1059  000A9C  0E0A               	movlw	10
  1060  000A9E  6E03               	movwf	___lwmod@divisor^0,c
  1061  000AA0  EC97  F006         	call	___lwmod	;wreg free
  1062  000AA4  5001               	movf	?___lwmod^0,w,c
  1063  000AA6  6E15               	movwf	EscribeLCD_n16@unidad^0,c
  1064                           
  1065                           ;LibLCDXC8.h: 221: EscribeLCD_c(millar+48);
  1066  000AA8  5010               	movf	EscribeLCD_n16@millar^0,w,c
  1067  000AAA  0F30               	addlw	48
  1068  000AAC  ECF9  F006         	call	_EscribeLCD_c
  1069                           
  1070                           ;LibLCDXC8.h: 222: EscribeLCD_c(centena+48);
  1071  000AB0  5012               	movf	EscribeLCD_n16@centena^0,w,c
  1072  000AB2  0F30               	addlw	48
  1073  000AB4  ECF9  F006         	call	_EscribeLCD_c
  1074                           
  1075                           ;LibLCDXC8.h: 223: EscribeLCD_c(decena+48);
  1076  000AB8  5014               	movf	EscribeLCD_n16@decena^0,w,c
  1077  000ABA  0F30               	addlw	48
  1078  000ABC  ECF9  F006         	call	_EscribeLCD_c
  1079                           
  1080                           ;LibLCDXC8.h: 224: EscribeLCD_c(unidad+48);
  1081  000AC0  5015               	movf	EscribeLCD_n16@unidad^0,w,c
  1082  000AC2  0F30               	addlw	48
  1083  000AC4  ECF9  F006         	call	_EscribeLCD_c
  1084                           
  1085                           ;LibLCDXC8.h: 225: break;
  1086  000AC8  0012               	return	
  1087  000ACA                     l1154:
  1088  000ACA  500F               	movf	EscribeLCD_n16@b^0,w,c
  1089                           
  1090                           ; Switch size 1, requested type "simple"
  1091                           ; Number of cases is 5, Range of values is 1 to 5
  1092                           ; switch strategies available:
  1093                           ; Name         Instructions Cycles
  1094                           ; simple_byte           16     9 (average)
  1095                           ;	Chosen strategy is simple_byte
  1096  000ACC  0A01               	xorlw	1	; case 1
  1097  000ACE  B4D8               	btfsc	status,2,c
  1098  000AD0  D6A5               	goto	l1142
  1099  000AD2  0A03               	xorlw	3	; case 2
  1100  000AD4  B4D8               	btfsc	status,2,c
  1101  000AD6  D6B3               	goto	l1144
  1102  000AD8  0A01               	xorlw	1	; case 3
  1103  000ADA  B4D8               	btfsc	status,2,c
  1104  000ADC  D6DB               	goto	l1146
  1105  000ADE  0A07               	xorlw	7	; case 4
  1106  000AE0  B4D8               	btfsc	status,2,c
  1107  000AE2  D71F               	goto	l1148
  1108  000AE4  0A01               	xorlw	1	; case 5
  1109  000AE6  A4D8               	btfss	status,2,c
  1110  000AE8  0012               	return	
  1111  000AEA  D77E               	goto	l1150
  1112  000AEC                     __end_of_EscribeLCD_n16:
  1113                           	callstack 0
  1114                           
  1115 ;; *************** function ___lwmod *****************
  1116 ;; Defined at:
  1117 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  1118 ;; Parameters:    Size  Location     Type
  1119 ;;  dividend        2    0[COMRAM] unsigned int 
  1120 ;;  divisor         2    2[COMRAM] unsigned int 
  1121 ;; Auto vars:     Size  Location     Type
  1122 ;;  counter         1    4[COMRAM] unsigned char 
  1123 ;; Return value:  Size  Location     Type
  1124 ;;                  2    0[COMRAM] unsigned int 
  1125 ;; Registers used:
  1126 ;;		wreg, status,2, status,0
  1127 ;; Tracked objects:
  1128 ;;		On entry : 0/0
  1129 ;;		On exit  : 0/0
  1130 ;;		Unchanged: 0/0
  1131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1132 ;;      Params:         4       0       0       0       0       0       0       0       0
  1133 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1134 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1135 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1136 ;;Total ram usage:        5 bytes
  1137 ;; Hardware stack levels used: 1
  1138 ;; This function calls:
  1139 ;;		Nothing
  1140 ;; This function is called by:
  1141 ;;		_EscribeLCD_n16
  1142 ;; This function uses a non-reentrant model
  1143 ;;
  1144                           
  1145                           	psect	text5
  1146  000D2E                     __ptext5:
  1147                           	callstack 0
  1148  000D2E                     ___lwmod:
  1149                           	callstack 29
  1150                           
  1151                           ;incstack = 0
  1152  000D2E  5003               	movf	___lwmod@divisor^0,w,c
  1153  000D30  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
  1154  000D32  B4D8               	btfsc	status,2,c
  1155  000D34  D018               	goto	l634
  1156  000D36  0E01               	movlw	1
  1157  000D38  6E05               	movwf	___lwmod@counter^0,c
  1158  000D3A  D004               	goto	l1130
  1159  000D3C                     l1128:
  1160  000D3C  90D8               	bcf	status,0,c
  1161  000D3E  3603               	rlcf	___lwmod@divisor^0,f,c
  1162  000D40  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
  1163  000D42  2A05               	incf	___lwmod@counter^0,f,c
  1164  000D44                     l1130:
  1165  000D44  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
  1166  000D46  D7FA               	goto	l1128
  1167  000D48                     u210:
  1168  000D48  5003               	movf	___lwmod@divisor^0,w,c
  1169  000D4A  5C01               	subwf	___lwmod@dividend^0,w,c
  1170  000D4C  5004               	movf	(___lwmod@divisor+1)^0,w,c
  1171  000D4E  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
  1172  000D50  A0D8               	btfss	status,0,c
  1173  000D52  D004               	goto	l1136
  1174  000D54  5003               	movf	___lwmod@divisor^0,w,c
  1175  000D56  5E01               	subwf	___lwmod@dividend^0,f,c
  1176  000D58  5004               	movf	(___lwmod@divisor+1)^0,w,c
  1177  000D5A  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
  1178  000D5C                     l1136:
  1179  000D5C  90D8               	bcf	status,0,c
  1180  000D5E  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
  1181  000D60  3203               	rrcf	___lwmod@divisor^0,f,c
  1182  000D62  2E05               	decfsz	___lwmod@counter^0,f,c
  1183  000D64  D7F1               	goto	u210
  1184  000D66                     l634:
  1185  000D66  C001  F001         	movff	___lwmod@dividend,?___lwmod
  1186  000D6A  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  1187  000D6E  0012               	return		;funcret
  1188  000D70                     __end_of___lwmod:
  1189                           	callstack 0
  1190                           
  1191 ;; *************** function ___lwdiv *****************
  1192 ;; Defined at:
  1193 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  1194 ;; Parameters:    Size  Location     Type
  1195 ;;  dividend        2    5[COMRAM] unsigned int 
  1196 ;;  divisor         2    7[COMRAM] unsigned int 
  1197 ;; Auto vars:     Size  Location     Type
  1198 ;;  quotient        2    9[COMRAM] unsigned int 
  1199 ;;  counter         1   11[COMRAM] unsigned char 
  1200 ;; Return value:  Size  Location     Type
  1201 ;;                  2    5[COMRAM] unsigned int 
  1202 ;; Registers used:
  1203 ;;		wreg, status,2, status,0
  1204 ;; Tracked objects:
  1205 ;;		On entry : 0/0
  1206 ;;		On exit  : 0/0
  1207 ;;		Unchanged: 0/0
  1208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1209 ;;      Params:         4       0       0       0       0       0       0       0       0
  1210 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1211 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1212 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1213 ;;Total ram usage:        7 bytes
  1214 ;; Hardware stack levels used: 1
  1215 ;; This function calls:
  1216 ;;		Nothing
  1217 ;; This function is called by:
  1218 ;;		_EscribeLCD_n16
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221                           
  1222                           	psect	text6
  1223  000C96                     __ptext6:
  1224                           	callstack 0
  1225  000C96                     ___lwdiv:
  1226                           	callstack 29
  1227                           
  1228                           ;incstack = 0
  1229  000C96  0E00               	movlw	0
  1230  000C98  6E0B               	movwf	(___lwdiv@quotient+1)^0,c
  1231  000C9A  0E00               	movlw	0
  1232  000C9C  6E0A               	movwf	___lwdiv@quotient^0,c
  1233  000C9E  5008               	movf	___lwdiv@divisor^0,w,c
  1234  000CA0  1009               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1235  000CA2  B4D8               	btfsc	status,2,c
  1236  000CA4  D01C               	goto	l624
  1237  000CA6  0E01               	movlw	1
  1238  000CA8  6E0C               	movwf	___lwdiv@counter^0,c
  1239  000CAA  D004               	goto	l1110
  1240  000CAC                     l1108:
  1241  000CAC  90D8               	bcf	status,0,c
  1242  000CAE  3608               	rlcf	___lwdiv@divisor^0,f,c
  1243  000CB0  3609               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1244  000CB2  2A0C               	incf	___lwdiv@counter^0,f,c
  1245  000CB4                     l1110:
  1246  000CB4  AE09               	btfss	(___lwdiv@divisor+1)^0,7,c
  1247  000CB6  D7FA               	goto	l1108
  1248  000CB8                     u180:
  1249  000CB8  90D8               	bcf	status,0,c
  1250  000CBA  360A               	rlcf	___lwdiv@quotient^0,f,c
  1251  000CBC  360B               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1252  000CBE  5008               	movf	___lwdiv@divisor^0,w,c
  1253  000CC0  5C06               	subwf	___lwdiv@dividend^0,w,c
  1254  000CC2  5009               	movf	(___lwdiv@divisor+1)^0,w,c
  1255  000CC4  5807               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1256  000CC6  A0D8               	btfss	status,0,c
  1257  000CC8  D005               	goto	l1120
  1258  000CCA  5008               	movf	___lwdiv@divisor^0,w,c
  1259  000CCC  5E06               	subwf	___lwdiv@dividend^0,f,c
  1260  000CCE  5009               	movf	(___lwdiv@divisor+1)^0,w,c
  1261  000CD0  5A07               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1262  000CD2  800A               	bsf	___lwdiv@quotient^0,0,c
  1263  000CD4                     l1120:
  1264  000CD4  90D8               	bcf	status,0,c
  1265  000CD6  3209               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1266  000CD8  3208               	rrcf	___lwdiv@divisor^0,f,c
  1267  000CDA  2E0C               	decfsz	___lwdiv@counter^0,f,c
  1268  000CDC  D7ED               	goto	u180
  1269  000CDE                     l624:
  1270  000CDE  C00A  F006         	movff	___lwdiv@quotient,?___lwdiv
  1271  000CE2  C00B  F007         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1272  000CE6  0012               	return		;funcret
  1273  000CE8                     __end_of___lwdiv:
  1274                           	callstack 0
  1275                           
  1276 ;; *************** function _EscribeLCD_c *****************
  1277 ;; Defined at:
  1278 ;;		line 136 in file "LibLCDXC8.h"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;  a               1    wreg     unsigned char 
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;  a               1    4[COMRAM] unsigned char 
  1283 ;; Return value:  Size  Location     Type
  1284 ;;                  1    wreg      void 
  1285 ;; Registers used:
  1286 ;;		wreg, status,2, status,0, cstack
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1292 ;;      Params:         0       0       0       0       0       0       0       0       0
  1293 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1294 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1295 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1296 ;;Total ram usage:        1 bytes
  1297 ;; Hardware stack levels used: 1
  1298 ;; Hardware stack levels required when called: 2
  1299 ;; This function calls:
  1300 ;;		_EnviaDato
  1301 ;;		_HabilitaLCD
  1302 ;;		_RetardoLCD
  1303 ;; This function is called by:
  1304 ;;		_EscribeLCD_n16
  1305 ;;		_MensajeLCD_Var
  1306 ;; This function uses a non-reentrant model
  1307 ;;
  1308                           
  1309                           	psect	text7
  1310  000DF2                     __ptext7:
  1311                           	callstack 0
  1312  000DF2                     _EscribeLCD_c:
  1313                           	callstack 27
  1314                           
  1315                           ;incstack = 0
  1316                           ;EscribeLCD_c@a stored from wreg
  1317  000DF2  6E05               	movwf	EscribeLCD_c@a^0,c
  1318                           
  1319                           ;LibLCDXC8.h: 140: LATD2=1;
  1320  000DF4  848C               	bsf	3980,2,c	;volatile
  1321                           
  1322                           ;LibLCDXC8.h: 141: EnviaDato(a);
  1323  000DF6  5005               	movf	EscribeLCD_c@a^0,w,c
  1324  000DF8  EC74  F006         	call	_EnviaDato
  1325                           
  1326                           ;LibLCDXC8.h: 142: HabilitaLCD();
  1327  000DFC  EC19  F007         	call	_HabilitaLCD	;wreg free
  1328                           
  1329                           ;LibLCDXC8.h: 143: RetardoLCD(4);
  1330  000E00  0E04               	movlw	4
  1331  000E02  EC20  F006         	call	_RetardoLCD
  1332  000E06  0012               	return		;funcret
  1333  000E08                     __end_of_EscribeLCD_c:
  1334                           	callstack 0
  1335                           
  1336 ;; *************** function _DireccionaLCD *****************
  1337 ;; Defined at:
  1338 ;;		line 241 in file "LibLCDXC8.h"
  1339 ;; Parameters:    Size  Location     Type
  1340 ;;  a               1    wreg     unsigned char 
  1341 ;; Auto vars:     Size  Location     Type
  1342 ;;  a               1    4[COMRAM] unsigned char 
  1343 ;; Return value:  Size  Location     Type
  1344 ;;                  1    wreg      void 
  1345 ;; Registers used:
  1346 ;;		wreg, status,2, status,0, cstack
  1347 ;; Tracked objects:
  1348 ;;		On entry : 0/0
  1349 ;;		On exit  : 0/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1352 ;;      Params:         0       0       0       0       0       0       0       0       0
  1353 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1354 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1355 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1356 ;;Total ram usage:        1 bytes
  1357 ;; Hardware stack levels used: 1
  1358 ;; Hardware stack levels required when called: 2
  1359 ;; This function calls:
  1360 ;;		_EnviaDato
  1361 ;;		_HabilitaLCD
  1362 ;;		_RetardoLCD
  1363 ;; This function is called by:
  1364 ;;		_main
  1365 ;; This function uses a non-reentrant model
  1366 ;;
  1367                           
  1368                           	psect	text8
  1369  000E08                     __ptext8:
  1370                           	callstack 0
  1371  000E08                     _DireccionaLCD:
  1372                           	callstack 28
  1373                           
  1374                           ;incstack = 0
  1375                           ;DireccionaLCD@a stored from wreg
  1376  000E08  6E05               	movwf	DireccionaLCD@a^0,c
  1377                           
  1378                           ;LibLCDXC8.h: 244: LATD2=0;
  1379  000E0A  948C               	bcf	3980,2,c	;volatile
  1380                           
  1381                           ;LibLCDXC8.h: 245: EnviaDato(a);
  1382  000E0C  5005               	movf	DireccionaLCD@a^0,w,c
  1383  000E0E  EC74  F006         	call	_EnviaDato
  1384                           
  1385                           ;LibLCDXC8.h: 246: HabilitaLCD();
  1386  000E12  EC19  F007         	call	_HabilitaLCD	;wreg free
  1387                           
  1388                           ;LibLCDXC8.h: 247: RetardoLCD(4);
  1389  000E16  0E04               	movlw	4
  1390  000E18  EC20  F006         	call	_RetardoLCD
  1391  000E1C  0012               	return		;funcret
  1392  000E1E                     __end_of_DireccionaLCD:
  1393                           	callstack 0
  1394                           
  1395 ;; *************** function _EnviaDato *****************
  1396 ;; Defined at:
  1397 ;;		line 59 in file "LibLCDXC8.h"
  1398 ;; Parameters:    Size  Location     Type
  1399 ;;  a               1    wreg     unsigned char 
  1400 ;; Auto vars:     Size  Location     Type
  1401 ;;  a               1    3[COMRAM] unsigned char 
  1402 ;; Return value:  Size  Location     Type
  1403 ;;                  1    wreg      void 
  1404 ;; Registers used:
  1405 ;;		wreg, status,2, status,0, cstack
  1406 ;; Tracked objects:
  1407 ;;		On entry : 0/0
  1408 ;;		On exit  : 0/0
  1409 ;;		Unchanged: 0/0
  1410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1411 ;;      Params:         0       0       0       0       0       0       0       0       0
  1412 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1413 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1414 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1415 ;;Total ram usage:        2 bytes
  1416 ;; Hardware stack levels used: 1
  1417 ;; Hardware stack levels required when called: 1
  1418 ;; This function calls:
  1419 ;;		_HabilitaLCD
  1420 ;;		_RetardoLCD
  1421 ;; This function is called by:
  1422 ;;		_InicializaLCD
  1423 ;;		_BorraLCD
  1424 ;;		_EscribeLCD_c
  1425 ;;		_DireccionaLCD
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429                           	psect	text9
  1430  000CE8                     __ptext9:
  1431                           	callstack 0
  1432  000CE8                     _EnviaDato:
  1433                           	callstack 27
  1434                           
  1435                           ;incstack = 0
  1436                           ;EnviaDato@a stored from wreg
  1437  000CE8  6E04               	movwf	EnviaDato@a^0,c
  1438                           
  1439                           ;LibLCDXC8.h: 60: if(interfaz==4){
  1440  000CEA  0E04               	movlw	4
  1441  000CEC  181C               	xorwf	_interfaz^0,w,c
  1442  000CEE  A4D8               	btfss	status,2,c
  1443  000CF0  D017               	goto	l920
  1444                           
  1445                           ;LibLCDXC8.h: 61: LATD=(LATD & 0b00001111) | (a & 0b11110000);
  1446  000CF2  C004  F003         	movff	EnviaDato@a,??_EnviaDato
  1447  000CF6  0EF0               	movlw	240
  1448  000CF8  1603               	andwf	??_EnviaDato^0,f,c
  1449  000CFA  508C               	movf	140,w,c	;volatile
  1450  000CFC  0B0F               	andlw	15
  1451  000CFE  1003               	iorwf	??_EnviaDato^0,w,c
  1452  000D00  6E8C               	movwf	140,c	;volatile
  1453                           
  1454                           ;LibLCDXC8.h: 62: HabilitaLCD();
  1455  000D02  EC19  F007         	call	_HabilitaLCD	;wreg free
  1456                           
  1457                           ;LibLCDXC8.h: 63: RetardoLCD(1);
  1458  000D06  0E01               	movlw	1
  1459  000D08  EC20  F006         	call	_RetardoLCD
  1460                           
  1461                           ;LibLCDXC8.h: 64: LATD=(LATD & 0b00001111) | (a<<4);
  1462  000D0C  C004  F003         	movff	EnviaDato@a,??_EnviaDato
  1463  000D10  3A03               	swapf	??_EnviaDato^0,f,c
  1464  000D12  0EF0               	movlw	240
  1465  000D14  1603               	andwf	??_EnviaDato^0,f,c
  1466  000D16  508C               	movf	140,w,c	;volatile
  1467  000D18  0B0F               	andlw	15
  1468  000D1A  1003               	iorwf	??_EnviaDato^0,w,c
  1469  000D1C  6E8C               	movwf	140,c	;volatile
  1470                           
  1471                           ;LibLCDXC8.h: 67: }else if(interfaz==8){
  1472  000D1E  0012               	return	
  1473  000D20                     l920:
  1474  000D20  0E08               	movlw	8
  1475  000D22  181C               	xorwf	_interfaz^0,w,c
  1476  000D24  A4D8               	btfss	status,2,c
  1477  000D26  0012               	return	
  1478                           
  1479                           ;LibLCDXC8.h: 68: LATD=a;
  1480  000D28  C004  FF8C         	movff	EnviaDato@a,3980	;volatile
  1481  000D2C  0012               	return		;funcret
  1482  000D2E                     __end_of_EnviaDato:
  1483                           	callstack 0
  1484                           
  1485 ;; *************** function _RetardoLCD *****************
  1486 ;; Defined at:
  1487 ;;		line 274 in file "LibLCDXC8.h"
  1488 ;; Parameters:    Size  Location     Type
  1489 ;;  a               1    wreg     unsigned char 
  1490 ;; Auto vars:     Size  Location     Type
  1491 ;;  a               1    1[COMRAM] unsigned char 
  1492 ;; Return value:  Size  Location     Type
  1493 ;;                  1    wreg      void 
  1494 ;; Registers used:
  1495 ;;		wreg, status,2, status,0
  1496 ;; Tracked objects:
  1497 ;;		On entry : 0/0
  1498 ;;		On exit  : 0/0
  1499 ;;		Unchanged: 0/0
  1500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1501 ;;      Params:         0       0       0       0       0       0       0       0       0
  1502 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1503 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1504 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1505 ;;Total ram usage:        2 bytes
  1506 ;; Hardware stack levels used: 1
  1507 ;; This function calls:
  1508 ;;		Nothing
  1509 ;; This function is called by:
  1510 ;;		_EnviaDato
  1511 ;;		_InicializaLCD
  1512 ;;		_BorraLCD
  1513 ;;		_EscribeLCD_c
  1514 ;;		_DireccionaLCD
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           	psect	text10
  1519  000C40                     __ptext10:
  1520                           	callstack 0
  1521  000C40                     _RetardoLCD:
  1522                           	callstack 28
  1523                           
  1524                           ;incstack = 0
  1525                           ;RetardoLCD@a stored from wreg
  1526  000C40  6E02               	movwf	RetardoLCD@a^0,c
  1527                           
  1528                           ;LibLCDXC8.h: 275: switch(a){
  1529  000C42  D01B               	goto	l908
  1530  000C44                     l898:
  1531  000C44  0E05               	movlw	5
  1532  000C46  6E01               	movwf	??_RetardoLCD^0,c
  1533  000C48  0EDE               	movlw	222
  1534  000C4A                     u287:
  1535  000C4A  2EE8               	decfsz	wreg,f,c
  1536  000C4C  D7FE               	bra	u287
  1537  000C4E  2E01               	decfsz	??_RetardoLCD^0,f,c
  1538  000C50  D7FC               	bra	u287
  1539                           
  1540                           ;LibLCDXC8.h: 278: break;
  1541  000C52  0012               	return	
  1542  000C54                     l900:
  1543  000C54  0E53               	movlw	83
  1544  000C56                     u297:
  1545  000C56  2EE8               	decfsz	wreg,f,c
  1546  000C58  D7FE               	bra	u297
  1547  000C5A  F000               	nop	
  1548                           
  1549                           ;LibLCDXC8.h: 280: _delay((unsigned long)((640)*(1000000/4000000.0)));
  1550  000C5C  0E35               	movlw	53
  1551  000C5E                     u307:
  1552  000C5E  2EE8               	decfsz	wreg,f,c
  1553  000C60  D7FE               	bra	u307
  1554  000C62  F000               	nop	
  1555                           
  1556                           ;LibLCDXC8.h: 282: break;
  1557  000C64  0012               	return	
  1558  000C66                     l902:
  1559  000C66  0E08               	movlw	8
  1560  000C68                     u317:
  1561  000C68  2EE8               	decfsz	wreg,f,c
  1562  000C6A  D7FE               	bra	u317
  1563  000C6C  F000               	nop	
  1564                           
  1565                           ;LibLCDXC8.h: 285: break;
  1566  000C6E  0012               	return	
  1567  000C70                     l904:
  1568  000C70  0E03               	movlw	3
  1569  000C72                     u327:
  1570  000C72  2EE8               	decfsz	wreg,f,c
  1571  000C74  D7FE               	bra	u327
  1572  000C76  F000               	nop	
  1573                           
  1574                           ;LibLCDXC8.h: 288: break;
  1575  000C78  0012               	return	
  1576  000C7A                     l908:
  1577  000C7A  5002               	movf	RetardoLCD@a^0,w,c
  1578                           
  1579                           ; Switch size 1, requested type "simple"
  1580                           ; Number of cases is 4, Range of values is 1 to 4
  1581                           ; switch strategies available:
  1582                           ; Name         Instructions Cycles
  1583                           ; simple_byte           13     7 (average)
  1584                           ;	Chosen strategy is simple_byte
  1585  000C7C  0A01               	xorlw	1	; case 1
  1586  000C7E  B4D8               	btfsc	status,2,c
  1587  000C80  D7E1               	goto	l898
  1588  000C82  0A03               	xorlw	3	; case 2
  1589  000C84  B4D8               	btfsc	status,2,c
  1590  000C86  D7E6               	goto	l900
  1591  000C88  0A01               	xorlw	1	; case 3
  1592  000C8A  B4D8               	btfsc	status,2,c
  1593  000C8C  D7EC               	goto	l902
  1594  000C8E  0A07               	xorlw	7	; case 4
  1595  000C90  A4D8               	btfss	status,2,c
  1596  000C92  0012               	return	
  1597  000C94  D7ED               	goto	l904
  1598  000C96                     __end_of_RetardoLCD:
  1599                           	callstack 0
  1600                           
  1601 ;; *************** function _HabilitaLCD *****************
  1602 ;; Defined at:
  1603 ;;		line 105 in file "LibLCDXC8.h"
  1604 ;; Parameters:    Size  Location     Type
  1605 ;;		None
  1606 ;; Auto vars:     Size  Location     Type
  1607 ;;		None
  1608 ;; Return value:  Size  Location     Type
  1609 ;;                  1    wreg      void 
  1610 ;; Registers used:
  1611 ;;		wreg
  1612 ;; Tracked objects:
  1613 ;;		On entry : 0/0
  1614 ;;		On exit  : 0/0
  1615 ;;		Unchanged: 0/0
  1616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1617 ;;      Params:         0       0       0       0       0       0       0       0       0
  1618 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1619 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1620 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1621 ;;Total ram usage:        0 bytes
  1622 ;; Hardware stack levels used: 1
  1623 ;; This function calls:
  1624 ;;		Nothing
  1625 ;; This function is called by:
  1626 ;;		_EnviaDato
  1627 ;;		_InicializaLCD
  1628 ;;		_BorraLCD
  1629 ;;		_EscribeLCD_c
  1630 ;;		_DireccionaLCD
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634                           	psect	text11
  1635  000E32                     __ptext11:
  1636                           	callstack 0
  1637  000E32                     _HabilitaLCD:
  1638                           	callstack 28
  1639                           
  1640                           ;LibLCDXC8.h: 107: LATD3=1;
  1641                           
  1642                           ;incstack = 0
  1643  000E32  868C               	bsf	3980,3,c	;volatile
  1644                           
  1645                           ;LibLCDXC8.h: 108: _delay((unsigned long)((40)*(1000000/4000000.0)));
  1646  000E34  0E03               	movlw	3
  1647  000E36                     u337:
  1648  000E36  2EE8               	decfsz	wreg,f,c
  1649  000E38  D7FE               	bra	u337
  1650  000E3A  F000               	nop	
  1651                           
  1652                           ;LibLCDXC8.h: 110: LATD3=0;
  1653  000E3C  968C               	bcf	3980,3,c	;volatile
  1654  000E3E  0012               	return		;funcret
  1655  000E40                     __end_of_HabilitaLCD:
  1656                           	callstack 0
  1657                           
  1658 ;; *************** function _Conversion *****************
  1659 ;; Defined at:
  1660 ;;		line 33 in file "PruebaADC.c"
  1661 ;; Parameters:    Size  Location     Type
  1662 ;;  canal           1    wreg     unsigned char 
  1663 ;; Auto vars:     Size  Location     Type
  1664 ;;  canal           1    3[COMRAM] unsigned char 
  1665 ;; Return value:  Size  Location     Type
  1666 ;;                  2    0[COMRAM] unsigned int 
  1667 ;; Registers used:
  1668 ;;		wreg, status,2, status,0
  1669 ;; Tracked objects:
  1670 ;;		On entry : 0/0
  1671 ;;		On exit  : 0/0
  1672 ;;		Unchanged: 0/0
  1673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1674 ;;      Params:         2       0       0       0       0       0       0       0       0
  1675 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1676 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1677 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1678 ;;Total ram usage:        4 bytes
  1679 ;; Hardware stack levels used: 1
  1680 ;; This function calls:
  1681 ;;		Nothing
  1682 ;; This function is called by:
  1683 ;;		_main
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687                           	psect	text12
  1688  000D98                     __ptext12:
  1689                           	callstack 0
  1690  000D98                     _Conversion:
  1691                           	callstack 30
  1692                           
  1693                           ;incstack = 0
  1694                           ;Conversion@canal stored from wreg
  1695  000D98  6E04               	movwf	Conversion@canal^0,c
  1696                           
  1697                           ;PruebaADC.c: 34: ADCON0=(ADCON0 & 0b00000011) | (canal<<2);
  1698  000D9A  C004  F003         	movff	Conversion@canal,??_Conversion
  1699  000D9E  90D8               	bcf	status,0,c
  1700  000DA0  3603               	rlcf	??_Conversion^0,f,c
  1701  000DA2  90D8               	bcf	status,0,c
  1702  000DA4  3603               	rlcf	??_Conversion^0,f,c
  1703  000DA6  50C2               	movf	194,w,c	;volatile
  1704  000DA8  0B03               	andlw	3
  1705  000DAA  1003               	iorwf	??_Conversion^0,w,c
  1706  000DAC  6EC2               	movwf	194,c	;volatile
  1707                           
  1708                           ;PruebaADC.c: 35: GO=1;
  1709  000DAE  82C2               	bsf	4034,1,c	;volatile
  1710  000DB0                     l139:
  1711  000DB0  B2C2               	btfsc	4034,1,c	;volatile
  1712  000DB2  D7FE               	goto	l139
  1713                           
  1714                           ;PruebaADC.c: 37: return ADRES;
  1715  000DB4  CFC3 F001          	movff	4035,?_Conversion	;volatile
  1716  000DB8  CFC4 F002          	movff	4036,?_Conversion+1	;volatile
  1717  000DBC  0012               	return		;funcret
  1718  000DBE                     __end_of_Conversion:
  1719                           	callstack 0
  1720                           
  1721 ;; *************** function _ConfiguraLCD *****************
  1722 ;; Defined at:
  1723 ;;		line 55 in file "LibLCDXC8.h"
  1724 ;; Parameters:    Size  Location     Type
  1725 ;;  a               1    wreg     unsigned char 
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;  a               1    0[COMRAM] unsigned char 
  1728 ;; Return value:  Size  Location     Type
  1729 ;;                  1    wreg      void 
  1730 ;; Registers used:
  1731 ;;		wreg, status,2, status,0
  1732 ;; Tracked objects:
  1733 ;;		On entry : 0/0
  1734 ;;		On exit  : 0/0
  1735 ;;		Unchanged: 0/0
  1736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1737 ;;      Params:         0       0       0       0       0       0       0       0       0
  1738 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1739 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1740 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1741 ;;Total ram usage:        1 bytes
  1742 ;; Hardware stack levels used: 1
  1743 ;; This function calls:
  1744 ;;		Nothing
  1745 ;; This function is called by:
  1746 ;;		_main
  1747 ;; This function uses a non-reentrant model
  1748 ;;
  1749                           
  1750                           	psect	text13
  1751  000DDA                     __ptext13:
  1752                           	callstack 0
  1753  000DDA                     _ConfiguraLCD:
  1754                           	callstack 30
  1755                           
  1756                           ;incstack = 0
  1757                           ;ConfiguraLCD@a stored from wreg
  1758  000DDA  6E01               	movwf	ConfiguraLCD@a^0,c
  1759                           
  1760                           ;LibLCDXC8.h: 56: if(a==4 | a ==8)
  1761  000DDC  0E04               	movlw	4
  1762  000DDE  1801               	xorwf	ConfiguraLCD@a^0,w,c
  1763  000DE0  B4D8               	btfsc	status,2,c
  1764  000DE2  D004               	goto	u100
  1765  000DE4  0E08               	movlw	8
  1766  000DE6  1801               	xorwf	ConfiguraLCD@a^0,w,c
  1767  000DE8  A4D8               	btfss	status,2,c
  1768  000DEA  0012               	return	
  1769  000DEC                     u100:
  1770                           
  1771                           ;LibLCDXC8.h: 57: interfaz=a;
  1772  000DEC  C001  F01C         	movff	ConfiguraLCD@a,_interfaz
  1773  000DF0  0012               	return		;funcret
  1774  000DF2                     __end_of_ConfiguraLCD:
  1775                           	callstack 0
  1776                           
  1777                           	psect	rparam
  1778  0000                     
  1779                           	psect	idloc
  1780                           
  1781                           ;Config register IDLOC0 @ 0x200000
  1782                           ;	unspecified, using default values
  1783  200000                     	org	2097152
  1784  200000  FF                 	db	255
  1785                           
  1786                           ;Config register IDLOC1 @ 0x200001
  1787                           ;	unspecified, using default values
  1788  200001                     	org	2097153
  1789  200001  FF                 	db	255
  1790                           
  1791                           ;Config register IDLOC2 @ 0x200002
  1792                           ;	unspecified, using default values
  1793  200002                     	org	2097154
  1794  200002  FF                 	db	255
  1795                           
  1796                           ;Config register IDLOC3 @ 0x200003
  1797                           ;	unspecified, using default values
  1798  200003                     	org	2097155
  1799  200003  FF                 	db	255
  1800                           
  1801                           ;Config register IDLOC4 @ 0x200004
  1802                           ;	unspecified, using default values
  1803  200004                     	org	2097156
  1804  200004  FF                 	db	255
  1805                           
  1806                           ;Config register IDLOC5 @ 0x200005
  1807                           ;	unspecified, using default values
  1808  200005                     	org	2097157
  1809  200005  FF                 	db	255
  1810                           
  1811                           ;Config register IDLOC6 @ 0x200006
  1812                           ;	unspecified, using default values
  1813  200006                     	org	2097158
  1814  200006  FF                 	db	255
  1815                           
  1816                           ;Config register IDLOC7 @ 0x200007
  1817                           ;	unspecified, using default values
  1818  200007                     	org	2097159
  1819  200007  FF                 	db	255
  1820                           
  1821                           	psect	config
  1822                           
  1823                           ;Config register CONFIG1L @ 0x300000
  1824                           ;	unspecified, using default values
  1825                           ;	PLL Prescaler Selection bits
  1826                           ;	PLLDIV = 0x0, unprogrammed default
  1827                           ;	System Clock Postscaler Selection bits
  1828                           ;	CPUDIV = 0x0, unprogrammed default
  1829                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1830                           ;	USBDIV = 0x0, unprogrammed default
  1831  300000                     	org	3145728
  1832  300000  00                 	db	0
  1833                           
  1834                           ;Config register CONFIG1H @ 0x300001
  1835                           ;	Oscillator Selection bits
  1836                           ;	FOSC = INTOSC_EC, Internal oscillator, CLKO function on RA6, EC used by USB (INTCKO)
  1837                           ;	Fail-Safe Clock Monitor Enable bit
  1838                           ;	FCMEN = 0x0, unprogrammed default
  1839                           ;	Internal/External Oscillator Switchover bit
  1840                           ;	IESO = 0x0, unprogrammed default
  1841  300001                     	org	3145729
  1842  300001  09                 	db	9
  1843                           
  1844                           ;Config register CONFIG2L @ 0x300002
  1845                           ;	unspecified, using default values
  1846                           ;	Power-up Timer Enable bit
  1847                           ;	PWRT = 0x1, unprogrammed default
  1848                           ;	Brown-out Reset Enable bits
  1849                           ;	BOR = 0x3, unprogrammed default
  1850                           ;	Brown-out Reset Voltage bits
  1851                           ;	BORV = 0x3, unprogrammed default
  1852                           ;	USB Voltage Regulator Enable bit
  1853                           ;	VREGEN = 0x0, unprogrammed default
  1854  300002                     	org	3145730
  1855  300002  1F                 	db	31
  1856                           
  1857                           ;Config register CONFIG2H @ 0x300003
  1858                           ;	Watchdog Timer Enable bit
  1859                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1860                           ;	Watchdog Timer Postscale Select bits
  1861                           ;	WDTPS = 0xF, unprogrammed default
  1862  300003                     	org	3145731
  1863  300003  1E                 	db	30
  1864                           
  1865                           ; Padding undefined space
  1866  300004                     	org	3145732
  1867  300004  FF                 	db	255
  1868                           
  1869                           ;Config register CONFIG3H @ 0x300005
  1870                           ;	unspecified, using default values
  1871                           ;	CCP2 MUX bit
  1872                           ;	CCP2MX = 0x1, unprogrammed default
  1873                           ;	PORTB A/D Enable bit
  1874                           ;	PBADEN = 0x1, unprogrammed default
  1875                           ;	Low-Power Timer 1 Oscillator Enable bit
  1876                           ;	LPT1OSC = 0x0, unprogrammed default
  1877                           ;	MCLR Pin Enable bit
  1878                           ;	MCLRE = 0x1, unprogrammed default
  1879  300005                     	org	3145733
  1880  300005  83                 	db	131
  1881                           
  1882                           ;Config register CONFIG4L @ 0x300006
  1883                           ;	unspecified, using default values
  1884                           ;	Stack Full/Underflow Reset Enable bit
  1885                           ;	STVREN = 0x1, unprogrammed default
  1886                           ;	Single-Supply ICSP Enable bit
  1887                           ;	LVP = 0x1, unprogrammed default
  1888                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1889                           ;	ICPRT = 0x0, unprogrammed default
  1890                           ;	Extended Instruction Set Enable bit
  1891                           ;	XINST = 0x0, unprogrammed default
  1892                           ;	Background Debugger Enable bit
  1893                           ;	DEBUG = 0x1, unprogrammed default
  1894  300006                     	org	3145734
  1895  300006  85                 	db	133
  1896                           
  1897                           ; Padding undefined space
  1898  300007                     	org	3145735
  1899  300007  FF                 	db	255
  1900                           
  1901                           ;Config register CONFIG5L @ 0x300008
  1902                           ;	unspecified, using default values
  1903                           ;	Code Protection bit
  1904                           ;	CP0 = 0x1, unprogrammed default
  1905                           ;	Code Protection bit
  1906                           ;	CP1 = 0x1, unprogrammed default
  1907                           ;	Code Protection bit
  1908                           ;	CP2 = 0x1, unprogrammed default
  1909                           ;	Code Protection bit
  1910                           ;	CP3 = 0x1, unprogrammed default
  1911  300008                     	org	3145736
  1912  300008  0F                 	db	15
  1913                           
  1914                           ;Config register CONFIG5H @ 0x300009
  1915                           ;	unspecified, using default values
  1916                           ;	Boot Block Code Protection bit
  1917                           ;	CPB = 0x1, unprogrammed default
  1918                           ;	Data EEPROM Code Protection bit
  1919                           ;	CPD = 0x1, unprogrammed default
  1920  300009                     	org	3145737
  1921  300009  C0                 	db	192
  1922                           
  1923                           ;Config register CONFIG6L @ 0x30000A
  1924                           ;	unspecified, using default values
  1925                           ;	Write Protection bit
  1926                           ;	WRT0 = 0x1, unprogrammed default
  1927                           ;	Write Protection bit
  1928                           ;	WRT1 = 0x1, unprogrammed default
  1929                           ;	Write Protection bit
  1930                           ;	WRT2 = 0x1, unprogrammed default
  1931                           ;	Write Protection bit
  1932                           ;	WRT3 = 0x1, unprogrammed default
  1933  30000A                     	org	3145738
  1934  30000A  0F                 	db	15
  1935                           
  1936                           ;Config register CONFIG6H @ 0x30000B
  1937                           ;	unspecified, using default values
  1938                           ;	Configuration Register Write Protection bit
  1939                           ;	WRTC = 0x1, unprogrammed default
  1940                           ;	Boot Block Write Protection bit
  1941                           ;	WRTB = 0x1, unprogrammed default
  1942                           ;	Data EEPROM Write Protection bit
  1943                           ;	WRTD = 0x1, unprogrammed default
  1944  30000B                     	org	3145739
  1945  30000B  E0                 	db	224
  1946                           
  1947                           ;Config register CONFIG7L @ 0x30000C
  1948                           ;	unspecified, using default values
  1949                           ;	Table Read Protection bit
  1950                           ;	EBTR0 = 0x1, unprogrammed default
  1951                           ;	Table Read Protection bit
  1952                           ;	EBTR1 = 0x1, unprogrammed default
  1953                           ;	Table Read Protection bit
  1954                           ;	EBTR2 = 0x1, unprogrammed default
  1955                           ;	Table Read Protection bit
  1956                           ;	EBTR3 = 0x1, unprogrammed default
  1957  30000C                     	org	3145740
  1958  30000C  0F                 	db	15
  1959                           
  1960                           ;Config register CONFIG7H @ 0x30000D
  1961                           ;	unspecified, using default values
  1962                           ;	Boot Block Table Read Protection bit
  1963                           ;	EBTRB = 0x1, unprogrammed default
  1964  30000D                     	org	3145741
  1965  30000D  40                 	db	64
  1966                           tosu	equ	0xFFF
  1967                           tosh	equ	0xFFE
  1968                           tosl	equ	0xFFD
  1969                           stkptr	equ	0xFFC
  1970                           pclatu	equ	0xFFB
  1971                           pclath	equ	0xFFA
  1972                           pcl	equ	0xFF9
  1973                           tblptru	equ	0xFF8
  1974                           tblptrh	equ	0xFF7
  1975                           tblptrl	equ	0xFF6
  1976                           tablat	equ	0xFF5
  1977                           prodh	equ	0xFF4
  1978                           prodl	equ	0xFF3
  1979                           indf0	equ	0xFEF
  1980                           postinc0	equ	0xFEE
  1981                           postdec0	equ	0xFED
  1982                           preinc0	equ	0xFEC
  1983                           plusw0	equ	0xFEB
  1984                           fsr0h	equ	0xFEA
  1985                           fsr0l	equ	0xFE9
  1986                           wreg	equ	0xFE8
  1987                           indf1	equ	0xFE7
  1988                           postinc1	equ	0xFE6
  1989                           postdec1	equ	0xFE5
  1990                           preinc1	equ	0xFE4
  1991                           plusw1	equ	0xFE3
  1992                           fsr1h	equ	0xFE2
  1993                           fsr1l	equ	0xFE1
  1994                           bsr	equ	0xFE0
  1995                           indf2	equ	0xFDF
  1996                           postinc2	equ	0xFDE
  1997                           postdec2	equ	0xFDD
  1998                           preinc2	equ	0xFDC
  1999                           plusw2	equ	0xFDB
  2000                           fsr2h	equ	0xFDA
  2001                           fsr2l	equ	0xFD9
  2002                           status	equ	0xFD8

Data Sizes:
    Strings     22
    Constant    0
    Data        1
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     27      28
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    MensajeLCD_Var@a	PTR unsigned char  size(1) Largest target is 11
		 -> STR_2(CODE[11]), STR_1(CODE[11]), 


Critical Paths under _main in COMRAM

    _main->_EscribeLCD_n16
    _MensajeLCD_Var->_EscribeLCD_c
    _InicializaLCD->_EnviaDato
    _BorraLCD->_EnviaDato
    _EscribeLCD_n16->___lwdiv
    ___lwdiv->___lwmod
    _EscribeLCD_c->_EnviaDato
    _DireccionaLCD->_EnviaDato
    _EnviaDato->_RetardoLCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    5752
                                             21 COMRAM     6     6      0
                           _BorraLCD
                       _ConfiguraLCD
                         _Conversion
                      _DireccionaLCD
                     _EscribeLCD_n16
                      _InicializaLCD
                     _MensajeLCD_Var
 ---------------------------------------------------------------------------------
 (1) _MensajeLCD_Var                                       1     0      1     287
                                              5 COMRAM     1     0      1
                       _EscribeLCD_c
 ---------------------------------------------------------------------------------
 (1) _InicializaLCD                                        0     0      0     150
                           _BorraLCD
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (2) _BorraLCD                                             0     0      0      75
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (1) _EscribeLCD_n16                                       9     6      3    5037
                                             12 COMRAM     9     6      3
                       _EscribeLCD_c
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4    2287
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4    1682
                                              5 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _EscribeLCD_c                                         1     1      0      90
                                              4 COMRAM     1     1      0
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (1) _DireccionaLCD                                        1     1      0      90
                                              4 COMRAM     1     1      0
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (3) _EnviaDato                                            2     2      0      60
                                              2 COMRAM     2     2      0
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (3) _RetardoLCD                                           2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _HabilitaLCD                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Conversion                                           4     2      2      22
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ConfiguraLCD                                         1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BorraLCD
     _EnviaDato
       _HabilitaLCD
       _RetardoLCD
     _HabilitaLCD
     _RetardoLCD
   _ConfiguraLCD
   _Conversion
   _DireccionaLCD
     _EnviaDato
     _HabilitaLCD
     _RetardoLCD
   _EscribeLCD_n16
     _EscribeLCD_c
       _EnviaDato
       _HabilitaLCD
       _RetardoLCD
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
   _InicializaLCD
     _BorraLCD
     _EnviaDato
     _HabilitaLCD
     _RetardoLCD
   _MensajeLCD_Var
     _EscribeLCD_c

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     1B      1C       1       29.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1C      20        0.0%
DATA                 0      0      1C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sat Jan 15 23:29:16 2022

                     _GO 007E11               EnviaDato@a 0004            _InicializaLCD 0BA4  
                    l139 0DB0                      l624 0CDE                      l634 0D66  
                    l900 0C54                      l902 0C66                      l904 0C70  
                    l920 0D20                      l908 0C7A                      l898 0C44  
                    l988 0BB6                      l998 0BD4                      u100 0DEC  
                    u210 0D48                      u307 0C5E                      u180 0CB8  
                    u317 0C68                      u327 0C72                      u337 0E36  
                    u257 0B0A                      u267 0B40                      u277 0B98  
                    u287 0C4A                      u297 0C56                      wreg 000FE8  
                   l1110 0CB4                     l1120 0CD4                     l1008 0BF2  
                   l1130 0D44                     l1108 0CAC                     l1028 0C2A  
                   l1150 09E8                     l1142 081C                     l1136 0D5C  
                   l1128 0D3C                     l1144 083E                     l1146 0894  
                   l1154 0ACA                     l1162 0D84                     l1148 0922  
                   l1158 0D72                     l1184 0B4C                     STR_1 080C  
                   STR_2 0801                     _LATD 000F8C           ??_EscribeLCD_c 0005  
                   _main 0AEC                     start 0000             ___param_bank 000000  
         ?_InicializaLCD 0001                    ?_main 0001                    _ADRES 000FC3  
          EscribeLCD_c@a 0005                    _LATD2 007C62                    _LATD3 007C63  
        __end_of___lwdiv 0CE8          __end_of___lwmod 0D70                    _TRISD 000F95  
   EscribeLCD_n16@decena 0014  __size_of_MensajeLCD_Var 0028                    tablat 000FF5  
             _Conversion 0D98              _HabilitaLCD 0E32     EscribeLCD_n16@millar 0010  
                  status 000FD8     EscribeLCD_n16@unidad 0015         __end_of_BorraLCD 0E32  
        __initialization 0DBE             __end_of_main 0BA4                   ??_main 0016  
   __end_of_ConfiguraLCD 0DF2            __activetblptr 000002                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   _ADCON2 000FC0           DireccionaLCD@a 0005  
     __size_of_EnviaDato 0046    __end_of_DireccionaLCD 0E1E               _RetardoLCD 0C40  
       ??_EscribeLCD_n16 0010                ??___lwdiv 000A                ??___lwmod 0005  
        ??_InicializaLCD 0005                   isa$std 000001     __end_of_EscribeLCD_c 0E08  
  EscribeLCD_n16@centena 0012             __pdataCOMRAM 001C             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
            ?_Conversion 0001               __accesstop 0060  __end_of__initialization 0DD0  
          ___rparam_used 000001           __pcstackCOMRAM 0001        __end_of_EnviaDato 0D2E  
              ?_BorraLCD 0001           _MensajeLCD_Var 0D70          MensajeLCD_Var@a 0006  
            ?_RetardoLCD 0001              RetardoLCD@a 0002    __size_of_ConfiguraLCD 0018  
        EscribeLCD_n16@a 000D          EscribeLCD_n16@b 000F      __size_of_Conversion 0026  
 __end_of_MensajeLCD_Var 0D98               ??_BorraLCD 0005             ?_HabilitaLCD 0001  
           _ConfiguraLCD 0DDA                  __Hparam 0000                  __Lparam 0000  
  __size_of_EscribeLCD_c 0016                  ___lwdiv 0C96                  ___lwmod 0D2E  
           __psmallconst 0800                  __pcinit 0DBE                  __ramtop 0800  
                __ptext0 0AEC                  __ptext1 0D70                  __ptext2 0BA4  
                __ptext3 0E1E                  __ptext4 0818                  __ptext5 0D2E  
                __ptext6 0C96                  __ptext7 0DF2                  __ptext8 0E08  
                __ptext9 0CE8      __size_of_RetardoLCD 0056          ?_MensajeLCD_Var 0006  
   end_of_initialization 0DD0          Conversion@canal 0004           main@resultado1 0018  
         main@resultado2 001A            __Lmediumconst 0000             _EscribeLCD_c 0DF2  
           ??_Conversion 0003            __pidataCOMRAM 0E40    __end_of_InicializaLCD 0C40  
     __end_of_Conversion 0DBE                _EnviaDato 0CE8   __size_of_DireccionaLCD 0016  
    start_initialization 0DBE        __size_of_BorraLCD 0014             ??_RetardoLCD 0001  
   __size_of_HabilitaLCD 000E  __size_of_EscribeLCD_n16 02D4               ?_EnviaDato 0001  
     __end_of_RetardoLCD 0C96            _DireccionaLCD 0E08         ___lwdiv@dividend 0006  
               ?___lwdiv 0006                 ?___lwmod 0001         ??_MensajeLCD_Var 0007  
            __smallconst 0800         ___lwdiv@quotient 000A           ?_DireccionaLCD 0001  
            ??_EnviaDato 0003                 _BorraLCD 0E1E                 __Hrparam 0000  
               __Lrparam 0000         __size_of___lwdiv 0052         __size_of___lwmod 0042  
         _EscribeLCD_n16 0818            ConfiguraLCD@a 0001          ___lwdiv@divisor 0008  
        ___lwdiv@counter 000C                 __ptext10 0C40                 __ptext11 0E32  
               __ptext12 0D98                 __ptext13 0DDA          ??_DireccionaLCD 0005  
          __size_of_main 00B8                 _interfaz 001C                 isa$xinst 000000  
 __end_of_EscribeLCD_n16 0AEC            ??_HabilitaLCD 0001         ___lwmod@dividend 0001  
          ?_ConfiguraLCD 0001   __size_of_InicializaLCD 009C          ?_EscribeLCD_n16 000D  
        ___lwmod@divisor 0003          ___lwmod@counter 0005           ??_ConfiguraLCD 0001  
          ?_EscribeLCD_c 0001      __end_of_HabilitaLCD 0E40  
