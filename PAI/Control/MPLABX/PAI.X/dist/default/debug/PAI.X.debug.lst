

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Mon Apr 17 20:08:38 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    51                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    52   000000                     
    53                           ; Generated 09/02/2023 GMT
    54                           ; 
    55                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution. Publication is not required when
    69                           ;        this file is used in an embedded application.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC18F4550 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87   000000                     
    88                           	psect	idataCOMRAM
    89   002970                     __pidataCOMRAM:
    90                           	callstack 0
    91                           
    92                           ;initializer for _operacion
    93   002970  20                 	db	32
    94   002971  20                 	db	32
    95   002972  20                 	db	32
    96   002973  20                 	db	32
    97   002974  00                 	db	0
    98                           
    99                           ;initializer for _interfaz
   100   002975  08                 	db	8
   101                           
   102                           ;initializer for _pacman2
   103   002976  06                 	db	6
   104   002977  09                 	db	9
   105   002978  11                 	db	17
   106   002979  17                 	db	23
   107   00297A  11                 	db	17
   108   00297B  09                 	db	9
   109   00297C  06                 	db	6
   110   00297D  00                 	db	0
   111                           
   112                           ;initializer for _pacman
   113   00297E  06                 	db	6
   114   00297F  09                 	db	9
   115   002980  12                 	db	18
   116   002981  14                 	db	20
   117   002982  12                 	db	18
   118   002983  09                 	db	9
   119   002984  06                 	db	6
   120   002985  00                 	db	0
   121                           
   122                           	psect	idataBANK0
   123   0029C6                     __pidataBANK0:
   124                           	callstack 0
   125                           
   126                           ;initializer for _barco
   127   0029C6  04                 	db	4
   128   0029C7  06                 	db	6
   129   0029C8  07                 	db	7
   130   0029C9  06                 	db	6
   131   0029CA  04                 	db	4
   132   0029CB  1F                 	db	31
   133   0029CC  0E                 	db	14
   134   0029CD  00                 	db	0
   135                           
   136                           ;initializer for _cereza
   137   0029CE  06                 	db	6
   138   0029CF  04                 	db	4
   139   0029D0  0E                 	db	14
   140   0029D1  1F                 	db	31
   141   0029D2  1F                 	db	31
   142   0029D3  17                 	db	23
   143   0029D4  0E                 	db	14
   144   0029D5  00                 	db	0
   145   000000                     _LATD0	set	31840
   146   000000                     _RB7	set	31759
   147   000000                     _RB6	set	31758
   148   000000                     _RB5	set	31757
   149   000000                     _RB4	set	31756
   150   000000                     _PEIE	set	32662
   151   000000                     _GIE	set	32663
   152   000000                     _TMR0IE	set	32661
   153   000000                     _TMR0IF	set	32658
   154   000000                     _RBIE	set	32659
   155   000000                     _LATD3	set	31843
   156   000000                     _LATD2	set	31842
   157   000000                     _PORTB	set	3969
   158   000000                     _LATB	set	3978
   159   000000                     _LATD	set	3980
   160   000000                     _RA0	set	31744
   161   000000                     _TRISB	set	3987
   162   000000                     _TRISD	set	3989
   163   000000                     _ADCON1	set	4033
   164   000000                     _TRISA0	set	31888
   165   000000                     _T1CON	set	4045
   166   000000                     _TMR1IE	set	31976
   167   000000                     _TMR1IF	set	31984
   168   000000                     _TMR1	set	4046
   169   000000                     _T0CON	set	4053
   170   000000                     _POR	set	32385
   171   000000                     _TMR0	set	4054
   172   000000                     _RBPU	set	32655
   173   000000                     _RBIF	set	32656
   174                           
   175                           	psect	smallconst
   176   000800                     __psmallconst:
   177                           	callstack 0
   178   000800  00                 	db	0
   179   000801                     STR_3:
   180   000801  49                 	db	73	;'I'
   181   000802  6E                 	db	110	;'n'
   182   000803  64                 	db	100	;'d'
   183   000804  65                 	db	101	;'e'
   184   000805  74                 	db	116	;'t'
   185   000806  65                 	db	101	;'e'
   186   000807  72                 	db	114	;'r'
   187   000808  6D                 	db	109	;'m'
   188   000809  69                 	db	105	;'i'
   189   00080A  6E                 	db	110	;'n'
   190   00080B  61                 	db	97	;'a'
   191   00080C  64                 	db	100	;'d'
   192   00080D  6F                 	db	111	;'o'
   193   00080E  00                 	db	0
   194   00080F                     STR_2:
   195   00080F  52                 	db	82	;'R'
   196   000810  65                 	db	101	;'e'
   197   000811  73                 	db	115	;'s'
   198   000812  65                 	db	101	;'e'
   199   000813  74                 	db	116	;'t'
   200   000814  20                 	db	32
   201   000815  4D                 	db	77	;'M'
   202   000816  43                 	db	67	;'C'
   203   000817  4C                 	db	76	;'L'
   204   000818  52                 	db	82	;'R'
   205   000819  45                 	db	69	;'E'
   206   00081A  00                 	db	0
   207   00081B                     STR_1:
   208   00081B  52                 	db	82	;'R'
   209   00081C  65                 	db	101	;'e'
   210   00081D  73                 	db	115	;'s'
   211   00081E  65                 	db	101	;'e'
   212   00081F  74                 	db	116	;'t'
   213   000820  20                 	db	32
   214   000821  50                 	db	80	;'P'
   215   000822  4F                 	db	79	;'O'
   216   000823  52                 	db	82	;'R'
   217   000824  00                 	db	0
   218   000825                     STR_4:
   219   000825  49                 	db	73	;'I'
   220   000826  6E                 	db	110	;'n'
   221   000827  66                 	db	102	;'f'
   222   000828  69                 	db	105	;'i'
   223   000829  6E                 	db	110	;'n'
   224   00082A  69                 	db	105	;'i'
   225   00082B  74                 	db	116	;'t'
   226   00082C  6F                 	db	111	;'o'
   227   00082D  00                 	db	0
   228   00082E  00                 	db	0	; dummy byte at the end
   229   000000                     
   230                           ; #config settings
   231                           
   232                           	psect	cinit
   233   00267A                     __pcinit:
   234                           	callstack 0
   235   00267A                     start_initialization:
   236                           	callstack 0
   237   00267A                     __initialization:
   238                           	callstack 0
   239                           
   240                           ; Initialize objects allocated to BANK0 (16 bytes)
   241                           ; load TBLPTR registers with __pidataBANK0
   242   00267A  0EC6               	movlw	low __pidataBANK0
   243   00267C  6EF6               	movwf	tblptrl,c
   244   00267E  0E29               	movlw	high __pidataBANK0
   245   002680  6EF7               	movwf	tblptrh,c
   246   002682  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   247   002684  6EF8               	movwf	tblptru,c
   248   002686  EE00  F08B         	lfsr	0,__pdataBANK0
   249   00268A  EE10 F010          	lfsr	1,16
   250   00268E                     copy_data0:
   251   00268E  0009               	tblrd		*+
   252   002690  CFF5 FFEE          	movff	tablat,postinc0
   253   002694  50E5               	movf	postdec1,w,c
   254   002696  50E1               	movf	fsr1l,w,c
   255   002698  E1FA               	bnz	copy_data0
   256                           
   257                           ; Initialize objects allocated to COMRAM (22 bytes)
   258                           ; load TBLPTR registers with __pidataCOMRAM
   259   00269A  0E70               	movlw	low __pidataCOMRAM
   260   00269C  6EF6               	movwf	tblptrl,c
   261   00269E  0E29               	movlw	high __pidataCOMRAM
   262   0026A0  6EF7               	movwf	tblptrh,c
   263   0026A2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   264   0026A4  6EF8               	movwf	tblptru,c
   265   0026A6  EE00  F03D         	lfsr	0,__pdataCOMRAM
   266   0026AA  EE10 F016          	lfsr	1,22
   267   0026AE                     copy_data1:
   268   0026AE  0009               	tblrd		*+
   269   0026B0  CFF5 FFEE          	movff	tablat,postinc0
   270   0026B4  50E5               	movf	postdec1,w,c
   271   0026B6  50E1               	movf	fsr1l,w,c
   272   0026B8  E1FA               	bnz	copy_data1
   273                           
   274                           ; Clear objects allocated to COMRAM (7 bytes)
   275   0026BA  EE00  F053         	lfsr	0,__pbssCOMRAM
   276   0026BE  0E07               	movlw	7
   277   0026C0                     clear_0:
   278   0026C0  6AEE               	clrf	postinc0,c
   279   0026C2  06E8               	decf	wreg,f,c
   280   0026C4  E1FD               	bnz	clear_0
   281   0026C6                     end_of_initialization:
   282                           	callstack 0
   283   0026C6                     __end_of__initialization:
   284                           	callstack 0
   285   0026C6  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   286   0026C8  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   287   0026CA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   288   0026CC  6EF8               	movwf	tblptru,c
   289   0026CE  0100               	movlb	0
   290   0026D0  EFE2  F00D         	goto	_main	;jump to C main() function
   291                           
   292                           	psect	bssCOMRAM
   293   000053                     __pbssCOMRAM:
   294                           	callstack 0
   295   000053                     _reset:
   296                           	callstack 0
   297   000053                     	ds	1
   298   000054                     _activado:
   299                           	callstack 0
   300   000054                     	ds	1
   301   000055                     _digitar:
   302                           	callstack 0
   303   000055                     	ds	1
   304   000056                     _Cambio:
   305                           	callstack 0
   306   000056                     	ds	1
   307   000057                     _limpiar:
   308                           	callstack 0
   309   000057                     	ds	1
   310   000058                     _borrar:
   311                           	callstack 0
   312   000058                     	ds	1
   313   000059                     _cont:
   314                           	callstack 0
   315   000059                     	ds	1
   316                           
   317                           	psect	dataCOMRAM
   318   00003D                     __pdataCOMRAM:
   319                           	callstack 0
   320   00003D                     _operacion:
   321                           	callstack 0
   322   00003D                     	ds	5
   323   000042                     _interfaz:
   324                           	callstack 0
   325   000042                     	ds	1
   326   000043                     _pacman2:
   327                           	callstack 0
   328   000043                     	ds	8
   329   00004B                     _pacman:
   330                           	callstack 0
   331   00004B                     	ds	8
   332                           
   333                           	psect	dataBANK0
   334   00008B                     __pdataBANK0:
   335                           	callstack 0
   336   00008B                     _barco:
   337                           	callstack 0
   338   00008B                     	ds	8
   339   000093                     _cereza:
   340                           	callstack 0
   341   000093                     	ds	8
   342                           
   343                           	psect	cstackBANK0
   344   000060                     __pcstackBANK0:
   345                           	callstack 0
   346   000060                     ??_ModuloOperacion:
   347                           
   348                           ; 1 bytes @ 0x0
   349   000060                     	ds	5
   350   000065                     ModuloOperacion@n1L:
   351                           	callstack 0
   352                           
   353                           ; 4 bytes @ 0x5
   354   000065                     	ds	4
   355   000069                     ModuloOperacion@n1:
   356                           	callstack 0
   357                           
   358                           ; 3 bytes @ 0x9
   359   000069                     	ds	3
   360   00006C                     ModuloOperacion@n2:
   361                           	callstack 0
   362                           
   363                           ; 3 bytes @ 0xC
   364   00006C                     	ds	3
   365   00006F                     ModuloOperacion@i:
   366                           	callstack 0
   367                           
   368                           ; 1 bytes @ 0xF
   369   00006F                     	ds	1
   370   000070                     ModuloOperacion@var:
   371                           	callstack 0
   372                           
   373                           ; 4 bytes @ 0x10
   374   000070                     	ds	4
   375   000074                     ModuloOperacion@var_196:
   376                           	callstack 0
   377                           
   378                           ; 4 bytes @ 0x14
   379   000074                     	ds	4
   380   000078                     ModuloOperacion@i_197:
   381                           	callstack 0
   382                           
   383                           ; 4 bytes @ 0x18
   384   000078                     	ds	4
   385   00007C                     ModuloOperacion@b:
   386                           	callstack 0
   387                           
   388                           ; 1 bytes @ 0x1C
   389   00007C                     	ds	1
   390   00007D                     ModuloOperacion@b_195:
   391                           	callstack 0
   392                           
   393                           ; 1 bytes @ 0x1D
   394   00007D                     	ds	1
   395   00007E                     ModuloOperacion@ResL:
   396                           	callstack 0
   397                           
   398                           ; 4 bytes @ 0x1E
   399   00007E                     	ds	4
   400   000082                     ModuloOperacion@ResL_194:
   401                           	callstack 0
   402                           
   403                           ; 4 bytes @ 0x22
   404   000082                     	ds	4
   405   000086                     ModuloOperacion@num2:
   406                           	callstack 0
   407                           
   408                           ; 1 bytes @ 0x26
   409   000086                     	ds	1
   410   000087                     ModuloOperacion@num1:
   411                           	callstack 0
   412                           
   413                           ; 1 bytes @ 0x27
   414   000087                     	ds	1
   415   000088                     ModuloOperacion@Res:
   416                           	callstack 0
   417                           
   418                           ; 3 bytes @ 0x28
   419   000088                     	ds	3
   420                           
   421                           	psect	cstackCOMRAM
   422   000001                     __pcstackCOMRAM:
   423                           	callstack 0
   424   000001                     ControlError@A:
   425                           	callstack 0
   426                           
   427                           ; 1 bytes @ 0x0
   428   000001                     	ds	1
   429   000002                     OpTeclado@A:
   430                           	callstack 0
   431                           
   432                           ; 1 bytes @ 0x1
   433   000002                     	ds	1
   434   000003                     OpTeclado@c:
   435                           	callstack 0
   436                           
   437                           ; 1 bytes @ 0x2
   438   000003                     	ds	1
   439   000004                     ??_ISR:
   440                           
   441                           ; 1 bytes @ 0x3
   442   000004                     	ds	2
   443   000006                     ??_RetardoLCD:
   444   000006                     ?___awmod:
   445                           	callstack 0
   446   000006                     ?___ftpack:
   447                           	callstack 0
   448   000006                     ?___lmul:
   449                           	callstack 0
   450   000006                     ?___llmod:
   451                           	callstack 0
   452   000006                     ConfiguraLCD@a:
   453                           	callstack 0
   454   000006                     ___lbmod@divisor:
   455                           	callstack 0
   456   000006                     ___awmod@dividend:
   457                           	callstack 0
   458   000006                     ___ftpack@arg:
   459                           	callstack 0
   460   000006                     ___ftge@ff1:
   461                           	callstack 0
   462   000006                     ___lmul@multiplier:
   463                           	callstack 0
   464   000006                     ___llmod@dividend:
   465                           	callstack 0
   466                           
   467                           ; 4 bytes @ 0x5
   468   000006                     	ds	1
   469   000007                     RetardoLCD@a:
   470                           	callstack 0
   471   000007                     ___lbmod@dividend:
   472                           	callstack 0
   473                           
   474                           ; 1 bytes @ 0x6
   475   000007                     	ds	1
   476   000008                     ??_EnviaDato:
   477   000008                     ___lbmod@counter:
   478                           	callstack 0
   479   000008                     ___awmod@divisor:
   480                           	callstack 0
   481                           
   482                           ; 2 bytes @ 0x7
   483   000008                     	ds	1
   484   000009                     EnviaDato@a:
   485                           	callstack 0
   486   000009                     ___ftpack@exp:
   487                           	callstack 0
   488   000009                     ___lbmod@rem:
   489                           	callstack 0
   490   000009                     ___ftge@ff2:
   491                           	callstack 0
   492                           
   493                           ; 3 bytes @ 0x8
   494   000009                     	ds	1
   495   00000A                     EscribeLCD_c@a:
   496                           	callstack 0
   497   00000A                     DireccionaLCD@a:
   498                           	callstack 0
   499   00000A                     ___awmod@counter:
   500                           	callstack 0
   501   00000A                     ___ftpack@sign:
   502                           	callstack 0
   503   00000A                     ___lbdiv@divisor:
   504                           	callstack 0
   505   00000A                     ___lmul@multiplicand:
   506                           	callstack 0
   507   00000A                     ___llmod@divisor:
   508                           	callstack 0
   509                           
   510                           ; 4 bytes @ 0x9
   511   00000A                     	ds	1
   512   00000B                     ??___ftpack:
   513   00000B                     MensajeLCD_Var@a:
   514                           	callstack 0
   515   00000B                     GuardarASCII@arreglo:
   516                           	callstack 0
   517   00000B                     ___awmod@sign:
   518                           	callstack 0
   519   00000B                     ___lbdiv@dividend:
   520                           	callstack 0
   521                           
   522                           ; 1 bytes @ 0xA
   523   00000B                     	ds	1
   524   00000C                     ??___ftge:
   525   00000C                     MensajeLCD_Var@cont:
   526                           	callstack 0
   527   00000C                     GuardarASCII@cgram:
   528                           	callstack 0
   529   00000C                     ___lbdiv@counter:
   530                           	callstack 0
   531                           
   532                           ; 1 bytes @ 0xB
   533   00000C                     	ds	1
   534   00000D                     ??_MensajeLCD_Var:
   535   00000D                     GuardarASCII@i:
   536                           	callstack 0
   537   00000D                     ___lbdiv@quotient:
   538                           	callstack 0
   539                           
   540                           ; 1 bytes @ 0xC
   541   00000D                     	ds	1
   542   00000E                     ?___ftdiv:
   543                           	callstack 0
   544   00000E                     ?___ftmul:
   545                           	callstack 0
   546   00000E                     ?___lbtoft:
   547                           	callstack 0
   548   00000E                     ___llmod@counter:
   549                           	callstack 0
   550   00000E                     ___ftdiv@f1:
   551                           	callstack 0
   552   00000E                     ___ftmul@f1:
   553                           	callstack 0
   554   00000E                     ___lmul@product:
   555                           	callstack 0
   556                           
   557                           ; 4 bytes @ 0xD
   558   00000E                     	ds	1
   559   00000F                     ?___lldiv:
   560                           	callstack 0
   561   00000F                     ___lldiv@dividend:
   562                           	callstack 0
   563                           
   564                           ; 4 bytes @ 0xE
   565   00000F                     	ds	1
   566   000010                     MensajeLCD_Var@i:
   567                           	callstack 0
   568                           
   569                           ; 2 bytes @ 0xF
   570   000010                     	ds	1
   571   000011                     ___lbtoft@c:
   572                           	callstack 0
   573   000011                     ___ftdiv@f2:
   574                           	callstack 0
   575   000011                     ___ftmul@f2:
   576                           	callstack 0
   577                           
   578                           ; 3 bytes @ 0x10
   579   000011                     	ds	2
   580   000013                     ___lldiv@divisor:
   581                           	callstack 0
   582                           
   583                           ; 4 bytes @ 0x12
   584   000013                     	ds	1
   585   000014                     ??___ftdiv:
   586   000014                     ??___ftmul:
   587                           
   588                           ; 1 bytes @ 0x13
   589   000014                     	ds	3
   590   000017                     ___ftdiv@cntr:
   591                           	callstack 0
   592   000017                     ___ftmul@exp:
   593                           	callstack 0
   594   000017                     ___lldiv@quotient:
   595                           	callstack 0
   596                           
   597                           ; 4 bytes @ 0x16
   598   000017                     	ds	1
   599   000018                     ___ftdiv@f3:
   600                           	callstack 0
   601   000018                     ___ftmul@f3_as_product:
   602                           	callstack 0
   603                           
   604                           ; 3 bytes @ 0x17
   605   000018                     	ds	3
   606   00001B                     ___lldiv@counter:
   607                           	callstack 0
   608   00001B                     ___ftdiv@exp:
   609                           	callstack 0
   610   00001B                     ___ftmul@cntr:
   611                           	callstack 0
   612                           
   613                           ; 1 bytes @ 0x1A
   614   00001B                     	ds	1
   615   00001C                     ___ftdiv@sign:
   616                           	callstack 0
   617   00001C                     ___ftmul@sign:
   618                           	callstack 0
   619   00001C                     EscribeLCD_n32@a:
   620                           	callstack 0
   621                           
   622                           ; 4 bytes @ 0x1B
   623   00001C                     	ds	1
   624   00001D                     ?___fttol:
   625                           	callstack 0
   626   00001D                     ___fttol@f1:
   627                           	callstack 0
   628                           
   629                           ; 3 bytes @ 0x1C
   630   00001D                     	ds	3
   631   000020                     EscribeLCD_n32@b:
   632                           	callstack 0
   633                           
   634                           ; 1 bytes @ 0x1F
   635   000020                     	ds	1
   636   000021                     ??___fttol:
   637   000021                     EscribeLCD_n32@cienmillon:
   638                           	callstack 0
   639                           
   640                           ; 4 bytes @ 0x20
   641   000021                     	ds	4
   642   000025                     EscribeLCD_n32@diezmillon:
   643                           	callstack 0
   644                           
   645                           ; 4 bytes @ 0x24
   646   000025                     	ds	1
   647   000026                     ___fttol@sign1:
   648                           	callstack 0
   649                           
   650                           ; 1 bytes @ 0x25
   651   000026                     	ds	1
   652   000027                     ___fttol@lval:
   653                           	callstack 0
   654                           
   655                           ; 4 bytes @ 0x26
   656   000027                     	ds	2
   657   000029                     EscribeLCD_n32@millon:
   658                           	callstack 0
   659                           
   660                           ; 4 bytes @ 0x28
   661   000029                     	ds	2
   662   00002B                     ___fttol@exp1:
   663                           	callstack 0
   664                           
   665                           ; 1 bytes @ 0x2A
   666   00002B                     	ds	1
   667   00002C                     ?_abs:
   668                           	callstack 0
   669   00002C                     EscribeLCD_n8@b:
   670                           	callstack 0
   671   00002C                     abs@a:
   672                           	callstack 0
   673                           
   674                           ; 2 bytes @ 0x2B
   675   00002C                     	ds	1
   676   00002D                     EscribeLCD_n8@centena:
   677                           	callstack 0
   678   00002D                     EscribeLCD_n32@cienmil:
   679                           	callstack 0
   680                           
   681                           ; 4 bytes @ 0x2C
   682   00002D                     	ds	1
   683   00002E                     ??_abs:
   684   00002E                     EscribeLCD_n8@decena:
   685                           	callstack 0
   686                           
   687                           ; 1 bytes @ 0x2D
   688   00002E                     	ds	1
   689   00002F                     EscribeLCD_n8@unidad:
   690                           	callstack 0
   691                           
   692                           ; 1 bytes @ 0x2E
   693   00002F                     	ds	1
   694   000030                     ?___awtoft:
   695                           	callstack 0
   696   000030                     EscribeLCD_n8@a:
   697                           	callstack 0
   698   000030                     ___awtoft@c:
   699                           	callstack 0
   700                           
   701                           ; 2 bytes @ 0x2F
   702   000030                     	ds	1
   703   000031                     EscribeLCD_2Decimales@a:
   704                           	callstack 0
   705   000031                     EscribeLCD_n32@diezmil:
   706                           	callstack 0
   707                           
   708                           ; 4 bytes @ 0x30
   709   000031                     	ds	2
   710   000033                     ___awtoft@sign:
   711                           	callstack 0
   712                           
   713                           ; 1 bytes @ 0x32
   714   000033                     	ds	1
   715   000034                     EscribeLCD_2Decimales@num:
   716                           	callstack 0
   717                           
   718                           ; 2 bytes @ 0x33
   719   000034                     	ds	1
   720   000035                     EscribeLCD_n32@millar:
   721                           	callstack 0
   722                           
   723                           ; 2 bytes @ 0x34
   724   000035                     	ds	1
   725   000036                     EscribeLCD_2Decimales@decimalesP:
   726                           	callstack 0
   727                           
   728                           ; 1 bytes @ 0x35
   729   000036                     	ds	1
   730   000037                     EscribeLCD_2Decimales@unidad:
   731                           	callstack 0
   732   000037                     EscribeLCD_n32@centena:
   733                           	callstack 0
   734                           
   735                           ; 2 bytes @ 0x36
   736   000037                     	ds	2
   737   000039                     EscribeLCD_n32@decena:
   738                           	callstack 0
   739                           
   740                           ; 1 bytes @ 0x38
   741   000039                     	ds	1
   742   00003A                     EscribeLCD_n32@unidad:
   743                           	callstack 0
   744                           
   745                           ; 1 bytes @ 0x39
   746   00003A                     	ds	1
   747   00003B                     ??_main:
   748                           
   749                           ; 1 bytes @ 0x3A
   750   00003B                     	ds	1
   751   00003C                     main@i:
   752                           	callstack 0
   753                           
   754                           ; 1 bytes @ 0x3B
   755   00003C                     	ds	1
   756                           
   757 ;;
   758 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   759 ;;
   760 ;; *************** function _main *****************
   761 ;; Defined at:
   762 ;;		line 34 in file "PAI.c"
   763 ;; Parameters:    Size  Location     Type
   764 ;;		None
   765 ;; Auto vars:     Size  Location     Type
   766 ;;  i               1   59[COMRAM] unsigned char 
   767 ;; Return value:  Size  Location     Type
   768 ;;                  1    wreg      void 
   769 ;; Registers used:
   770 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   771 ;; Tracked objects:
   772 ;;		On entry : 0/0
   773 ;;		On exit  : 0/0
   774 ;;		Unchanged: 0/0
   775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   776 ;;      Params:         0       0       0       0       0       0       0       0       0
   777 ;;      Locals:         1       0       0       0       0       0       0       0       0
   778 ;;      Temps:          1       0       0       0       0       0       0       0       0
   779 ;;      Totals:         2       0       0       0       0       0       0       0       0
   780 ;;Total ram usage:        2 bytes
   781 ;; Hardware stack levels required when called: 8
   782 ;; This function calls:
   783 ;;		_BorraLCD
   784 ;;		_ConfiguraLCD
   785 ;;		_DireccionaLCD
   786 ;;		_EscribeLCD_c
   787 ;;		_GuardarASCII
   788 ;;		_InicializaLCD
   789 ;;		_MensajeLCD_Var
   790 ;;		_ModuloOperacion
   791 ;; This function is called by:
   792 ;;		Startup code after reset
   793 ;; This function uses a non-reentrant model
   794 ;;
   795                           
   796                           	psect	text0
   797   001BC4                     __ptext0:
   798                           	callstack 0
   799   001BC4                     _main:
   800                           	callstack 23
   801                           
   802                           ;PAI.c: 35: ADCON1 = 15;
   803                           
   804                           ;incstack = 0
   805   001BC4  0E0F               	movlw	15
   806   001BC6  6EC1               	movwf	193,c	;volatile
   807                           
   808                           ;PAI.c: 36: TRISD=0;
   809   001BC8  0E00               	movlw	0
   810   001BCA  6E95               	movwf	149,c	;volatile
   811                           
   812                           ;PAI.c: 37: LATD=1;
   813   001BCC  0E01               	movlw	1
   814   001BCE  6E8C               	movwf	140,c	;volatile
   815                           
   816                           ;PAI.c: 38: TRISB=0b11110000;
   817   001BD0  0EF0               	movlw	240
   818   001BD2  6E93               	movwf	147,c	;volatile
   819                           
   820                           ;PAI.c: 39: LATB=0b00000000;
   821   001BD4  0E00               	movlw	0
   822   001BD6  6E8A               	movwf	138,c	;volatile
   823                           
   824                           ;PAI.c: 40: TRISA0=1;
   825   001BD8  8092               	bsf	3986,0,c	;volatile
   826                           
   827                           ;PAI.c: 41: T1CON=0b10100001;
   828   001BDA  0EA1               	movlw	161
   829   001BDC  6ECD               	movwf	205,c	;volatile
   830                           
   831                           ;PAI.c: 42: T0CON=0b10000101;
   832   001BDE  0E85               	movlw	133
   833   001BE0  6ED5               	movwf	213,c	;volatile
   834                           
   835                           ;PAI.c: 43: TMR1=3036;
   836   001BE2  0E0B               	movlw	11
   837   001BE4  6ECF               	movwf	207,c	;volatile
   838   001BE6  0EDC               	movlw	220
   839   001BE8  6ECE               	movwf	206,c	;volatile
   840                           
   841                           ;PAI.c: 44: TMR1IF=0;
   842   001BEA  909E               	bcf	3998,0,c	;volatile
   843                           
   844                           ;PAI.c: 45: TMR1IE=1;
   845   001BEC  809D               	bsf	3997,0,c	;volatile
   846                           
   847                           ;PAI.c: 46: RBPU=0;
   848   001BEE  9EF1               	bcf	4081,7,c	;volatile
   849                           
   850                           ;PAI.c: 47: RBIF=0;
   851   001BF0  90F2               	bcf	4082,0,c	;volatile
   852                           
   853                           ;PAI.c: 48: RBIE=1;
   854   001BF2  86F2               	bsf	4082,3,c	;volatile
   855                           
   856                           ;PAI.c: 49: TMR0=26473;
   857   001BF4  0E67               	movlw	103
   858   001BF6  6ED7               	movwf	215,c	;volatile
   859   001BF8  0E69               	movlw	105
   860   001BFA  6ED6               	movwf	214,c	;volatile
   861                           
   862                           ;PAI.c: 50: TMR0IF=0;
   863   001BFC  94F2               	bcf	4082,2,c	;volatile
   864                           
   865                           ;PAI.c: 51: TMR0IE=1;
   866   001BFE  8AF2               	bsf	4082,5,c	;volatile
   867                           
   868                           ;PAI.c: 52: GIE=1;
   869   001C00  8EF2               	bsf	4082,7,c	;volatile
   870                           
   871                           ;PAI.c: 53: PEIE=1;
   872   001C02  8CF2               	bsf	4082,6,c	;volatile
   873                           
   874                           ;PAI.c: 54: _delay((unsigned long)((500)*(1000000/4000.0)));
   875   001C04  0EA3               	movlw	163
   876   001C06  6E3B               	movwf	??_main^0,c
   877   001C08  0E55               	movlw	85
   878   001C0A                     u2987:
   879   001C0A  2EE8               	decfsz	wreg,f,c
   880   001C0C  D7FE               	bra	u2987
   881   001C0E  2E3B               	decfsz	??_main^0,f,c
   882   001C10  D7FC               	bra	u2987
   883   001C12  F000               	nop	
   884                           
   885                           ;PAI.c: 55: ConfiguraLCD(4);
   886   001C14  0E04               	movlw	4
   887   001C16  ECAC  F014         	call	_ConfiguraLCD
   888                           
   889                           ;PAI.c: 56: InicializaLCD();
   890   001C1A  EC99  F011         	call	_InicializaLCD	;wreg free
   891                           
   892                           ;PAI.c: 58: GuardarASCII(64,pacman);
   893   001C1E  0E4B               	movlw	low _pacman
   894   001C20  6E0B               	movwf	GuardarASCII@arreglo^0,c
   895   001C22  0E40               	movlw	64
   896   001C24  EC71  F014         	call	_GuardarASCII
   897                           
   898                           ;PAI.c: 59: GuardarASCII(72,pacman2);
   899   001C28  0E43               	movlw	low _pacman2
   900   001C2A  6E0B               	movwf	GuardarASCII@arreglo^0,c
   901   001C2C  0E48               	movlw	72
   902   001C2E  EC71  F014         	call	_GuardarASCII
   903                           
   904                           ;PAI.c: 60: GuardarASCII(80,cereza);
   905   001C32  0E93               	movlw	low _cereza
   906   001C34  6E0B               	movwf	GuardarASCII@arreglo^0,c
   907   001C36  0E50               	movlw	80
   908   001C38  EC71  F014         	call	_GuardarASCII
   909                           
   910                           ;PAI.c: 61: GuardarASCII(88,barco);
   911   001C3C  0E8B               	movlw	low _barco
   912   001C3E  6E0B               	movwf	GuardarASCII@arreglo^0,c
   913   001C40  0E58               	movlw	88
   914   001C42  EC71  F014         	call	_GuardarASCII
   915                           
   916                           ;PAI.c: 64: if(POR==0) {
   917   001C46  B2D0               	btfsc	4048,1,c	;volatile
   918   001C48  D034               	goto	l3269
   919                           
   920                           ;PAI.c: 65: MensajeLCD_Var("Reset POR",9);
   921   001C4A  0E1B               	movlw	low STR_1
   922   001C4C  6E0B               	movwf	MensajeLCD_Var@a^0,c
   923   001C4E  0E09               	movlw	9
   924   001C50  6E0C               	movwf	MensajeLCD_Var@cont^0,c
   925   001C52  ECE3  F013         	call	_MensajeLCD_Var	;wreg free
   926                           
   927                           ;PAI.c: 66: POR=1;
   928   001C56  82D0               	bsf	4048,1,c	;volatile
   929                           
   930                           ;PAI.c: 67: while(activado==0){
   931   001C58  D028               	goto	l3267
   932   001C5A                     l3249:
   933                           
   934                           ;PAI.c: 68: _delay((unsigned long)((500)*(1000000/4000.0)));
   935   001C5A  0EA3               	movlw	163
   936   001C5C  6E3B               	movwf	??_main^0,c
   937   001C5E  0E55               	movlw	85
   938   001C60                     u2997:
   939   001C60  2EE8               	decfsz	wreg,f,c
   940   001C62  D7FE               	bra	u2997
   941   001C64  2E3B               	decfsz	??_main^0,f,c
   942   001C66  D7FC               	bra	u2997
   943   001C68  F000               	nop	
   944                           
   945                           ;PAI.c: 69: DireccionaLCD(192);
   946   001C6A  0EC0               	movlw	192
   947   001C6C  ECCE  F014         	call	_DireccionaLCD
   948                           
   949                           ;PAI.c: 70: EscribeLCD_c(0);
   950   001C70  0E00               	movlw	0
   951   001C72  ECC3  F014         	call	_EscribeLCD_c
   952                           
   953                           ;PAI.c: 71: EscribeLCD_c(2);
   954   001C76  0E02               	movlw	2
   955   001C78  ECC3  F014         	call	_EscribeLCD_c
   956                           
   957                           ;PAI.c: 72: EscribeLCD_c(3);
   958   001C7C  0E03               	movlw	3
   959   001C7E  ECC3  F014         	call	_EscribeLCD_c
   960                           
   961                           ;PAI.c: 73: _delay((unsigned long)((500)*(1000000/4000.0)));
   962   001C82  0EA3               	movlw	163
   963   001C84  6E3B               	movwf	??_main^0,c
   964   001C86  0E55               	movlw	85
   965   001C88                     u3007:
   966   001C88  2EE8               	decfsz	wreg,f,c
   967   001C8A  D7FE               	bra	u3007
   968   001C8C  2E3B               	decfsz	??_main^0,f,c
   969   001C8E  D7FC               	bra	u3007
   970   001C90  F000               	nop	
   971                           
   972                           ;PAI.c: 74: DireccionaLCD(192);
   973   001C92  0EC0               	movlw	192
   974   001C94  ECCE  F014         	call	_DireccionaLCD
   975                           
   976                           ;PAI.c: 75: EscribeLCD_c(1);
   977   001C98  0E01               	movlw	1
   978   001C9A  ECC3  F014         	call	_EscribeLCD_c
   979                           
   980                           ;PAI.c: 76: EscribeLCD_c(2);
   981   001C9E  0E02               	movlw	2
   982   001CA0  ECC3  F014         	call	_EscribeLCD_c
   983                           
   984                           ;PAI.c: 77: EscribeLCD_c(3);
   985   001CA4  0E03               	movlw	3
   986   001CA6  ECC3  F014         	call	_EscribeLCD_c
   987   001CAA                     l3267:
   988   001CAA  5054               	movf	_activado^0,w,c
   989   001CAC  A4D8               	btfss	status,2,c
   990   001CAE  D00A               	goto	u2890
   991   001CB0  D7D4               	goto	l3249
   992   001CB2                     l3269:
   993                           
   994                           ;PAI.c: 80: else {;PAI.c: 81: MensajeLCD_Var("Reset MCLRE",11);
   995   001CB2  0E0F               	movlw	low STR_2
   996   001CB4  6E0B               	movwf	MensajeLCD_Var@a^0,c
   997   001CB6  0E0B               	movlw	11
   998   001CB8  6E0C               	movwf	MensajeLCD_Var@cont^0,c
   999   001CBA  ECE3  F013         	call	_MensajeLCD_Var	;wreg free
  1000   001CBE                     l3271:
  1001   001CBE  5054               	movf	_activado^0,w,c
  1002   001CC0  B4D8               	btfsc	status,2,c
  1003   001CC2  D7FD               	goto	l3271
  1004   001CC4                     u2890:
  1005                           
  1006                           ;PAI.c: 83: };PAI.c: 87: BorraLCD();
  1007   001CC4  ECD9  F014         	call	_BorraLCD	;wreg free
  1008   001CC8                     l3275:
  1009                           
  1010                           ;PAI.c: 91: if(Cambio==1){
  1011   001CC8  0456               	decf	_Cambio^0,w,c
  1012   001CCA  A4D8               	btfss	status,2,c
  1013   001CCC  D7FD               	goto	l3275
  1014                           
  1015                           ;PAI.c: 92: if(limpiar==1){
  1016   001CCE  0457               	decf	_limpiar^0,w,c
  1017   001CD0  A4D8               	btfss	status,2,c
  1018   001CD2  D010               	goto	l3295
  1019                           
  1020                           ;PAI.c: 93: BorraLCD();
  1021   001CD4  ECD9  F014         	call	_BorraLCD	;wreg free
  1022                           
  1023                           ;PAI.c: 94: char i;;PAI.c: 95: for(i=1;i<4;i++){
  1024   001CD8  0E01               	movlw	1
  1025   001CDA  6E3C               	movwf	main@i^0,c
  1026   001CDC                     l3287:
  1027                           
  1028                           ;PAI.c: 96: operacion[i]=' ';
  1029   001CDC  503C               	movf	main@i^0,w,c
  1030   001CDE  0F3D               	addlw	low _operacion
  1031   001CE0  6ED9               	movwf	fsr2l,c
  1032   001CE2  6ADA               	clrf	fsr2h,c
  1033   001CE4  0E20               	movlw	32
  1034   001CE6  6EDF               	movwf	indf2,c
  1035   001CE8  2A3C               	incf	main@i^0,f,c
  1036   001CEA  0E03               	movlw	3
  1037   001CEC  643C               	cpfsgt	main@i^0,c
  1038   001CEE  D7F6               	goto	l3287
  1039                           
  1040                           ;PAI.c: 97: };PAI.c: 98: limpiar=0;
  1041   001CF0  0E00               	movlw	0
  1042   001CF2  6E57               	movwf	_limpiar^0,c
  1043   001CF4                     l3295:
  1044                           
  1045                           ;PAI.c: 99: };PAI.c: 101: if(borrar==1){
  1046   001CF4  0458               	decf	_borrar^0,w,c
  1047   001CF6  A4D8               	btfss	status,2,c
  1048   001CF8  D014               	goto	l3309
  1049                           
  1050                           ;PAI.c: 102: DireccionaLCD(127+cont);
  1051   001CFA  5059               	movf	_cont^0,w,c
  1052   001CFC  0F7F               	addlw	127
  1053   001CFE  ECCE  F014         	call	_DireccionaLCD
  1054                           
  1055                           ;PAI.c: 103: EscribeLCD_c(operacion[cont]);
  1056   001D02  5059               	movf	_cont^0,w,c
  1057   001D04  0F3D               	addlw	low _operacion
  1058   001D06  6ED9               	movwf	fsr2l,c
  1059   001D08  6ADA               	clrf	fsr2h,c
  1060   001D0A  50DF               	movf	indf2,w,c
  1061   001D0C  ECC3  F014         	call	_EscribeLCD_c
  1062                           
  1063                           ;PAI.c: 104: DireccionaLCD(127+cont);
  1064   001D10  5059               	movf	_cont^0,w,c
  1065   001D12  0F7F               	addlw	127
  1066   001D14  ECCE  F014         	call	_DireccionaLCD
  1067                           
  1068                           ;PAI.c: 105: cont--;
  1069   001D18  0659               	decf	_cont^0,f,c
  1070                           
  1071                           ;PAI.c: 106: borrar=0;
  1072   001D1A  0E00               	movlw	0
  1073   001D1C  6E58               	movwf	_borrar^0,c
  1074                           
  1075                           ;PAI.c: 107: Cambio=0;
  1076   001D1E  0E00               	movlw	0
  1077   001D20  6E56               	movwf	_Cambio^0,c
  1078   001D22                     l3309:
  1079                           
  1080                           ;PAI.c: 108: };PAI.c: 110: if(digitar==1){
  1081   001D22  0455               	decf	_digitar^0,w,c
  1082   001D24  A4D8               	btfss	status,2,c
  1083   001D26  D00B               	goto	l3317
  1084                           
  1085                           ;PAI.c: 111: EscribeLCD_c(operacion[cont-1]);
  1086   001D28  5059               	movf	_cont^0,w,c
  1087   001D2A  0F3C               	addlw	low (_operacion+255)
  1088   001D2C  6ED9               	movwf	fsr2l,c
  1089   001D2E  6ADA               	clrf	fsr2h,c
  1090   001D30  50DF               	movf	indf2,w,c
  1091   001D32  ECC3  F014         	call	_EscribeLCD_c
  1092                           
  1093                           ;PAI.c: 112: digitar=0;
  1094   001D36  0E00               	movlw	0
  1095   001D38  6E55               	movwf	_digitar^0,c
  1096                           
  1097                           ;PAI.c: 113: Cambio=0;
  1098   001D3A  0E00               	movlw	0
  1099   001D3C  6E56               	movwf	_Cambio^0,c
  1100   001D3E                     l3317:
  1101                           
  1102                           ;PAI.c: 114: };PAI.c: 116: if(cont==4||(cont==3&&operacion[1]=='!')){
  1103   001D3E  0E04               	movlw	4
  1104   001D40  1859               	xorwf	_cont^0,w,c
  1105   001D42  B4D8               	btfsc	status,2,c
  1106   001D44  D008               	goto	u2970
  1107   001D46  0E03               	movlw	3
  1108   001D48  1859               	xorwf	_cont^0,w,c
  1109   001D4A  A4D8               	btfss	status,2,c
  1110   001D4C  D7BD               	goto	l3275
  1111   001D4E  0E21               	movlw	33
  1112   001D50  183E               	xorwf	(_operacion+1)^0,w,c
  1113   001D52  A4D8               	btfss	status,2,c
  1114   001D54  D7B9               	goto	l3275
  1115   001D56                     u2970:
  1116                           
  1117                           ;PAI.c: 117: ModuloOperacion();
  1118   001D56  EC7C  F00B         	call	_ModuloOperacion	;wreg free
  1119                           
  1120                           ;PAI.c: 118: cont=0;
  1121   001D5A  0E00               	movlw	0
  1122   001D5C  6E59               	movwf	_cont^0,c
  1123                           
  1124                           ;PAI.c: 119: limpiar=1;
  1125   001D5E  0E01               	movlw	1
  1126   001D60  6E57               	movwf	_limpiar^0,c
  1127                           
  1128                           ;PAI.c: 120: Cambio=0;
  1129   001D62  0E00               	movlw	0
  1130   001D64  6E56               	movwf	_Cambio^0,c
  1131   001D66  D7B0               	goto	l3275
  1132   001D68                     __end_of_main:
  1133                           	callstack 0
  1134                           
  1135 ;; *************** function _ModuloOperacion *****************
  1136 ;; Defined at:
  1137 ;;		line 194 in file "PAI.c"
  1138 ;; Parameters:    Size  Location     Type
  1139 ;;		None
  1140 ;; Auto vars:     Size  Location     Type
  1141 ;;  n2              3   12[BANK0 ] void 
  1142 ;;  n1              3    9[BANK0 ] void 
  1143 ;;  ResL            4   34[BANK0 ] unsigned long 
  1144 ;;  i               4   24[BANK0 ] long 
  1145 ;;  var             4   20[BANK0 ] long 
  1146 ;;  b               1   29[BANK0 ] unsigned char 
  1147 ;;  ResL            4   30[BANK0 ] unsigned long 
  1148 ;;  var             4   16[BANK0 ] long 
  1149 ;;  n1L             4    5[BANK0 ] unsigned long 
  1150 ;;  b               1   28[BANK0 ] unsigned char 
  1151 ;;  i               1   15[BANK0 ] unsigned char 
  1152 ;;  Res             3   40[BANK0 ] unsigned char 
  1153 ;;  num1            1   39[BANK0 ] unsigned char 
  1154 ;;  num2            1   38[BANK0 ] unsigned char 
  1155 ;; Return value:  Size  Location     Type
  1156 ;;                  1    wreg      void 
  1157 ;; Registers used:
  1158 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1159 ;; Tracked objects:
  1160 ;;		On entry : 0/0
  1161 ;;		On exit  : 0/0
  1162 ;;		Unchanged: 0/0
  1163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1164 ;;      Params:         0       0       0       0       0       0       0       0       0
  1165 ;;      Locals:         0      38       0       0       0       0       0       0       0
  1166 ;;      Temps:          0       5       0       0       0       0       0       0       0
  1167 ;;      Totals:         0      43       0       0       0       0       0       0       0
  1168 ;;Total ram usage:       43 bytes
  1169 ;; Hardware stack levels used: 1
  1170 ;; Hardware stack levels required when called: 7
  1171 ;; This function calls:
  1172 ;;		_DireccionaLCD
  1173 ;;		_EscribeLCD_2Decimales
  1174 ;;		_EscribeLCD_c
  1175 ;;		_EscribeLCD_n32
  1176 ;;		_EscribeLCD_n8
  1177 ;;		_MensajeLCD_Var
  1178 ;;		___awtoft
  1179 ;;		___ftdiv
  1180 ;;		___ftge
  1181 ;;		___fttol
  1182 ;;		___lbmod
  1183 ;;		___lbtoft
  1184 ;;		___lmul
  1185 ;;		_abs
  1186 ;; This function is called by:
  1187 ;;		_main
  1188 ;; This function uses a non-reentrant model
  1189 ;;
  1190                           
  1191                           	psect	text1
  1192   0016F8                     __ptext1:
  1193                           	callstack 0
  1194   0016F8                     _ModuloOperacion:
  1195                           	callstack 23
  1196                           
  1197                           ;PAI.c: 195: char num1;;PAI.c: 196: char num2;;PAI.c: 198: double Res;;PAI.c: 200: num1=
      +                          operacion[0]-48;
  1198                           
  1199                           ;incstack = 0
  1200   0016F8  503D               	movf	_operacion^0,w,c
  1201   0016FA  0FD0               	addlw	208
  1202   0016FC  0100               	movlb	0	; () banked
  1203   0016FE  6F87               	movwf	ModuloOperacion@num1& (0+255),b
  1204                           
  1205                           ;PAI.c: 201: num2=operacion[2]-48;
  1206   001700  503F               	movf	(_operacion+2)^0,w,c
  1207   001702  0FD0               	addlw	208
  1208   001704  6F86               	movwf	ModuloOperacion@num2& (0+255),b
  1209                           
  1210                           ; BSR set to: 0
  1211                           ;PAI.c: 204: DireccionaLCD(192);
  1212   001706  0EC0               	movlw	192
  1213   001708  ECCE  F014         	call	_DireccionaLCD
  1214                           
  1215                           ;PAI.c: 206: if(operacion[1]=='+'){
  1216   00170C  0E2B               	movlw	43
  1217   00170E  183E               	xorwf	(_operacion+1)^0,w,c
  1218   001710  A4D8               	btfss	status,2,c
  1219   001712  D03A               	goto	l3083
  1220                           
  1221                           ;PAI.c: 207: Res= num1+num2;
  1222   001714  0100               	movlb	0	; () banked
  1223   001716  5187               	movf	ModuloOperacion@num1& (0+255),w,b
  1224   001718  2586               	addwf	ModuloOperacion@num2& (0+255),w,b
  1225   00171A  6E30               	movwf	___awtoft@c^0,c
  1226   00171C  6A31               	clrf	(___awtoft@c+1)^0,c
  1227   00171E  3631               	rlcf	(___awtoft@c+1)^0,f,c
  1228   001720  EC40  F014         	call	___awtoft	;wreg free
  1229   001724  C030  F088         	movff	?___awtoft,ModuloOperacion@Res
  1230   001728  C031  F089         	movff	?___awtoft+1,ModuloOperacion@Res+1
  1231   00172C  C032  F08A         	movff	?___awtoft+2,ModuloOperacion@Res+2
  1232                           
  1233                           ;PAI.c: 208: if(Res<10){
  1234   001730  C088  F006         	movff	ModuloOperacion@Res,___ftge@ff1
  1235   001734  C089  F007         	movff	ModuloOperacion@Res+1,___ftge@ff1+1
  1236   001738  C08A  F008         	movff	ModuloOperacion@Res+2,___ftge@ff1+2
  1237   00173C  0E00               	movlw	0
  1238   00173E  6E09               	movwf	___ftge@ff2^0,c
  1239   001740  0E20               	movlw	32
  1240   001742  6E0A               	movwf	(___ftge@ff2+1)^0,c
  1241   001744  0E41               	movlw	65
  1242   001746  6E0B               	movwf	(___ftge@ff2+2)^0,c
  1243   001748  EC66  F012         	call	___ftge	;wreg free
  1244   00174C  B0D8               	btfsc	status,0,c
  1245   00174E  D00E               	goto	l3081
  1246                           
  1247                           ;PAI.c: 209: EscribeLCD_n8(Res,1);
  1248   001750  0E01               	movlw	1
  1249   001752  6E2C               	movwf	EscribeLCD_n8@b^0,c
  1250   001754  C088  F01D         	movff	ModuloOperacion@Res,___fttol@f1
  1251   001758  C089  F01E         	movff	ModuloOperacion@Res+1,___fttol@f1+1
  1252   00175C  C08A  F01F         	movff	ModuloOperacion@Res+2,___fttol@f1+2
  1253   001760  ECD9  F010         	call	___fttol	;wreg free
  1254   001764  501D               	movf	?___fttol^0,w,c
  1255   001766  EC66  F010         	call	_EscribeLCD_n8
  1256                           
  1257                           ;PAI.c: 210: }else{
  1258   00176A  0012               	return	
  1259   00176C                     l3081:
  1260                           
  1261                           ;PAI.c: 211: EscribeLCD_n8(Res,2);
  1262   00176C  0E02               	movlw	2
  1263   00176E  6E2C               	movwf	EscribeLCD_n8@b^0,c
  1264   001770  C088  F01D         	movff	ModuloOperacion@Res,___fttol@f1
  1265   001774  C089  F01E         	movff	ModuloOperacion@Res+1,___fttol@f1+1
  1266   001778  C08A  F01F         	movff	ModuloOperacion@Res+2,___fttol@f1+2
  1267   00177C  ECD9  F010         	call	___fttol	;wreg free
  1268   001780  501D               	movf	?___fttol^0,w,c
  1269   001782  EC66  F010         	call	_EscribeLCD_n8
  1270   001786  0012               	return	
  1271   001788                     l3083:
  1272   001788  0E2D               	movlw	45
  1273   00178A  183E               	xorwf	(_operacion+1)^0,w,c
  1274   00178C  A4D8               	btfss	status,2,c
  1275   00178E  D04D               	goto	l3095
  1276                           
  1277                           ;PAI.c: 215: Res= num1-num2;
  1278   001790  0100               	movlb	0	; () banked
  1279   001792  5186               	movf	ModuloOperacion@num2& (0+255),w,b
  1280   001794  5D87               	subwf	ModuloOperacion@num1& (0+255),w,b
  1281   001796  6E30               	movwf	___awtoft@c^0,c
  1282   001798  6A31               	clrf	(___awtoft@c+1)^0,c
  1283   00179A  A0D8               	btfss	status,0,c
  1284   00179C  0631               	decf	(___awtoft@c+1)^0,f,c
  1285   00179E  EC40  F014         	call	___awtoft	;wreg free
  1286   0017A2  C030  F088         	movff	?___awtoft,ModuloOperacion@Res
  1287   0017A6  C031  F089         	movff	?___awtoft+1,ModuloOperacion@Res+1
  1288   0017AA  C032  F08A         	movff	?___awtoft+2,ModuloOperacion@Res+2
  1289                           
  1290                           ;PAI.c: 216: if(Res>=0)EscribeLCD_n8(Res,1);
  1291   0017AE  0100               	movlb	0	; () banked
  1292   0017B0  BF8A               	btfsc	(ModuloOperacion@Res+2)& (0+255),7,b
  1293   0017B2  D00E               	goto	l3091
  1294                           
  1295                           ; BSR set to: 0
  1296   0017B4  0E01               	movlw	1
  1297   0017B6  6E2C               	movwf	EscribeLCD_n8@b^0,c
  1298   0017B8  C088  F01D         	movff	ModuloOperacion@Res,___fttol@f1
  1299   0017BC  C089  F01E         	movff	ModuloOperacion@Res+1,___fttol@f1+1
  1300   0017C0  C08A  F01F         	movff	ModuloOperacion@Res+2,___fttol@f1+2
  1301   0017C4  ECD9  F010         	call	___fttol	;wreg free
  1302   0017C8  501D               	movf	?___fttol^0,w,c
  1303   0017CA  EC66  F010         	call	_EscribeLCD_n8
  1304   0017CE  0012               	return	
  1305   0017D0                     l3091:
  1306                           
  1307                           ; BSR set to: 0
  1308                           ;PAI.c: 217: else if(Res<0){Res=abs(Res);
  1309   0017D0  AF8A               	btfss	(ModuloOperacion@Res+2)& (0+255),7,b
  1310   0017D2  0012               	return	
  1311                           
  1312                           ; BSR set to: 0
  1313   0017D4  C088  F01D         	movff	ModuloOperacion@Res,___fttol@f1
  1314   0017D8  C089  F01E         	movff	ModuloOperacion@Res+1,___fttol@f1+1
  1315   0017DC  C08A  F01F         	movff	ModuloOperacion@Res+2,___fttol@f1+2
  1316   0017E0  ECD9  F010         	call	___fttol	;wreg free
  1317   0017E4  C01D  F02C         	movff	?___fttol,abs@a
  1318   0017E8  C01E  F02D         	movff	?___fttol+1,abs@a+1
  1319   0017EC  EC86  F014         	call	_abs	;wreg free
  1320   0017F0  C02C  F030         	movff	?_abs,___awtoft@c
  1321   0017F4  C02D  F031         	movff	?_abs+1,___awtoft@c+1
  1322   0017F8  EC40  F014         	call	___awtoft	;wreg free
  1323   0017FC  C030  F088         	movff	?___awtoft,ModuloOperacion@Res
  1324   001800  C031  F089         	movff	?___awtoft+1,ModuloOperacion@Res+1
  1325   001804  C032  F08A         	movff	?___awtoft+2,ModuloOperacion@Res+2
  1326                           
  1327                           ;PAI.c: 218: EscribeLCD_c('-');
  1328   001808  0E2D               	movlw	45
  1329   00180A  ECC3  F014         	call	_EscribeLCD_c
  1330                           
  1331                           ;PAI.c: 219: EscribeLCD_n8(Res,1);
  1332   00180E  0E01               	movlw	1
  1333   001810  6E2C               	movwf	EscribeLCD_n8@b^0,c
  1334   001812  C088  F01D         	movff	ModuloOperacion@Res,___fttol@f1
  1335   001816  C089  F01E         	movff	ModuloOperacion@Res+1,___fttol@f1+1
  1336   00181A  C08A  F01F         	movff	ModuloOperacion@Res+2,___fttol@f1+2
  1337   00181E  ECD9  F010         	call	___fttol	;wreg free
  1338   001822  501D               	movf	?___fttol^0,w,c
  1339   001824  EC66  F010         	call	_EscribeLCD_n8
  1340   001828  0012               	return	
  1341   00182A                     l3095:
  1342   00182A  0E78               	movlw	120
  1343   00182C  183E               	xorwf	(_operacion+1)^0,w,c
  1344   00182E  A4D8               	btfss	status,2,c
  1345   001830  D03B               	goto	l3105
  1346                           
  1347                           ;PAI.c: 222: Res= num1*num2;
  1348   001832  0100               	movlb	0	; () banked
  1349   001834  5187               	movf	ModuloOperacion@num1& (0+255),w,b
  1350   001836  0386               	mulwf	ModuloOperacion@num2& (0+255),b
  1351   001838  CFF3 F030          	movff	prodl,___awtoft@c
  1352   00183C  CFF4 F031          	movff	prodh,___awtoft@c+1
  1353   001840  EC40  F014         	call	___awtoft	;wreg free
  1354   001844  C030  F088         	movff	?___awtoft,ModuloOperacion@Res
  1355   001848  C031  F089         	movff	?___awtoft+1,ModuloOperacion@Res+1
  1356   00184C  C032  F08A         	movff	?___awtoft+2,ModuloOperacion@Res+2
  1357                           
  1358                           ;PAI.c: 223: if(Res<10){
  1359   001850  C088  F006         	movff	ModuloOperacion@Res,___ftge@ff1
  1360   001854  C089  F007         	movff	ModuloOperacion@Res+1,___ftge@ff1+1
  1361   001858  C08A  F008         	movff	ModuloOperacion@Res+2,___ftge@ff1+2
  1362   00185C  0E00               	movlw	0
  1363   00185E  6E09               	movwf	___ftge@ff2^0,c
  1364   001860  0E20               	movlw	32
  1365   001862  6E0A               	movwf	(___ftge@ff2+1)^0,c
  1366   001864  0E41               	movlw	65
  1367   001866  6E0B               	movwf	(___ftge@ff2+2)^0,c
  1368   001868  EC66  F012         	call	___ftge	;wreg free
  1369   00186C  B0D8               	btfsc	status,0,c
  1370   00186E  D00E               	goto	l3103
  1371                           
  1372                           ;PAI.c: 224: EscribeLCD_n8(Res,1);
  1373   001870  0E01               	movlw	1
  1374   001872  6E2C               	movwf	EscribeLCD_n8@b^0,c
  1375   001874  C088  F01D         	movff	ModuloOperacion@Res,___fttol@f1
  1376   001878  C089  F01E         	movff	ModuloOperacion@Res+1,___fttol@f1+1
  1377   00187C  C08A  F01F         	movff	ModuloOperacion@Res+2,___fttol@f1+2
  1378   001880  ECD9  F010         	call	___fttol	;wreg free
  1379   001884  501D               	movf	?___fttol^0,w,c
  1380   001886  EC66  F010         	call	_EscribeLCD_n8
  1381                           
  1382                           ;PAI.c: 225: }else{
  1383   00188A  0012               	return	
  1384   00188C                     l3103:
  1385                           
  1386                           ;PAI.c: 226: EscribeLCD_n8(Res,2);
  1387   00188C  0E02               	movlw	2
  1388   00188E  6E2C               	movwf	EscribeLCD_n8@b^0,c
  1389   001890  C088  F01D         	movff	ModuloOperacion@Res,___fttol@f1
  1390   001894  C089  F01E         	movff	ModuloOperacion@Res+1,___fttol@f1+1
  1391   001898  C08A  F01F         	movff	ModuloOperacion@Res+2,___fttol@f1+2
  1392   00189C  ECD9  F010         	call	___fttol	;wreg free
  1393   0018A0  501D               	movf	?___fttol^0,w,c
  1394   0018A2  EC66  F010         	call	_EscribeLCD_n8
  1395   0018A6  0012               	return	
  1396   0018A8                     l3105:
  1397   0018A8  0E2F               	movlw	47
  1398   0018AA  183E               	xorwf	(_operacion+1)^0,w,c
  1399   0018AC  A4D8               	btfss	status,2,c
  1400   0018AE  D05F               	goto	l3131
  1401                           
  1402                           ;PAI.c: 229: if(num2==0&&num1==0){
  1403   0018B0  0100               	movlb	0	; () banked
  1404   0018B2  5186               	movf	ModuloOperacion@num2& (0+255),w,b
  1405   0018B4  A4D8               	btfss	status,2,c
  1406   0018B6  D00A               	goto	l3117
  1407                           
  1408                           ; BSR set to: 0
  1409   0018B8  5187               	movf	ModuloOperacion@num1& (0+255),w,b
  1410   0018BA  A4D8               	btfss	status,2,c
  1411   0018BC  D007               	goto	l3117
  1412                           
  1413                           ; BSR set to: 0
  1414                           ;PAI.c: 230: MensajeLCD_Var("Indeterminado",13);
  1415   0018BE  0E01               	movlw	low STR_3
  1416   0018C0  6E0B               	movwf	MensajeLCD_Var@a^0,c
  1417   0018C2  0E0D               	movlw	13
  1418   0018C4  6E0C               	movwf	MensajeLCD_Var@cont^0,c
  1419   0018C6  ECE3  F013         	call	_MensajeLCD_Var	;wreg free
  1420   0018CA  0012               	return	
  1421   0018CC                     l3117:
  1422                           
  1423                           ; BSR set to: 0
  1424   0018CC  5186               	movf	ModuloOperacion@num2& (0+255),w,b
  1425   0018CE  A4D8               	btfss	status,2,c
  1426   0018D0  D007               	goto	l3125
  1427                           
  1428                           ; BSR set to: 0
  1429                           ;PAI.c: 233: MensajeLCD_Var("Infinito",8);
  1430   0018D2  0E25               	movlw	low STR_4
  1431   0018D4  6E0B               	movwf	MensajeLCD_Var@a^0,c
  1432   0018D6  0E08               	movlw	8
  1433   0018D8  6E0C               	movwf	MensajeLCD_Var@cont^0,c
  1434   0018DA  ECE3  F013         	call	_MensajeLCD_Var	;wreg free
  1435   0018DE  0012               	return	
  1436   0018E0                     l3125:
  1437                           
  1438                           ; BSR set to: 0
  1439                           ;PAI.c: 236: double n1;;PAI.c: 237: double n2;;PAI.c: 238: n1=num1;
  1440   0018E0  5187               	movf	ModuloOperacion@num1& (0+255),w,b
  1441   0018E2  EC9A  F014         	call	___lbtoft
  1442   0018E6  C00E  F069         	movff	?___lbtoft,ModuloOperacion@n1
  1443   0018EA  C00F  F06A         	movff	?___lbtoft+1,ModuloOperacion@n1+1
  1444   0018EE  C010  F06B         	movff	?___lbtoft+2,ModuloOperacion@n1+2
  1445                           
  1446                           ;PAI.c: 239: n2=num2;
  1447   0018F2  0100               	movlb	0	; () banked
  1448   0018F4  5186               	movf	ModuloOperacion@num2& (0+255),w,b
  1449   0018F6  EC9A  F014         	call	___lbtoft
  1450   0018FA  C00E  F06C         	movff	?___lbtoft,ModuloOperacion@n2
  1451   0018FE  C00F  F06D         	movff	?___lbtoft+1,ModuloOperacion@n2+1
  1452   001902  C010  F06E         	movff	?___lbtoft+2,ModuloOperacion@n2+2
  1453                           
  1454                           ;PAI.c: 240: Res= n1/n2;
  1455   001906  C069  F00E         	movff	ModuloOperacion@n1,___ftdiv@f1
  1456   00190A  C06A  F00F         	movff	ModuloOperacion@n1+1,___ftdiv@f1+1
  1457   00190E  C06B  F010         	movff	ModuloOperacion@n1+2,___ftdiv@f1+2
  1458   001912  C06C  F011         	movff	ModuloOperacion@n2,___ftdiv@f2
  1459   001916  C06D  F012         	movff	ModuloOperacion@n2+1,___ftdiv@f2+1
  1460   00191A  C06E  F013         	movff	ModuloOperacion@n2+2,___ftdiv@f2+2
  1461   00191E  ECF3  F00F         	call	___ftdiv	;wreg free
  1462   001922  C00E  F088         	movff	?___ftdiv,ModuloOperacion@Res
  1463   001926  C00F  F089         	movff	?___ftdiv+1,ModuloOperacion@Res+1
  1464   00192A  C010  F08A         	movff	?___ftdiv+2,ModuloOperacion@Res+2
  1465                           
  1466                           ;PAI.c: 242: if(num1%num2==0){
  1467   00192E  C086  F006         	movff	ModuloOperacion@num2,___lbmod@divisor
  1468   001932  0100               	movlb	0	; () banked
  1469   001934  5187               	movf	ModuloOperacion@num1& (0+255),w,b
  1470   001936  EC5C  F014         	call	___lbmod
  1471   00193A  0900               	iorlw	0
  1472   00193C  A4D8               	btfss	status,2,c
  1473   00193E  D00E               	goto	l3129
  1474                           
  1475                           ;PAI.c: 243: EscribeLCD_n8(Res,1);
  1476   001940  0E01               	movlw	1
  1477   001942  6E2C               	movwf	EscribeLCD_n8@b^0,c
  1478   001944  C088  F01D         	movff	ModuloOperacion@Res,___fttol@f1
  1479   001948  C089  F01E         	movff	ModuloOperacion@Res+1,___fttol@f1+1
  1480   00194C  C08A  F01F         	movff	ModuloOperacion@Res+2,___fttol@f1+2
  1481   001950  ECD9  F010         	call	___fttol	;wreg free
  1482   001954  501D               	movf	?___fttol^0,w,c
  1483   001956  EC66  F010         	call	_EscribeLCD_n8
  1484                           
  1485                           ;PAI.c: 244: } else{
  1486   00195A  0012               	return	
  1487   00195C                     l3129:
  1488                           
  1489                           ;PAI.c: 245: EscribeLCD_2Decimales(Res);
  1490   00195C  C088  F031         	movff	ModuloOperacion@Res,EscribeLCD_2Decimales@a
  1491   001960  C089  F032         	movff	ModuloOperacion@Res+1,EscribeLCD_2Decimales@a+1
  1492   001964  C08A  F033         	movff	ModuloOperacion@Res+2,EscribeLCD_2Decimales@a+2
  1493   001968  EC28  F012         	call	_EscribeLCD_2Decimales	;wreg free
  1494   00196C  0012               	return	
  1495   00196E                     l3131:
  1496   00196E  0E5E               	movlw	94
  1497   001970  183E               	xorwf	(_operacion+1)^0,w,c
  1498   001972  A4D8               	btfss	status,2,c
  1499   001974  D092               	goto	l3179
  1500                           
  1501                           ;PAI.c: 249: unsigned long ResL;;PAI.c: 250: unsigned long n1L;;PAI.c: 251: char i;;PAI.
      +                          c: 252: char b=0;
  1502   001976  0E00               	movlw	0
  1503   001978  0100               	movlb	0	; () banked
  1504   00197A  6F7C               	movwf	ModuloOperacion@b& (0+255),b
  1505                           
  1506                           ;PAI.c: 253: long var=1;
  1507   00197C  0E01               	movlw	1
  1508   00197E  6F70               	movwf	ModuloOperacion@var& (0+255),b
  1509   001980  0E00               	movlw	0
  1510   001982  6F71               	movwf	(ModuloOperacion@var+1)& (0+255),b
  1511   001984  0E00               	movlw	0
  1512   001986  6F72               	movwf	(ModuloOperacion@var+2)& (0+255),b
  1513   001988  0E00               	movlw	0
  1514   00198A  6F73               	movwf	(ModuloOperacion@var+3)& (0+255),b
  1515                           
  1516                           ;PAI.c: 255: if(num1==0&& num2==0){
  1517   00198C  5187               	movf	ModuloOperacion@num1& (0+255),w,b
  1518   00198E  A4D8               	btfss	status,2,c
  1519   001990  D00A               	goto	l3143
  1520                           
  1521                           ; BSR set to: 0
  1522   001992  5186               	movf	ModuloOperacion@num2& (0+255),w,b
  1523   001994  A4D8               	btfss	status,2,c
  1524   001996  D007               	goto	l3143
  1525                           
  1526                           ; BSR set to: 0
  1527                           ;PAI.c: 256: MensajeLCD_Var("Indeterminado",13);
  1528   001998  0E01               	movlw	low STR_3
  1529   00199A  6E0B               	movwf	MensajeLCD_Var@a^0,c
  1530   00199C  0E0D               	movlw	13
  1531   00199E  6E0C               	movwf	MensajeLCD_Var@cont^0,c
  1532   0019A0  ECE3  F013         	call	_MensajeLCD_Var	;wreg free
  1533   0019A4  0012               	return	
  1534   0019A6                     l3143:
  1535                           
  1536                           ; BSR set to: 0
  1537   0019A6  5187               	movf	ModuloOperacion@num1& (0+255),w,b
  1538   0019A8  A4D8               	btfss	status,2,c
  1539   0019AA  D006               	goto	l3151
  1540                           
  1541                           ; BSR set to: 0
  1542                           ;PAI.c: 259: EscribeLCD_n8(0,1);
  1543   0019AC  0E01               	movlw	1
  1544   0019AE  6E2C               	movwf	EscribeLCD_n8@b^0,c
  1545   0019B0  0E00               	movlw	0
  1546   0019B2  EC66  F010         	call	_EscribeLCD_n8
  1547   0019B6  0012               	return	
  1548   0019B8                     l3151:
  1549                           
  1550                           ; BSR set to: 0
  1551   0019B8  5186               	movf	ModuloOperacion@num2& (0+255),w,b
  1552   0019BA  A4D8               	btfss	status,2,c
  1553   0019BC  D006               	goto	l3159
  1554                           
  1555                           ; BSR set to: 0
  1556                           ;PAI.c: 262: EscribeLCD_n8(1,1);
  1557   0019BE  0E01               	movlw	1
  1558   0019C0  6E2C               	movwf	EscribeLCD_n8@b^0,c
  1559   0019C2  0E01               	movlw	1
  1560   0019C4  EC66  F010         	call	_EscribeLCD_n8
  1561   0019C8  0012               	return	
  1562   0019CA                     l3159:
  1563                           
  1564                           ; BSR set to: 0
  1565                           ;PAI.c: 265: n1L=num1;
  1566   0019CA  5187               	movf	ModuloOperacion@num1& (0+255),w,b
  1567   0019CC  6F65               	movwf	ModuloOperacion@n1L& (0+255),b
  1568   0019CE  6B66               	clrf	(ModuloOperacion@n1L+1)& (0+255),b
  1569   0019D0  6B67               	clrf	(ModuloOperacion@n1L+2)& (0+255),b
  1570   0019D2  6B68               	clrf	(ModuloOperacion@n1L+3)& (0+255),b
  1571                           
  1572                           ;PAI.c: 266: ResL=1;
  1573   0019D4  0E01               	movlw	1
  1574   0019D6  6F7E               	movwf	ModuloOperacion@ResL& (0+255),b
  1575   0019D8  0E00               	movlw	0
  1576   0019DA  6F7F               	movwf	(ModuloOperacion@ResL+1)& (0+255),b
  1577   0019DC  0E00               	movlw	0
  1578   0019DE  6F80               	movwf	(ModuloOperacion@ResL+2)& (0+255),b
  1579   0019E0  0E00               	movlw	0
  1580   0019E2  6F81               	movwf	(ModuloOperacion@ResL+3)& (0+255),b
  1581                           
  1582                           ;PAI.c: 267: for(i=0;i<num2;i++){
  1583   0019E4  0E00               	movlw	0
  1584   0019E6  6F6F               	movwf	ModuloOperacion@i& (0+255),b
  1585   0019E8  D01C               	goto	l3165
  1586   0019EA                     l3161:
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;PAI.c: 268: ResL=ResL*n1L;
  1590   0019EA  C07E  F006         	movff	ModuloOperacion@ResL,___lmul@multiplier
  1591   0019EE  C07F  F007         	movff	ModuloOperacion@ResL+1,___lmul@multiplier+1
  1592   0019F2  C080  F008         	movff	ModuloOperacion@ResL+2,___lmul@multiplier+2
  1593   0019F6  C081  F009         	movff	ModuloOperacion@ResL+3,___lmul@multiplier+3
  1594   0019FA  C065  F00A         	movff	ModuloOperacion@n1L,___lmul@multiplicand
  1595   0019FE  C066  F00B         	movff	ModuloOperacion@n1L+1,___lmul@multiplicand+1
  1596   001A02  C067  F00C         	movff	ModuloOperacion@n1L+2,___lmul@multiplicand+2
  1597   001A06  C068  F00D         	movff	ModuloOperacion@n1L+3,___lmul@multiplicand+3
  1598   001A0A  EC6A  F013         	call	___lmul	;wreg free
  1599   001A0E  C006  F07E         	movff	?___lmul,ModuloOperacion@ResL
  1600   001A12  C007  F07F         	movff	?___lmul+1,ModuloOperacion@ResL+1
  1601   001A16  C008  F080         	movff	?___lmul+2,ModuloOperacion@ResL+2
  1602   001A1A  C009  F081         	movff	?___lmul+3,ModuloOperacion@ResL+3
  1603   001A1E  0100               	movlb	0	; () banked
  1604   001A20  2B6F               	incf	ModuloOperacion@i& (0+255),f,b
  1605   001A22                     l3165:
  1606                           
  1607                           ; BSR set to: 0
  1608   001A22  5186               	movf	ModuloOperacion@num2& (0+255),w,b
  1609   001A24  5D6F               	subwf	ModuloOperacion@i& (0+255),w,b
  1610   001A26  B0D8               	btfsc	status,0,c
  1611   001A28  D021               	goto	l3175
  1612   001A2A  D7DF               	goto	l3161
  1613   001A2C                     l3167:
  1614                           
  1615                           ; BSR set to: 0
  1616                           ;PAI.c: 272: var*=10;
  1617   001A2C  C070  F006         	movff	ModuloOperacion@var,___lmul@multiplier
  1618   001A30  C071  F007         	movff	ModuloOperacion@var+1,___lmul@multiplier+1
  1619   001A34  C072  F008         	movff	ModuloOperacion@var+2,___lmul@multiplier+2
  1620   001A38  C073  F009         	movff	ModuloOperacion@var+3,___lmul@multiplier+3
  1621   001A3C  0E0A               	movlw	10
  1622   001A3E  6E0A               	movwf	___lmul@multiplicand^0,c
  1623   001A40  0E00               	movlw	0
  1624   001A42  6E0B               	movwf	(___lmul@multiplicand+1)^0,c
  1625   001A44  0E00               	movlw	0
  1626   001A46  6E0C               	movwf	(___lmul@multiplicand+2)^0,c
  1627   001A48  0E00               	movlw	0
  1628   001A4A  6E0D               	movwf	(___lmul@multiplicand+3)^0,c
  1629   001A4C  EC6A  F013         	call	___lmul	;wreg free
  1630   001A50  C006  F070         	movff	?___lmul,ModuloOperacion@var
  1631   001A54  C007  F071         	movff	?___lmul+1,ModuloOperacion@var+1
  1632   001A58  C008  F072         	movff	?___lmul+2,ModuloOperacion@var+2
  1633   001A5C  C009  F073         	movff	?___lmul+3,ModuloOperacion@var+3
  1634                           
  1635                           ;PAI.c: 273: b+=1;
  1636   001A60  0100               	movlb	0	; () banked
  1637   001A62  2B7C               	incf	ModuloOperacion@b& (0+255),f,b
  1638                           
  1639                           ; BSR set to: 0
  1640                           ;PAI.c: 274: if(b==9) break;
  1641   001A64  0E09               	movlw	9
  1642   001A66  197C               	xorwf	ModuloOperacion@b& (0+255),w,b
  1643   001A68  B4D8               	btfsc	status,2,c
  1644   001A6A  D00A               	goto	u2810
  1645   001A6C                     l3175:
  1646                           
  1647                           ; BSR set to: 0
  1648   001A6C  5170               	movf	ModuloOperacion@var& (0+255),w,b
  1649   001A6E  5D7E               	subwf	ModuloOperacion@ResL& (0+255),w,b
  1650   001A70  5171               	movf	(ModuloOperacion@var+1)& (0+255),w,b
  1651   001A72  597F               	subwfb	(ModuloOperacion@ResL+1)& (0+255),w,b
  1652   001A74  5172               	movf	(ModuloOperacion@var+2)& (0+255),w,b
  1653   001A76  5980               	subwfb	(ModuloOperacion@ResL+2)& (0+255),w,b
  1654   001A78  5173               	movf	(ModuloOperacion@var+3)& (0+255),w,b
  1655   001A7A  5981               	subwfb	(ModuloOperacion@ResL+3)& (0+255),w,b
  1656   001A7C  B0D8               	btfsc	status,0,c
  1657   001A7E  D7D6               	goto	l3167
  1658   001A80                     u2810:
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;PAI.c: 275: };PAI.c: 276: EscribeLCD_n32(ResL,b);
  1662   001A80  C07E  F01C         	movff	ModuloOperacion@ResL,EscribeLCD_n32@a
  1663   001A84  C07F  F01D         	movff	ModuloOperacion@ResL+1,EscribeLCD_n32@a+1
  1664   001A88  C080  F01E         	movff	ModuloOperacion@ResL+2,EscribeLCD_n32@a+2
  1665   001A8C  C081  F01F         	movff	ModuloOperacion@ResL+3,EscribeLCD_n32@a+3
  1666   001A90  C07C  F020         	movff	ModuloOperacion@b,EscribeLCD_n32@b
  1667   001A94  EC18  F004         	call	_EscribeLCD_n32	;wreg free
  1668   001A98  0012               	return	
  1669   001A9A                     l3179:
  1670   001A9A  0E21               	movlw	33
  1671   001A9C  183E               	xorwf	(_operacion+1)^0,w,c
  1672   001A9E  A4D8               	btfss	status,2,c
  1673   001AA0  0012               	return	
  1674                           
  1675                           ;PAI.c: 280: unsigned long ResL;;PAI.c: 281: char b=0;
  1676   001AA2  0E00               	movlw	0
  1677   001AA4  0100               	movlb	0	; () banked
  1678   001AA6  6F7D               	movwf	ModuloOperacion@b_195& (0+255),b
  1679                           
  1680                           ;PAI.c: 282: long var=1;
  1681   001AA8  0E01               	movlw	1
  1682   001AAA  6F74               	movwf	ModuloOperacion@var_196& (0+255),b
  1683   001AAC  0E00               	movlw	0
  1684   001AAE  6F75               	movwf	(ModuloOperacion@var_196+1)& (0+255),b
  1685   001AB0  0E00               	movlw	0
  1686   001AB2  6F76               	movwf	(ModuloOperacion@var_196+2)& (0+255),b
  1687   001AB4  0E00               	movlw	0
  1688   001AB6  6F77               	movwf	(ModuloOperacion@var_196+3)& (0+255),b
  1689                           
  1690                           ;PAI.c: 283: ResL=1;
  1691   001AB8  0E01               	movlw	1
  1692   001ABA  6F82               	movwf	ModuloOperacion@ResL_194& (0+255),b
  1693   001ABC  0E00               	movlw	0
  1694   001ABE  6F83               	movwf	(ModuloOperacion@ResL_194+1)& (0+255),b
  1695   001AC0  0E00               	movlw	0
  1696   001AC2  6F84               	movwf	(ModuloOperacion@ResL_194+2)& (0+255),b
  1697   001AC4  0E00               	movlw	0
  1698   001AC6  6F85               	movwf	(ModuloOperacion@ResL_194+3)& (0+255),b
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;PAI.c: 284: long i;;PAI.c: 285: if(num1<2){
  1702   001AC8  0E02               	movlw	2
  1703   001ACA  6187               	cpfslt	ModuloOperacion@num1& (0+255),b
  1704   001ACC  D006               	goto	l3187
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;PAI.c: 286: EscribeLCD_n8(1,1);
  1708   001ACE  0E01               	movlw	1
  1709   001AD0  6E2C               	movwf	EscribeLCD_n8@b^0,c
  1710   001AD2  0E01               	movlw	1
  1711   001AD4  EC66  F010         	call	_EscribeLCD_n8
  1712                           
  1713                           ;PAI.c: 287: }else{
  1714   001AD8  0012               	return	
  1715   001ADA                     l3187:
  1716                           
  1717                           ; BSR set to: 0
  1718                           ;PAI.c: 288: for (i=1;i<=num1;i++){
  1719   001ADA  0E01               	movlw	1
  1720   001ADC  6F78               	movwf	ModuloOperacion@i_197& (0+255),b
  1721   001ADE  0E00               	movlw	0
  1722   001AE0  6F79               	movwf	(ModuloOperacion@i_197+1)& (0+255),b
  1723   001AE2  0E00               	movlw	0
  1724   001AE4  6F7A               	movwf	(ModuloOperacion@i_197+2)& (0+255),b
  1725   001AE6  0E00               	movlw	0
  1726   001AE8  6F7B               	movwf	(ModuloOperacion@i_197+3)& (0+255),b
  1727   001AEA  D021               	goto	l3193
  1728   001AEC                     l3189:
  1729                           
  1730                           ; BSR set to: 0
  1731                           ;PAI.c: 289: ResL*=i;
  1732   001AEC  C082  F006         	movff	ModuloOperacion@ResL_194,___lmul@multiplier
  1733   001AF0  C083  F007         	movff	ModuloOperacion@ResL_194+1,___lmul@multiplier+1
  1734   001AF4  C084  F008         	movff	ModuloOperacion@ResL_194+2,___lmul@multiplier+2
  1735   001AF8  C085  F009         	movff	ModuloOperacion@ResL_194+3,___lmul@multiplier+3
  1736   001AFC  C078  F00A         	movff	ModuloOperacion@i_197,___lmul@multiplicand
  1737   001B00  C079  F00B         	movff	ModuloOperacion@i_197+1,___lmul@multiplicand+1
  1738   001B04  C07A  F00C         	movff	ModuloOperacion@i_197+2,___lmul@multiplicand+2
  1739   001B08  C07B  F00D         	movff	ModuloOperacion@i_197+3,___lmul@multiplicand+3
  1740   001B0C  EC6A  F013         	call	___lmul	;wreg free
  1741   001B10  C006  F082         	movff	?___lmul,ModuloOperacion@ResL_194
  1742   001B14  C007  F083         	movff	?___lmul+1,ModuloOperacion@ResL_194+1
  1743   001B18  C008  F084         	movff	?___lmul+2,ModuloOperacion@ResL_194+2
  1744   001B1C  C009  F085         	movff	?___lmul+3,ModuloOperacion@ResL_194+3
  1745   001B20  0E01               	movlw	1
  1746   001B22  0100               	movlb	0	; () banked
  1747   001B24  2778               	addwf	ModuloOperacion@i_197& (0+255),f,b
  1748   001B26  0E00               	movlw	0
  1749   001B28  2379               	addwfc	(ModuloOperacion@i_197+1)& (0+255),f,b
  1750   001B2A  237A               	addwfc	(ModuloOperacion@i_197+2)& (0+255),f,b
  1751   001B2C  237B               	addwfc	(ModuloOperacion@i_197+3)& (0+255),f,b
  1752   001B2E                     l3193:
  1753                           
  1754                           ; BSR set to: 0
  1755   001B2E  C087  F060         	movff	ModuloOperacion@num1,??_ModuloOperacion
  1756   001B32  6B61               	clrf	(??_ModuloOperacion+1)& (0+255),b
  1757   001B34  6B62               	clrf	(??_ModuloOperacion+2)& (0+255),b
  1758   001B36  6B63               	clrf	(??_ModuloOperacion+3)& (0+255),b
  1759   001B38  5178               	movf	ModuloOperacion@i_197& (0+255),w,b
  1760   001B3A  5D60               	subwf	??_ModuloOperacion& (0+255),w,b
  1761   001B3C  5179               	movf	(ModuloOperacion@i_197+1)& (0+255),w,b
  1762   001B3E  5961               	subwfb	(??_ModuloOperacion+1)& (0+255),w,b
  1763   001B40  517A               	movf	(ModuloOperacion@i_197+2)& (0+255),w,b
  1764   001B42  5962               	subwfb	(??_ModuloOperacion+2)& (0+255),w,b
  1765   001B44  5163               	movf	(??_ModuloOperacion+3)& (0+255),w,b
  1766   001B46  0A80               	xorlw	128
  1767   001B48  6F64               	movwf	(??_ModuloOperacion+4)& (0+255),b
  1768   001B4A  517B               	movf	(ModuloOperacion@i_197+3)& (0+255),w,b
  1769   001B4C  0A80               	xorlw	128
  1770   001B4E  5964               	subwfb	(??_ModuloOperacion+4)& (0+255),w,b
  1771   001B50  A0D8               	btfss	status,0,c
  1772   001B52  D021               	goto	l3203
  1773   001B54  D7CB               	goto	l3189
  1774   001B56                     l3195:
  1775                           
  1776                           ; BSR set to: 0
  1777                           ;PAI.c: 292: var*=10;
  1778   001B56  C074  F006         	movff	ModuloOperacion@var_196,___lmul@multiplier
  1779   001B5A  C075  F007         	movff	ModuloOperacion@var_196+1,___lmul@multiplier+1
  1780   001B5E  C076  F008         	movff	ModuloOperacion@var_196+2,___lmul@multiplier+2
  1781   001B62  C077  F009         	movff	ModuloOperacion@var_196+3,___lmul@multiplier+3
  1782   001B66  0E0A               	movlw	10
  1783   001B68  6E0A               	movwf	___lmul@multiplicand^0,c
  1784   001B6A  0E00               	movlw	0
  1785   001B6C  6E0B               	movwf	(___lmul@multiplicand+1)^0,c
  1786   001B6E  0E00               	movlw	0
  1787   001B70  6E0C               	movwf	(___lmul@multiplicand+2)^0,c
  1788   001B72  0E00               	movlw	0
  1789   001B74  6E0D               	movwf	(___lmul@multiplicand+3)^0,c
  1790   001B76  EC6A  F013         	call	___lmul	;wreg free
  1791   001B7A  C006  F074         	movff	?___lmul,ModuloOperacion@var_196
  1792   001B7E  C007  F075         	movff	?___lmul+1,ModuloOperacion@var_196+1
  1793   001B82  C008  F076         	movff	?___lmul+2,ModuloOperacion@var_196+2
  1794   001B86  C009  F077         	movff	?___lmul+3,ModuloOperacion@var_196+3
  1795                           
  1796                           ;PAI.c: 293: b+=1;
  1797   001B8A  0100               	movlb	0	; () banked
  1798   001B8C  2B7D               	incf	ModuloOperacion@b_195& (0+255),f,b
  1799                           
  1800                           ; BSR set to: 0
  1801                           ;PAI.c: 294: if(b==9) break;
  1802   001B8E  0E09               	movlw	9
  1803   001B90  197D               	xorwf	ModuloOperacion@b_195& (0+255),w,b
  1804   001B92  B4D8               	btfsc	status,2,c
  1805   001B94  D00A               	goto	u2860
  1806   001B96                     l3203:
  1807                           
  1808                           ; BSR set to: 0
  1809   001B96  5174               	movf	ModuloOperacion@var_196& (0+255),w,b
  1810   001B98  5D82               	subwf	ModuloOperacion@ResL_194& (0+255),w,b
  1811   001B9A  5175               	movf	(ModuloOperacion@var_196+1)& (0+255),w,b
  1812   001B9C  5983               	subwfb	(ModuloOperacion@ResL_194+1)& (0+255),w,b
  1813   001B9E  5176               	movf	(ModuloOperacion@var_196+2)& (0+255),w,b
  1814   001BA0  5984               	subwfb	(ModuloOperacion@ResL_194+2)& (0+255),w,b
  1815   001BA2  5177               	movf	(ModuloOperacion@var_196+3)& (0+255),w,b
  1816   001BA4  5985               	subwfb	(ModuloOperacion@ResL_194+3)& (0+255),w,b
  1817   001BA6  B0D8               	btfsc	status,0,c
  1818   001BA8  D7D6               	goto	l3195
  1819   001BAA                     u2860:
  1820                           
  1821                           ; BSR set to: 0
  1822                           ;PAI.c: 295: };PAI.c: 296: EscribeLCD_n32(ResL,b);
  1823   001BAA  C082  F01C         	movff	ModuloOperacion@ResL_194,EscribeLCD_n32@a
  1824   001BAE  C083  F01D         	movff	ModuloOperacion@ResL_194+1,EscribeLCD_n32@a+1
  1825   001BB2  C084  F01E         	movff	ModuloOperacion@ResL_194+2,EscribeLCD_n32@a+2
  1826   001BB6  C085  F01F         	movff	ModuloOperacion@ResL_194+3,EscribeLCD_n32@a+3
  1827   001BBA  C07D  F020         	movff	ModuloOperacion@b_195,EscribeLCD_n32@b
  1828   001BBE  EC18  F004         	call	_EscribeLCD_n32	;wreg free
  1829   001BC2  0012               	return		;funcret
  1830   001BC4                     __end_of_ModuloOperacion:
  1831                           	callstack 0
  1832                           
  1833 ;; *************** function _abs *****************
  1834 ;; Defined at:
  1835 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\abs.c"
  1836 ;; Parameters:    Size  Location     Type
  1837 ;;  a               2   43[COMRAM] int 
  1838 ;; Auto vars:     Size  Location     Type
  1839 ;;		None
  1840 ;; Return value:  Size  Location     Type
  1841 ;;                  2   43[COMRAM] int 
  1842 ;; Registers used:
  1843 ;;		wreg, status,2, status,0
  1844 ;; Tracked objects:
  1845 ;;		On entry : 0/0
  1846 ;;		On exit  : 0/0
  1847 ;;		Unchanged: 0/0
  1848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1849 ;;      Params:         2       0       0       0       0       0       0       0       0
  1850 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1851 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1852 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1853 ;;Total ram usage:        4 bytes
  1854 ;; Hardware stack levels used: 1
  1855 ;; Hardware stack levels required when called: 3
  1856 ;; This function calls:
  1857 ;;		Nothing
  1858 ;; This function is called by:
  1859 ;;		_ModuloOperacion
  1860 ;; This function uses a non-reentrant model
  1861 ;;
  1862                           
  1863                           	psect	text2
  1864   00290C                     __ptext2:
  1865                           	callstack 0
  1866   00290C                     _abs:
  1867                           	callstack 26
  1868                           
  1869                           ;incstack = 0
  1870   00290C  AE2D               	btfss	(abs@a+1)^0,7,c
  1871   00290E  D00D               	goto	l996
  1872   002910  C02C  F02E         	movff	abs@a,??_abs
  1873   002914  C02D  F02F         	movff	abs@a+1,??_abs+1
  1874   002918  1E2E               	comf	??_abs^0,f,c
  1875   00291A  1E2F               	comf	(??_abs+1)^0,f,c
  1876   00291C  4A2E               	infsnz	??_abs^0,f,c
  1877   00291E  2A2F               	incf	(??_abs+1)^0,f,c
  1878   002920  C02E  F02C         	movff	??_abs,?_abs
  1879   002924  C02F  F02D         	movff	??_abs+1,?_abs+1
  1880   002928  0012               	return	
  1881   00292A                     l996:
  1882   00292A  C02C  F02C         	movff	abs@a,?_abs
  1883   00292E  C02D  F02D         	movff	abs@a+1,?_abs+1
  1884   002932  0012               	return		;funcret
  1885   002934                     __end_of_abs:
  1886                           	callstack 0
  1887                           
  1888 ;; *************** function ___lmul *****************
  1889 ;; Defined at:
  1890 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\Umul32.c"
  1891 ;; Parameters:    Size  Location     Type
  1892 ;;  multiplier      4    5[COMRAM] unsigned long 
  1893 ;;  multiplicand    4    9[COMRAM] unsigned long 
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;  product         4   13[COMRAM] unsigned long 
  1896 ;; Return value:  Size  Location     Type
  1897 ;;                  4    5[COMRAM] unsigned long 
  1898 ;; Registers used:
  1899 ;;		wreg, status,2, status,0
  1900 ;; Tracked objects:
  1901 ;;		On entry : 0/0
  1902 ;;		On exit  : 0/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1905 ;;      Params:         8       0       0       0       0       0       0       0       0
  1906 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1907 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1908 ;;      Totals:        12       0       0       0       0       0       0       0       0
  1909 ;;Total ram usage:       12 bytes
  1910 ;; Hardware stack levels used: 1
  1911 ;; Hardware stack levels required when called: 3
  1912 ;; This function calls:
  1913 ;;		Nothing
  1914 ;; This function is called by:
  1915 ;;		_ModuloOperacion
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918                           
  1919                           	psect	text3
  1920   0026D4                     __ptext3:
  1921                           	callstack 0
  1922   0026D4                     ___lmul:
  1923                           	callstack 26
  1924                           
  1925                           ;incstack = 0
  1926   0026D4  0E00               	movlw	0
  1927   0026D6  6E0E               	movwf	___lmul@product^0,c
  1928   0026D8  0E00               	movlw	0
  1929   0026DA  6E0F               	movwf	(___lmul@product+1)^0,c
  1930   0026DC  0E00               	movlw	0
  1931   0026DE  6E10               	movwf	(___lmul@product+2)^0,c
  1932   0026E0  0E00               	movlw	0
  1933   0026E2  6E11               	movwf	(___lmul@product+3)^0,c
  1934   0026E4                     l2533:
  1935   0026E4  A006               	btfss	___lmul@multiplier^0,0,c
  1936   0026E6  D008               	goto	l2537
  1937   0026E8  500A               	movf	___lmul@multiplicand^0,w,c
  1938   0026EA  260E               	addwf	___lmul@product^0,f,c
  1939   0026EC  500B               	movf	(___lmul@multiplicand+1)^0,w,c
  1940   0026EE  220F               	addwfc	(___lmul@product+1)^0,f,c
  1941   0026F0  500C               	movf	(___lmul@multiplicand+2)^0,w,c
  1942   0026F2  2210               	addwfc	(___lmul@product+2)^0,f,c
  1943   0026F4  500D               	movf	(___lmul@multiplicand+3)^0,w,c
  1944   0026F6  2211               	addwfc	(___lmul@product+3)^0,f,c
  1945   0026F8                     l2537:
  1946   0026F8  90D8               	bcf	status,0,c
  1947   0026FA  360A               	rlcf	___lmul@multiplicand^0,f,c
  1948   0026FC  360B               	rlcf	(___lmul@multiplicand+1)^0,f,c
  1949   0026FE  360C               	rlcf	(___lmul@multiplicand+2)^0,f,c
  1950   002700  360D               	rlcf	(___lmul@multiplicand+3)^0,f,c
  1951   002702  90D8               	bcf	status,0,c
  1952   002704  3209               	rrcf	(___lmul@multiplier+3)^0,f,c
  1953   002706  3208               	rrcf	(___lmul@multiplier+2)^0,f,c
  1954   002708  3207               	rrcf	(___lmul@multiplier+1)^0,f,c
  1955   00270A  3206               	rrcf	___lmul@multiplier^0,f,c
  1956   00270C  5006               	movf	___lmul@multiplier^0,w,c
  1957   00270E  1007               	iorwf	(___lmul@multiplier+1)^0,w,c
  1958   002710  1008               	iorwf	(___lmul@multiplier+2)^0,w,c
  1959   002712  1009               	iorwf	(___lmul@multiplier+3)^0,w,c
  1960   002714  A4D8               	btfss	status,2,c
  1961   002716  D7E6               	goto	l2533
  1962   002718  C00E  F006         	movff	___lmul@product,?___lmul
  1963   00271C  C00F  F007         	movff	___lmul@product+1,?___lmul+1
  1964   002720  C010  F008         	movff	___lmul@product+2,?___lmul+2
  1965   002724  C011  F009         	movff	___lmul@product+3,?___lmul+3
  1966   002728  0012               	return		;funcret
  1967   00272A                     __end_of___lmul:
  1968                           	callstack 0
  1969                           
  1970 ;; *************** function ___lbtoft *****************
  1971 ;; Defined at:
  1972 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lbtoft.c"
  1973 ;; Parameters:    Size  Location     Type
  1974 ;;  c               1    wreg     unsigned char 
  1975 ;; Auto vars:     Size  Location     Type
  1976 ;;  c               1   16[COMRAM] unsigned char 
  1977 ;; Return value:  Size  Location     Type
  1978 ;;                  3   13[COMRAM] float 
  1979 ;; Registers used:
  1980 ;;		wreg, status,2, status,0, cstack
  1981 ;; Tracked objects:
  1982 ;;		On entry : 3F/0
  1983 ;;		On exit  : 0/0
  1984 ;;		Unchanged: 0/0
  1985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1986 ;;      Params:         3       0       0       0       0       0       0       0       0
  1987 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1988 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1989 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1990 ;;Total ram usage:        4 bytes
  1991 ;; Hardware stack levels used: 1
  1992 ;; Hardware stack levels required when called: 4
  1993 ;; This function calls:
  1994 ;;		___ftpack
  1995 ;; This function is called by:
  1996 ;;		_ModuloOperacion
  1997 ;; This function uses a non-reentrant model
  1998 ;;
  1999                           
  2000                           	psect	text4
  2001   002934                     __ptext4:
  2002                           	callstack 0
  2003   002934                     ___lbtoft:
  2004                           	callstack 25
  2005                           
  2006                           ;incstack = 0
  2007                           ;___lbtoft@c stored from wreg
  2008   002934  6E11               	movwf	___lbtoft@c^0,c
  2009   002936  5011               	movf	___lbtoft@c^0,w,c
  2010   002938  6E06               	movwf	___ftpack@arg^0,c
  2011   00293A  6A07               	clrf	(___ftpack@arg+1)^0,c
  2012   00293C  6A08               	clrf	(___ftpack@arg+2)^0,c
  2013   00293E  0E8E               	movlw	142
  2014   002940  6E09               	movwf	___ftpack@exp^0,c
  2015   002942  0E00               	movlw	0
  2016   002944  6E0A               	movwf	___ftpack@sign^0,c
  2017   002946  EC42  F011         	call	___ftpack	;wreg free
  2018   00294A  C006  F00E         	movff	?___ftpack,?___lbtoft
  2019   00294E  C007  F00F         	movff	?___ftpack+1,?___lbtoft+1
  2020   002952  C008  F010         	movff	?___ftpack+2,?___lbtoft+2
  2021   002956  0012               	return		;funcret
  2022   002958                     __end_of___lbtoft:
  2023                           	callstack 0
  2024                           
  2025 ;; *************** function ___ftge *****************
  2026 ;; Defined at:
  2027 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftge.c"
  2028 ;; Parameters:    Size  Location     Type
  2029 ;;  ff1             3    5[COMRAM] float 
  2030 ;;  ff2             3    8[COMRAM] float 
  2031 ;; Auto vars:     Size  Location     Type
  2032 ;;		None
  2033 ;; Return value:  Size  Location     Type
  2034 ;;		None               void
  2035 ;; Registers used:
  2036 ;;		wreg, status,2, status,0
  2037 ;; Tracked objects:
  2038 ;;		On entry : 0/0
  2039 ;;		On exit  : 0/0
  2040 ;;		Unchanged: 0/0
  2041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2042 ;;      Params:         6       0       0       0       0       0       0       0       0
  2043 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2044 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2045 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2046 ;;Total ram usage:        9 bytes
  2047 ;; Hardware stack levels used: 1
  2048 ;; Hardware stack levels required when called: 3
  2049 ;; This function calls:
  2050 ;;		Nothing
  2051 ;; This function is called by:
  2052 ;;		_ModuloOperacion
  2053 ;; This function uses a non-reentrant model
  2054 ;;
  2055                           
  2056                           	psect	text5
  2057   0024CC                     __ptext5:
  2058                           	callstack 0
  2059   0024CC                     ___ftge:
  2060                           	callstack 26
  2061                           
  2062                           ;incstack = 0
  2063   0024CC  AE08               	btfss	(___ftge@ff1+2)^0,7,c
  2064   0024CE  D00F               	goto	l2603
  2065   0024D0  0E00               	movlw	0
  2066   0024D2  6E0C               	movwf	??___ftge^0,c
  2067   0024D4  0E00               	movlw	0
  2068   0024D6  6E0D               	movwf	(??___ftge+1)^0,c
  2069   0024D8  0E80               	movlw	128
  2070   0024DA  6E0E               	movwf	(??___ftge+2)^0,c
  2071   0024DC  5006               	movf	___ftge@ff1^0,w,c
  2072   0024DE  5C0C               	subwf	??___ftge^0,w,c
  2073   0024E0  6E06               	movwf	___ftge@ff1^0,c
  2074   0024E2  5007               	movf	(___ftge@ff1+1)^0,w,c
  2075   0024E4  580D               	subwfb	(??___ftge+1)^0,w,c
  2076   0024E6  6E07               	movwf	(___ftge@ff1+1)^0,c
  2077   0024E8  5008               	movf	(___ftge@ff1+2)^0,w,c
  2078   0024EA  580E               	subwfb	(??___ftge+2)^0,w,c
  2079   0024EC  6E08               	movwf	(___ftge@ff1+2)^0,c
  2080   0024EE                     l2603:
  2081   0024EE  AE0B               	btfss	(___ftge@ff2+2)^0,7,c
  2082   0024F0  D00F               	goto	l2607
  2083   0024F2  0E00               	movlw	0
  2084   0024F4  6E0C               	movwf	??___ftge^0,c
  2085   0024F6  0E00               	movlw	0
  2086   0024F8  6E0D               	movwf	(??___ftge+1)^0,c
  2087   0024FA  0E80               	movlw	128
  2088   0024FC  6E0E               	movwf	(??___ftge+2)^0,c
  2089   0024FE  5009               	movf	___ftge@ff2^0,w,c
  2090   002500  5C0C               	subwf	??___ftge^0,w,c
  2091   002502  6E09               	movwf	___ftge@ff2^0,c
  2092   002504  500A               	movf	(___ftge@ff2+1)^0,w,c
  2093   002506  580D               	subwfb	(??___ftge+1)^0,w,c
  2094   002508  6E0A               	movwf	(___ftge@ff2+1)^0,c
  2095   00250A  500B               	movf	(___ftge@ff2+2)^0,w,c
  2096   00250C  580E               	subwfb	(??___ftge+2)^0,w,c
  2097   00250E  6E0B               	movwf	(___ftge@ff2+2)^0,c
  2098   002510                     l2607:
  2099   002510  0E00               	movlw	0
  2100   002512  1A06               	xorwf	___ftge@ff1^0,f,c
  2101   002514  0E00               	movlw	0
  2102   002516  1A07               	xorwf	(___ftge@ff1+1)^0,f,c
  2103   002518  0E80               	movlw	128
  2104   00251A  1A08               	xorwf	(___ftge@ff1+2)^0,f,c
  2105   00251C  0E00               	movlw	0
  2106   00251E  1A09               	xorwf	___ftge@ff2^0,f,c
  2107   002520  0E00               	movlw	0
  2108   002522  1A0A               	xorwf	(___ftge@ff2+1)^0,f,c
  2109   002524  0E80               	movlw	128
  2110   002526  1A0B               	xorwf	(___ftge@ff2+2)^0,f,c
  2111   002528  5009               	movf	___ftge@ff2^0,w,c
  2112   00252A  5C06               	subwf	___ftge@ff1^0,w,c
  2113   00252C  500A               	movf	(___ftge@ff2+1)^0,w,c
  2114   00252E  5807               	subwfb	(___ftge@ff1+1)^0,w,c
  2115   002530  500B               	movf	(___ftge@ff2+2)^0,w,c
  2116   002532  5808               	subwfb	(___ftge@ff1+2)^0,w,c
  2117   002534  B0D8               	btfsc	status,0,c
  2118   002536  D002               	goto	l2613
  2119   002538  90D8               	bcf	status,0,c
  2120   00253A  0012               	return	
  2121   00253C                     l2613:
  2122   00253C  80D8               	bsf	status,0,c
  2123   00253E  0012               	return		;funcret
  2124   002540                     __end_of___ftge:
  2125                           	callstack 0
  2126                           
  2127 ;; *************** function ___ftdiv *****************
  2128 ;; Defined at:
  2129 ;;		line 54 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftdiv.c"
  2130 ;; Parameters:    Size  Location     Type
  2131 ;;  f1              3   13[COMRAM] float 
  2132 ;;  f2              3   16[COMRAM] float 
  2133 ;; Auto vars:     Size  Location     Type
  2134 ;;  f3              3   23[COMRAM] float 
  2135 ;;  sign            1   27[COMRAM] unsigned char 
  2136 ;;  exp             1   26[COMRAM] unsigned char 
  2137 ;;  cntr            1   22[COMRAM] unsigned char 
  2138 ;; Return value:  Size  Location     Type
  2139 ;;                  3   13[COMRAM] float 
  2140 ;; Registers used:
  2141 ;;		wreg, status,2, status,0, cstack
  2142 ;; Tracked objects:
  2143 ;;		On entry : 0/0
  2144 ;;		On exit  : 0/0
  2145 ;;		Unchanged: 0/0
  2146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2147 ;;      Params:         6       0       0       0       0       0       0       0       0
  2148 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2149 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2150 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2151 ;;Total ram usage:       15 bytes
  2152 ;; Hardware stack levels used: 1
  2153 ;; Hardware stack levels required when called: 4
  2154 ;; This function calls:
  2155 ;;		___ftpack
  2156 ;; This function is called by:
  2157 ;;		_ModuloOperacion
  2158 ;; This function uses a non-reentrant model
  2159 ;;
  2160                           
  2161                           	psect	text6
  2162   001FE6                     __ptext6:
  2163                           	callstack 0
  2164   001FE6                     ___ftdiv:
  2165                           	callstack 25
  2166                           
  2167                           ;incstack = 0
  2168   001FE6  C010  F014         	movff	___ftdiv@f1+2,??___ftdiv
  2169   001FEA  6A15               	clrf	(??___ftdiv+1)^0,c
  2170   001FEC  6A16               	clrf	(??___ftdiv+2)^0,c
  2171   001FEE  340F               	rlcf	(___ftdiv@f1+1)^0,w,c
  2172   001FF0  3614               	rlcf	??___ftdiv^0,f,c
  2173   001FF2  E301               	bnc	u1831
  2174   001FF4  8015               	bsf	(??___ftdiv+1)^0,0,c
  2175   001FF6                     u1831:
  2176   001FF6  5014               	movf	??___ftdiv^0,w,c
  2177   001FF8  6E1B               	movwf	___ftdiv@exp^0,c
  2178   001FFA  501B               	movf	___ftdiv@exp^0,w,c
  2179   001FFC  A4D8               	btfss	status,2,c
  2180   001FFE  D007               	goto	l2547
  2181   002000  0E00               	movlw	0
  2182   002002  6E0E               	movwf	?___ftdiv^0,c
  2183   002004  0E00               	movlw	0
  2184   002006  6E0F               	movwf	(?___ftdiv+1)^0,c
  2185   002008  0E00               	movlw	0
  2186   00200A  6E10               	movwf	(?___ftdiv+2)^0,c
  2187   00200C  0012               	return	
  2188   00200E                     l2547:
  2189   00200E  C013  F014         	movff	___ftdiv@f2+2,??___ftdiv
  2190   002012  6A15               	clrf	(??___ftdiv+1)^0,c
  2191   002014  6A16               	clrf	(??___ftdiv+2)^0,c
  2192   002016  3412               	rlcf	(___ftdiv@f2+1)^0,w,c
  2193   002018  3614               	rlcf	??___ftdiv^0,f,c
  2194   00201A  E301               	bnc	u1851
  2195   00201C  8015               	bsf	(??___ftdiv+1)^0,0,c
  2196   00201E                     u1851:
  2197   00201E  5014               	movf	??___ftdiv^0,w,c
  2198   002020  6E1C               	movwf	___ftdiv@sign^0,c
  2199   002022  501C               	movf	___ftdiv@sign^0,w,c
  2200   002024  A4D8               	btfss	status,2,c
  2201   002026  D007               	goto	l2553
  2202   002028  0E00               	movlw	0
  2203   00202A  6E0E               	movwf	?___ftdiv^0,c
  2204   00202C  0E00               	movlw	0
  2205   00202E  6E0F               	movwf	(?___ftdiv+1)^0,c
  2206   002030  0E00               	movlw	0
  2207   002032  6E10               	movwf	(?___ftdiv+2)^0,c
  2208   002034  0012               	return	
  2209   002036                     l2553:
  2210   002036  0E00               	movlw	0
  2211   002038  6E18               	movwf	___ftdiv@f3^0,c
  2212   00203A  0E00               	movlw	0
  2213   00203C  6E19               	movwf	(___ftdiv@f3+1)^0,c
  2214   00203E  0E00               	movlw	0
  2215   002040  6E1A               	movwf	(___ftdiv@f3+2)^0,c
  2216   002042  501C               	movf	___ftdiv@sign^0,w,c
  2217   002044  0F89               	addlw	137
  2218   002046  5E1B               	subwf	___ftdiv@exp^0,f,c
  2219   002048  C010  F01C         	movff	___ftdiv@f1+2,___ftdiv@sign
  2220   00204C  5013               	movf	(___ftdiv@f2+2)^0,w,c
  2221   00204E  1A1C               	xorwf	___ftdiv@sign^0,f,c
  2222   002050  0E80               	movlw	128
  2223   002052  161C               	andwf	___ftdiv@sign^0,f,c
  2224   002054  8E0F               	bsf	(___ftdiv@f1+1)^0,7,c
  2225   002056  0EFF               	movlw	255
  2226   002058  160E               	andwf	___ftdiv@f1^0,f,c
  2227   00205A  0EFF               	movlw	255
  2228   00205C  160F               	andwf	(___ftdiv@f1+1)^0,f,c
  2229   00205E  0E00               	movlw	0
  2230   002060  1610               	andwf	(___ftdiv@f1+2)^0,f,c
  2231   002062  8E12               	bsf	(___ftdiv@f2+1)^0,7,c
  2232   002064  0EFF               	movlw	255
  2233   002066  1611               	andwf	___ftdiv@f2^0,f,c
  2234   002068  0EFF               	movlw	255
  2235   00206A  1612               	andwf	(___ftdiv@f2+1)^0,f,c
  2236   00206C  0E00               	movlw	0
  2237   00206E  1613               	andwf	(___ftdiv@f2+2)^0,f,c
  2238   002070  0E18               	movlw	24
  2239   002072  6E17               	movwf	___ftdiv@cntr^0,c
  2240   002074                     l2573:
  2241   002074  90D8               	bcf	status,0,c
  2242   002076  3618               	rlcf	___ftdiv@f3^0,f,c
  2243   002078  3619               	rlcf	(___ftdiv@f3+1)^0,f,c
  2244   00207A  361A               	rlcf	(___ftdiv@f3+2)^0,f,c
  2245   00207C  5011               	movf	___ftdiv@f2^0,w,c
  2246   00207E  5C0E               	subwf	___ftdiv@f1^0,w,c
  2247   002080  5012               	movf	(___ftdiv@f2+1)^0,w,c
  2248   002082  580F               	subwfb	(___ftdiv@f1+1)^0,w,c
  2249   002084  5013               	movf	(___ftdiv@f2+2)^0,w,c
  2250   002086  5810               	subwfb	(___ftdiv@f1+2)^0,w,c
  2251   002088  A0D8               	btfss	status,0,c
  2252   00208A  D007               	goto	l675
  2253   00208C  5011               	movf	___ftdiv@f2^0,w,c
  2254   00208E  5E0E               	subwf	___ftdiv@f1^0,f,c
  2255   002090  5012               	movf	(___ftdiv@f2+1)^0,w,c
  2256   002092  5A0F               	subwfb	(___ftdiv@f1+1)^0,f,c
  2257   002094  5013               	movf	(___ftdiv@f2+2)^0,w,c
  2258   002096  5A10               	subwfb	(___ftdiv@f1+2)^0,f,c
  2259   002098  8018               	bsf	___ftdiv@f3^0,0,c
  2260   00209A                     l675:
  2261   00209A  90D8               	bcf	status,0,c
  2262   00209C  360E               	rlcf	___ftdiv@f1^0,f,c
  2263   00209E  360F               	rlcf	(___ftdiv@f1+1)^0,f,c
  2264   0020A0  3610               	rlcf	(___ftdiv@f1+2)^0,f,c
  2265   0020A2  2E17               	decfsz	___ftdiv@cntr^0,f,c
  2266   0020A4  D7E7               	goto	l2573
  2267   0020A6  C018  F006         	movff	___ftdiv@f3,___ftpack@arg
  2268   0020AA  C019  F007         	movff	___ftdiv@f3+1,___ftpack@arg+1
  2269   0020AE  C01A  F008         	movff	___ftdiv@f3+2,___ftpack@arg+2
  2270   0020B2  C01B  F009         	movff	___ftdiv@exp,___ftpack@exp
  2271   0020B6  C01C  F00A         	movff	___ftdiv@sign,___ftpack@sign
  2272   0020BA  EC42  F011         	call	___ftpack	;wreg free
  2273   0020BE  C006  F00E         	movff	?___ftpack,?___ftdiv
  2274   0020C2  C007  F00F         	movff	?___ftpack+1,?___ftdiv+1
  2275   0020C6  C008  F010         	movff	?___ftpack+2,?___ftdiv+2
  2276   0020CA  0012               	return		;funcret
  2277   0020CC                     __end_of___ftdiv:
  2278                           	callstack 0
  2279                           
  2280 ;; *************** function ___awtoft *****************
  2281 ;; Defined at:
  2282 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\awtoft.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;  c               2   47[COMRAM] int 
  2285 ;; Auto vars:     Size  Location     Type
  2286 ;;  sign            1   50[COMRAM] unsigned char 
  2287 ;; Return value:  Size  Location     Type
  2288 ;;                  3   47[COMRAM] float 
  2289 ;; Registers used:
  2290 ;;		wreg, status,2, status,0, cstack
  2291 ;; Tracked objects:
  2292 ;;		On entry : 0/0
  2293 ;;		On exit  : 0/0
  2294 ;;		Unchanged: 0/0
  2295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2296 ;;      Params:         3       0       0       0       0       0       0       0       0
  2297 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2298 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2299 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2300 ;;Total ram usage:        4 bytes
  2301 ;; Hardware stack levels used: 1
  2302 ;; Hardware stack levels required when called: 4
  2303 ;; This function calls:
  2304 ;;		___ftpack
  2305 ;; This function is called by:
  2306 ;;		_ModuloOperacion
  2307 ;; This function uses a non-reentrant model
  2308 ;;
  2309                           
  2310                           	psect	text7
  2311   002880                     __ptext7:
  2312                           	callstack 0
  2313   002880                     ___awtoft:
  2314                           	callstack 25
  2315                           
  2316                           ;incstack = 0
  2317   002880  0E00               	movlw	0
  2318   002882  6E33               	movwf	___awtoft@sign^0,c
  2319   002884  AE31               	btfss	(___awtoft@c+1)^0,7,c
  2320   002886  D006               	goto	l2595
  2321   002888  6C30               	negf	___awtoft@c^0,c
  2322   00288A  1E31               	comf	(___awtoft@c+1)^0,f,c
  2323   00288C  B0D8               	btfsc	status,0,c
  2324   00288E  2A31               	incf	(___awtoft@c+1)^0,f,c
  2325   002890  0E01               	movlw	1
  2326   002892  6E33               	movwf	___awtoft@sign^0,c
  2327   002894                     l2595:
  2328   002894  C030  F006         	movff	___awtoft@c,___ftpack@arg
  2329   002898  C031  F007         	movff	___awtoft@c+1,___ftpack@arg+1
  2330   00289C  6A08               	clrf	(___ftpack@arg+2)^0,c
  2331   00289E  0E8E               	movlw	142
  2332   0028A0  6E09               	movwf	___ftpack@exp^0,c
  2333   0028A2  C033  F00A         	movff	___awtoft@sign,___ftpack@sign
  2334   0028A6  EC42  F011         	call	___ftpack	;wreg free
  2335   0028AA  C006  F030         	movff	?___ftpack,?___awtoft
  2336   0028AE  C007  F031         	movff	?___ftpack+1,?___awtoft+1
  2337   0028B2  C008  F032         	movff	?___ftpack+2,?___awtoft+2
  2338   0028B6  0012               	return		;funcret
  2339   0028B8                     __end_of___awtoft:
  2340                           	callstack 0
  2341                           
  2342 ;; *************** function _MensajeLCD_Var *****************
  2343 ;; Defined at:
  2344 ;;		line 292 in file "LibLCDXC8.h"
  2345 ;; Parameters:    Size  Location     Type
  2346 ;;  a               1   10[COMRAM] PTR unsigned char 
  2347 ;;		 -> STR_5(14), STR_4(9), STR_3(14), STR_2(12), 
  2348 ;;		 -> STR_1(10), 
  2349 ;;  cont            1   11[COMRAM] unsigned char 
  2350 ;; Auto vars:     Size  Location     Type
  2351 ;;  i               2   15[COMRAM] int 
  2352 ;; Return value:  Size  Location     Type
  2353 ;;                  1    wreg      void 
  2354 ;; Registers used:
  2355 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2356 ;; Tracked objects:
  2357 ;;		On entry : 0/0
  2358 ;;		On exit  : 0/0
  2359 ;;		Unchanged: 0/0
  2360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2361 ;;      Params:         2       0       0       0       0       0       0       0       0
  2362 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2363 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2364 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2365 ;;Total ram usage:        7 bytes
  2366 ;; Hardware stack levels used: 1
  2367 ;; Hardware stack levels required when called: 6
  2368 ;; This function calls:
  2369 ;;		_EscribeLCD_c
  2370 ;; This function is called by:
  2371 ;;		_main
  2372 ;;		_ModuloOperacion
  2373 ;; This function uses a non-reentrant model
  2374 ;;
  2375                           
  2376                           	psect	text8
  2377   0027C6                     __ptext8:
  2378                           	callstack 0
  2379   0027C6                     _MensajeLCD_Var:
  2380                           	callstack 23
  2381                           
  2382                           ;LibLCDXC8.h: 293: int i;;LibLCDXC8.h: 294: for(i=0;i<(cont);i++){
  2383                           
  2384                           ;incstack = 0
  2385   0027C6  0E00               	movlw	0
  2386   0027C8  6E11               	movwf	(MensajeLCD_Var@i+1)^0,c
  2387   0027CA  0E00               	movlw	0
  2388   0027CC  6E10               	movwf	MensajeLCD_Var@i^0,c
  2389   0027CE  D00D               	goto	l2439
  2390   0027D0                     l2435:
  2391                           
  2392                           ;LibLCDXC8.h: 295: EscribeLCD_c(a[i]);
  2393   0027D0  500B               	movf	MensajeLCD_Var@a^0,w,c
  2394   0027D2  2410               	addwf	MensajeLCD_Var@i^0,w,c
  2395   0027D4  6E0D               	movwf	??_MensajeLCD_Var^0,c
  2396   0027D6  C00D  FFF6         	movff	??_MensajeLCD_Var,tblptrl
  2397   0027DA                     	if	1	;There is more than 1 active tblptr byte
  2398   0027DA  0E08               	movlw	high __smallconst
  2399   0027DC  6EF7               	movwf	tblptrh,c
  2400   0027DE                     	endif
  2401   0027DE                     	if	0	;tblptru may be non-zero
  2402   0027DE                     	endif
  2403   0027DE                     	if	0	;tblptru may be non-zero
  2404   0027DE                     	endif
  2405   0027DE  0008               	tblrd		*
  2406   0027E0  50F5               	movf	tablat,w,c
  2407   0027E2  ECC3  F014         	call	_EscribeLCD_c
  2408   0027E6  4A10               	infsnz	MensajeLCD_Var@i^0,f,c
  2409   0027E8  2A11               	incf	(MensajeLCD_Var@i+1)^0,f,c
  2410   0027EA                     l2439:
  2411   0027EA  500C               	movf	MensajeLCD_Var@cont^0,w,c
  2412   0027EC  6E0D               	movwf	??_MensajeLCD_Var^0,c
  2413   0027EE  6A0E               	clrf	(??_MensajeLCD_Var+1)^0,c
  2414   0027F0  500D               	movf	??_MensajeLCD_Var^0,w,c
  2415   0027F2  5C10               	subwf	MensajeLCD_Var@i^0,w,c
  2416   0027F4  5011               	movf	(MensajeLCD_Var@i+1)^0,w,c
  2417   0027F6  0A80               	xorlw	128
  2418   0027F8  6E0F               	movwf	(??_MensajeLCD_Var+2)^0,c
  2419   0027FA  500E               	movf	(??_MensajeLCD_Var+1)^0,w,c
  2420   0027FC  0A80               	xorlw	128
  2421   0027FE  580F               	subwfb	(??_MensajeLCD_Var+2)^0,w,c
  2422   002800  B0D8               	btfsc	status,0,c
  2423   002802  0012               	return	
  2424   002804  D7E5               	goto	l2435
  2425   002806                     __end_of_MensajeLCD_Var:
  2426                           	callstack 0
  2427                           
  2428 ;; *************** function _EscribeLCD_n32 *****************
  2429 ;; Defined at:
  2430 ;;		line 167 in file "LibLCDXC8.h"
  2431 ;; Parameters:    Size  Location     Type
  2432 ;;  a               4   27[COMRAM] unsigned long 
  2433 ;;  b               1   31[COMRAM] unsigned char 
  2434 ;; Auto vars:     Size  Location     Type
  2435 ;;  diezmil         4   48[COMRAM] unsigned long 
  2436 ;;  cienmil         4   44[COMRAM] unsigned long 
  2437 ;;  millon          4   40[COMRAM] unsigned long 
  2438 ;;  diezmillon      4   36[COMRAM] unsigned long 
  2439 ;;  cienmillon      4   32[COMRAM] unsigned long 
  2440 ;;  centena         2   54[COMRAM] unsigned int 
  2441 ;;  millar          2   52[COMRAM] unsigned int 
  2442 ;;  unidad          1   57[COMRAM] unsigned char 
  2443 ;;  decena          1   56[COMRAM] unsigned char 
  2444 ;; Return value:  Size  Location     Type
  2445 ;;                  1    wreg      void 
  2446 ;; Registers used:
  2447 ;;		wreg, status,2, status,0, cstack
  2448 ;; Tracked objects:
  2449 ;;		On entry : 3F/0
  2450 ;;		On exit  : 0/0
  2451 ;;		Unchanged: 0/0
  2452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2453 ;;      Params:         5       0       0       0       0       0       0       0       0
  2454 ;;      Locals:        26       0       0       0       0       0       0       0       0
  2455 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2456 ;;      Totals:        31       0       0       0       0       0       0       0       0
  2457 ;;Total ram usage:       31 bytes
  2458 ;; Hardware stack levels used: 1
  2459 ;; Hardware stack levels required when called: 6
  2460 ;; This function calls:
  2461 ;;		_EscribeLCD_c
  2462 ;;		___lldiv
  2463 ;;		___llmod
  2464 ;; This function is called by:
  2465 ;;		_ModuloOperacion
  2466 ;; This function uses a non-reentrant model
  2467 ;;
  2468                           
  2469                           	psect	text9
  2470   000830                     __ptext9:
  2471                           	callstack 0
  2472   000830                     _EscribeLCD_n32:
  2473                           	callstack 23
  2474                           
  2475                           ; BSR set to: 0
  2476                           ;LibLCDXC8.h: 172: unsigned char decena,unidad;;LibLCDXC8.h: 173: unsigned int centena,m
      +                          illar;;LibLCDXC8.h: 174: unsigned long diezmil,cienmil,millon,diezmillon,cienmillon;;Lib
      +                          LCDXC8.h: 175: LATD2=1;
  2477                           
  2478                           ;incstack = 0
  2479   000830  848C               	bsf	3980,2,c	;volatile
  2480                           
  2481                           ;LibLCDXC8.h: 177: switch(b){
  2482   000832  EF58  F00B         	goto	l2431
  2483   000836                     l2411:
  2484                           
  2485                           ; BSR set to: 0
  2486   000836  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  2487   00083A  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  2488   00083E  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  2489   000842  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  2490   000846  0E0A               	movlw	10
  2491   000848  6E0A               	movwf	___llmod@divisor^0,c
  2492   00084A  0E00               	movlw	0
  2493   00084C  6E0B               	movwf	(___llmod@divisor+1)^0,c
  2494   00084E  0E00               	movlw	0
  2495   000850  6E0C               	movwf	(___llmod@divisor+2)^0,c
  2496   000852  0E00               	movlw	0
  2497   000854  6E0D               	movwf	(___llmod@divisor+3)^0,c
  2498   000856  ECD8  F012         	call	___llmod	;wreg free
  2499   00085A  5006               	movf	?___llmod^0,w,c
  2500   00085C  6E3A               	movwf	EscribeLCD_n32@unidad^0,c
  2501                           
  2502                           ;LibLCDXC8.h: 179: EscribeLCD_c(unidad+48);
  2503   00085E  503A               	movf	EscribeLCD_n32@unidad^0,w,c
  2504   000860  0F30               	addlw	48
  2505   000862  ECC3  F014         	call	_EscribeLCD_c
  2506                           
  2507                           ;LibLCDXC8.h: 180: break;
  2508   000866  0012               	return	
  2509   000868                     l2413:
  2510                           
  2511                           ; BSR set to: 0
  2512   000868  0E64               	movlw	100
  2513   00086A  6E0A               	movwf	___llmod@divisor^0,c
  2514   00086C  0E00               	movlw	0
  2515   00086E  6E0B               	movwf	(___llmod@divisor+1)^0,c
  2516   000870  0E00               	movlw	0
  2517   000872  6E0C               	movwf	(___llmod@divisor+2)^0,c
  2518   000874  0E00               	movlw	0
  2519   000876  6E0D               	movwf	(___llmod@divisor+3)^0,c
  2520   000878  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  2521   00087C  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  2522   000880  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  2523   000884  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  2524   000888  ECD8  F012         	call	___llmod	;wreg free
  2525   00088C  C006  F00F         	movff	?___llmod,___lldiv@dividend
  2526   000890  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  2527   000894  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  2528   000898  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  2529   00089C  0E0A               	movlw	10
  2530   00089E  6E13               	movwf	___lldiv@divisor^0,c
  2531   0008A0  0E00               	movlw	0
  2532   0008A2  6E14               	movwf	(___lldiv@divisor+1)^0,c
  2533   0008A4  0E00               	movlw	0
  2534   0008A6  6E15               	movwf	(___lldiv@divisor+2)^0,c
  2535   0008A8  0E00               	movlw	0
  2536   0008AA  6E16               	movwf	(___lldiv@divisor+3)^0,c
  2537   0008AC  ECE7  F011         	call	___lldiv	;wreg free
  2538   0008B0  500F               	movf	?___lldiv^0,w,c
  2539   0008B2  6E39               	movwf	EscribeLCD_n32@decena^0,c
  2540                           
  2541                           ;LibLCDXC8.h: 182: unidad=a%10;
  2542   0008B4  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  2543   0008B8  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  2544   0008BC  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  2545   0008C0  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  2546   0008C4  0E0A               	movlw	10
  2547   0008C6  6E0A               	movwf	___llmod@divisor^0,c
  2548   0008C8  0E00               	movlw	0
  2549   0008CA  6E0B               	movwf	(___llmod@divisor+1)^0,c
  2550   0008CC  0E00               	movlw	0
  2551   0008CE  6E0C               	movwf	(___llmod@divisor+2)^0,c
  2552   0008D0  0E00               	movlw	0
  2553   0008D2  6E0D               	movwf	(___llmod@divisor+3)^0,c
  2554   0008D4  ECD8  F012         	call	___llmod	;wreg free
  2555   0008D8  5006               	movf	?___llmod^0,w,c
  2556   0008DA  6E3A               	movwf	EscribeLCD_n32@unidad^0,c
  2557                           
  2558                           ;LibLCDXC8.h: 183: EscribeLCD_c(decena+48);
  2559   0008DC  5039               	movf	EscribeLCD_n32@decena^0,w,c
  2560   0008DE  0F30               	addlw	48
  2561   0008E0  ECC3  F014         	call	_EscribeLCD_c
  2562                           
  2563                           ;LibLCDXC8.h: 184: EscribeLCD_c(unidad+48);
  2564   0008E4  503A               	movf	EscribeLCD_n32@unidad^0,w,c
  2565   0008E6  0F30               	addlw	48
  2566   0008E8  ECC3  F014         	call	_EscribeLCD_c
  2567                           
  2568                           ;LibLCDXC8.h: 185: break;
  2569   0008EC  0012               	return	
  2570   0008EE                     l2415:
  2571                           
  2572                           ; BSR set to: 0
  2573   0008EE  0EE8               	movlw	232
  2574   0008F0  6E0A               	movwf	___llmod@divisor^0,c
  2575   0008F2  0E03               	movlw	3
  2576   0008F4  6E0B               	movwf	(___llmod@divisor+1)^0,c
  2577   0008F6  0E00               	movlw	0
  2578   0008F8  6E0C               	movwf	(___llmod@divisor+2)^0,c
  2579   0008FA  0E00               	movlw	0
  2580   0008FC  6E0D               	movwf	(___llmod@divisor+3)^0,c
  2581   0008FE  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  2582   000902  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  2583   000906  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  2584   00090A  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  2585   00090E  ECD8  F012         	call	___llmod	;wreg free
  2586   000912  C006  F00F         	movff	?___llmod,___lldiv@dividend
  2587   000916  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  2588   00091A  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  2589   00091E  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  2590   000922  0E64               	movlw	100
  2591   000924  6E13               	movwf	___lldiv@divisor^0,c
  2592   000926  0E00               	movlw	0
  2593   000928  6E14               	movwf	(___lldiv@divisor+1)^0,c
  2594   00092A  0E00               	movlw	0
  2595   00092C  6E15               	movwf	(___lldiv@divisor+2)^0,c
  2596   00092E  0E00               	movlw	0
  2597   000930  6E16               	movwf	(___lldiv@divisor+3)^0,c
  2598   000932  ECE7  F011         	call	___lldiv	;wreg free
  2599   000936  C00F  F037         	movff	?___lldiv,EscribeLCD_n32@centena
  2600   00093A  C010  F038         	movff	?___lldiv+1,EscribeLCD_n32@centena+1
  2601                           
  2602                           ;LibLCDXC8.h: 187: decena=(a%100)/10;
  2603   00093E  0E64               	movlw	100
  2604   000940  6E0A               	movwf	___llmod@divisor^0,c
  2605   000942  0E00               	movlw	0
  2606   000944  6E0B               	movwf	(___llmod@divisor+1)^0,c
  2607   000946  0E00               	movlw	0
  2608   000948  6E0C               	movwf	(___llmod@divisor+2)^0,c
  2609   00094A  0E00               	movlw	0
  2610   00094C  6E0D               	movwf	(___llmod@divisor+3)^0,c
  2611   00094E  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  2612   000952  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  2613   000956  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  2614   00095A  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  2615   00095E  ECD8  F012         	call	___llmod	;wreg free
  2616   000962  C006  F00F         	movff	?___llmod,___lldiv@dividend
  2617   000966  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  2618   00096A  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  2619   00096E  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  2620   000972  0E0A               	movlw	10
  2621   000974  6E13               	movwf	___lldiv@divisor^0,c
  2622   000976  0E00               	movlw	0
  2623   000978  6E14               	movwf	(___lldiv@divisor+1)^0,c
  2624   00097A  0E00               	movlw	0
  2625   00097C  6E15               	movwf	(___lldiv@divisor+2)^0,c
  2626   00097E  0E00               	movlw	0
  2627   000980  6E16               	movwf	(___lldiv@divisor+3)^0,c
  2628   000982  ECE7  F011         	call	___lldiv	;wreg free
  2629   000986  500F               	movf	?___lldiv^0,w,c
  2630   000988  6E39               	movwf	EscribeLCD_n32@decena^0,c
  2631                           
  2632                           ;LibLCDXC8.h: 188: unidad=a%10;
  2633   00098A  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  2634   00098E  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  2635   000992  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  2636   000996  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  2637   00099A  0E0A               	movlw	10
  2638   00099C  6E0A               	movwf	___llmod@divisor^0,c
  2639   00099E  0E00               	movlw	0
  2640   0009A0  6E0B               	movwf	(___llmod@divisor+1)^0,c
  2641   0009A2  0E00               	movlw	0
  2642   0009A4  6E0C               	movwf	(___llmod@divisor+2)^0,c
  2643   0009A6  0E00               	movlw	0
  2644   0009A8  6E0D               	movwf	(___llmod@divisor+3)^0,c
  2645   0009AA  ECD8  F012         	call	___llmod	;wreg free
  2646   0009AE  5006               	movf	?___llmod^0,w,c
  2647   0009B0  6E3A               	movwf	EscribeLCD_n32@unidad^0,c
  2648                           
  2649                           ;LibLCDXC8.h: 189: EscribeLCD_c(centena+48);
  2650   0009B2  5037               	movf	EscribeLCD_n32@centena^0,w,c
  2651   0009B4  0F30               	addlw	48
  2652   0009B6  ECC3  F014         	call	_EscribeLCD_c
  2653                           
  2654                           ;LibLCDXC8.h: 190: EscribeLCD_c(decena+48);
  2655   0009BA  5039               	movf	EscribeLCD_n32@decena^0,w,c
  2656   0009BC  0F30               	addlw	48
  2657   0009BE  ECC3  F014         	call	_EscribeLCD_c
  2658                           
  2659                           ;LibLCDXC8.h: 191: EscribeLCD_c(unidad+48);
  2660   0009C2  503A               	movf	EscribeLCD_n32@unidad^0,w,c
  2661   0009C4  0F30               	addlw	48
  2662   0009C6  ECC3  F014         	call	_EscribeLCD_c
  2663                           
  2664                           ;LibLCDXC8.h: 192: break;
  2665   0009CA  0012               	return	
  2666   0009CC                     l2417:
  2667                           
  2668                           ; BSR set to: 0
  2669   0009CC  0E10               	movlw	16
  2670   0009CE  6E0A               	movwf	___llmod@divisor^0,c
  2671   0009D0  0E27               	movlw	39
  2672   0009D2  6E0B               	movwf	(___llmod@divisor+1)^0,c
  2673   0009D4  0E00               	movlw	0
  2674   0009D6  6E0C               	movwf	(___llmod@divisor+2)^0,c
  2675   0009D8  0E00               	movlw	0
  2676   0009DA  6E0D               	movwf	(___llmod@divisor+3)^0,c
  2677   0009DC  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  2678   0009E0  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  2679   0009E4  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  2680   0009E8  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  2681   0009EC  ECD8  F012         	call	___llmod	;wreg free
  2682   0009F0  C006  F00F         	movff	?___llmod,___lldiv@dividend
  2683   0009F4  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  2684   0009F8  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  2685   0009FC  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  2686   000A00  0EE8               	movlw	232
  2687   000A02  6E13               	movwf	___lldiv@divisor^0,c
  2688   000A04  0E03               	movlw	3
  2689   000A06  6E14               	movwf	(___lldiv@divisor+1)^0,c
  2690   000A08  0E00               	movlw	0
  2691   000A0A  6E15               	movwf	(___lldiv@divisor+2)^0,c
  2692   000A0C  0E00               	movlw	0
  2693   000A0E  6E16               	movwf	(___lldiv@divisor+3)^0,c
  2694   000A10  ECE7  F011         	call	___lldiv	;wreg free
  2695   000A14  C00F  F035         	movff	?___lldiv,EscribeLCD_n32@millar
  2696   000A18  C010  F036         	movff	?___lldiv+1,EscribeLCD_n32@millar+1
  2697                           
  2698                           ;LibLCDXC8.h: 194: centena=(a%1000)/100;
  2699   000A1C  0EE8               	movlw	232
  2700   000A1E  6E0A               	movwf	___llmod@divisor^0,c
  2701   000A20  0E03               	movlw	3
  2702   000A22  6E0B               	movwf	(___llmod@divisor+1)^0,c
  2703   000A24  0E00               	movlw	0
  2704   000A26  6E0C               	movwf	(___llmod@divisor+2)^0,c
  2705   000A28  0E00               	movlw	0
  2706   000A2A  6E0D               	movwf	(___llmod@divisor+3)^0,c
  2707   000A2C  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  2708   000A30  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  2709   000A34  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  2710   000A38  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  2711   000A3C  ECD8  F012         	call	___llmod	;wreg free
  2712   000A40  C006  F00F         	movff	?___llmod,___lldiv@dividend
  2713   000A44  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  2714   000A48  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  2715   000A4C  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  2716   000A50  0E64               	movlw	100
  2717   000A52  6E13               	movwf	___lldiv@divisor^0,c
  2718   000A54  0E00               	movlw	0
  2719   000A56  6E14               	movwf	(___lldiv@divisor+1)^0,c
  2720   000A58  0E00               	movlw	0
  2721   000A5A  6E15               	movwf	(___lldiv@divisor+2)^0,c
  2722   000A5C  0E00               	movlw	0
  2723   000A5E  6E16               	movwf	(___lldiv@divisor+3)^0,c
  2724   000A60  ECE7  F011         	call	___lldiv	;wreg free
  2725   000A64  C00F  F037         	movff	?___lldiv,EscribeLCD_n32@centena
  2726   000A68  C010  F038         	movff	?___lldiv+1,EscribeLCD_n32@centena+1
  2727                           
  2728                           ;LibLCDXC8.h: 195: decena=(a%100)/10;
  2729   000A6C  0E64               	movlw	100
  2730   000A6E  6E0A               	movwf	___llmod@divisor^0,c
  2731   000A70  0E00               	movlw	0
  2732   000A72  6E0B               	movwf	(___llmod@divisor+1)^0,c
  2733   000A74  0E00               	movlw	0
  2734   000A76  6E0C               	movwf	(___llmod@divisor+2)^0,c
  2735   000A78  0E00               	movlw	0
  2736   000A7A  6E0D               	movwf	(___llmod@divisor+3)^0,c
  2737   000A7C  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  2738   000A80  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  2739   000A84  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  2740   000A88  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  2741   000A8C  ECD8  F012         	call	___llmod	;wreg free
  2742   000A90  C006  F00F         	movff	?___llmod,___lldiv@dividend
  2743   000A94  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  2744   000A98  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  2745   000A9C  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  2746   000AA0  0E0A               	movlw	10
  2747   000AA2  6E13               	movwf	___lldiv@divisor^0,c
  2748   000AA4  0E00               	movlw	0
  2749   000AA6  6E14               	movwf	(___lldiv@divisor+1)^0,c
  2750   000AA8  0E00               	movlw	0
  2751   000AAA  6E15               	movwf	(___lldiv@divisor+2)^0,c
  2752   000AAC  0E00               	movlw	0
  2753   000AAE  6E16               	movwf	(___lldiv@divisor+3)^0,c
  2754   000AB0  ECE7  F011         	call	___lldiv	;wreg free
  2755   000AB4  500F               	movf	?___lldiv^0,w,c
  2756   000AB6  6E39               	movwf	EscribeLCD_n32@decena^0,c
  2757                           
  2758                           ;LibLCDXC8.h: 196: unidad=a%10;
  2759   000AB8  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  2760   000ABC  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  2761   000AC0  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  2762   000AC4  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  2763   000AC8  0E0A               	movlw	10
  2764   000ACA  6E0A               	movwf	___llmod@divisor^0,c
  2765   000ACC  0E00               	movlw	0
  2766   000ACE  6E0B               	movwf	(___llmod@divisor+1)^0,c
  2767   000AD0  0E00               	movlw	0
  2768   000AD2  6E0C               	movwf	(___llmod@divisor+2)^0,c
  2769   000AD4  0E00               	movlw	0
  2770   000AD6  6E0D               	movwf	(___llmod@divisor+3)^0,c
  2771   000AD8  ECD8  F012         	call	___llmod	;wreg free
  2772   000ADC  5006               	movf	?___llmod^0,w,c
  2773   000ADE  6E3A               	movwf	EscribeLCD_n32@unidad^0,c
  2774                           
  2775                           ;LibLCDXC8.h: 197: EscribeLCD_c(millar+48);
  2776   000AE0  5035               	movf	EscribeLCD_n32@millar^0,w,c
  2777   000AE2  0F30               	addlw	48
  2778   000AE4  ECC3  F014         	call	_EscribeLCD_c
  2779                           
  2780                           ;LibLCDXC8.h: 198: EscribeLCD_c(centena+48);
  2781   000AE8  5037               	movf	EscribeLCD_n32@centena^0,w,c
  2782   000AEA  0F30               	addlw	48
  2783   000AEC  ECC3  F014         	call	_EscribeLCD_c
  2784                           
  2785                           ;LibLCDXC8.h: 199: EscribeLCD_c(decena+48);
  2786   000AF0  5039               	movf	EscribeLCD_n32@decena^0,w,c
  2787   000AF2  0F30               	addlw	48
  2788   000AF4  ECC3  F014         	call	_EscribeLCD_c
  2789                           
  2790                           ;LibLCDXC8.h: 200: EscribeLCD_c(unidad+48);
  2791   000AF8  503A               	movf	EscribeLCD_n32@unidad^0,w,c
  2792   000AFA  0F30               	addlw	48
  2793   000AFC  ECC3  F014         	call	_EscribeLCD_c
  2794                           
  2795                           ;LibLCDXC8.h: 201: break;
  2796   000B00  0012               	return	
  2797   000B02                     l2419:
  2798                           
  2799                           ; BSR set to: 0
  2800   000B02  0EA0               	movlw	160
  2801   000B04  6E0A               	movwf	___llmod@divisor^0,c
  2802   000B06  0E86               	movlw	134
  2803   000B08  6E0B               	movwf	(___llmod@divisor+1)^0,c
  2804   000B0A  0E01               	movlw	1
  2805   000B0C  6E0C               	movwf	(___llmod@divisor+2)^0,c
  2806   000B0E  0E00               	movlw	0
  2807   000B10  6E0D               	movwf	(___llmod@divisor+3)^0,c
  2808   000B12  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  2809   000B16  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  2810   000B1A  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  2811   000B1E  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  2812   000B22  ECD8  F012         	call	___llmod	;wreg free
  2813   000B26  C006  F00F         	movff	?___llmod,___lldiv@dividend
  2814   000B2A  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  2815   000B2E  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  2816   000B32  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  2817   000B36  0E10               	movlw	16
  2818   000B38  6E13               	movwf	___lldiv@divisor^0,c
  2819   000B3A  0E27               	movlw	39
  2820   000B3C  6E14               	movwf	(___lldiv@divisor+1)^0,c
  2821   000B3E  0E00               	movlw	0
  2822   000B40  6E15               	movwf	(___lldiv@divisor+2)^0,c
  2823   000B42  0E00               	movlw	0
  2824   000B44  6E16               	movwf	(___lldiv@divisor+3)^0,c
  2825   000B46  ECE7  F011         	call	___lldiv	;wreg free
  2826   000B4A  C00F  F031         	movff	?___lldiv,EscribeLCD_n32@diezmil
  2827   000B4E  C010  F032         	movff	?___lldiv+1,EscribeLCD_n32@diezmil+1
  2828   000B52  C011  F033         	movff	?___lldiv+2,EscribeLCD_n32@diezmil+2
  2829   000B56  C012  F034         	movff	?___lldiv+3,EscribeLCD_n32@diezmil+3
  2830                           
  2831                           ;LibLCDXC8.h: 203: millar=(a%10000)/1000;
  2832   000B5A  0E10               	movlw	16
  2833   000B5C  6E0A               	movwf	___llmod@divisor^0,c
  2834   000B5E  0E27               	movlw	39
  2835   000B60  6E0B               	movwf	(___llmod@divisor+1)^0,c
  2836   000B62  0E00               	movlw	0
  2837   000B64  6E0C               	movwf	(___llmod@divisor+2)^0,c
  2838   000B66  0E00               	movlw	0
  2839   000B68  6E0D               	movwf	(___llmod@divisor+3)^0,c
  2840   000B6A  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  2841   000B6E  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  2842   000B72  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  2843   000B76  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  2844   000B7A  ECD8  F012         	call	___llmod	;wreg free
  2845   000B7E  C006  F00F         	movff	?___llmod,___lldiv@dividend
  2846   000B82  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  2847   000B86  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  2848   000B8A  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  2849   000B8E  0EE8               	movlw	232
  2850   000B90  6E13               	movwf	___lldiv@divisor^0,c
  2851   000B92  0E03               	movlw	3
  2852   000B94  6E14               	movwf	(___lldiv@divisor+1)^0,c
  2853   000B96  0E00               	movlw	0
  2854   000B98  6E15               	movwf	(___lldiv@divisor+2)^0,c
  2855   000B9A  0E00               	movlw	0
  2856   000B9C  6E16               	movwf	(___lldiv@divisor+3)^0,c
  2857   000B9E  ECE7  F011         	call	___lldiv	;wreg free
  2858   000BA2  C00F  F035         	movff	?___lldiv,EscribeLCD_n32@millar
  2859   000BA6  C010  F036         	movff	?___lldiv+1,EscribeLCD_n32@millar+1
  2860                           
  2861                           ;LibLCDXC8.h: 204: centena=(a%1000)/100;
  2862   000BAA  0EE8               	movlw	232
  2863   000BAC  6E0A               	movwf	___llmod@divisor^0,c
  2864   000BAE  0E03               	movlw	3
  2865   000BB0  6E0B               	movwf	(___llmod@divisor+1)^0,c
  2866   000BB2  0E00               	movlw	0
  2867   000BB4  6E0C               	movwf	(___llmod@divisor+2)^0,c
  2868   000BB6  0E00               	movlw	0
  2869   000BB8  6E0D               	movwf	(___llmod@divisor+3)^0,c
  2870   000BBA  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  2871   000BBE  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  2872   000BC2  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  2873   000BC6  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  2874   000BCA  ECD8  F012         	call	___llmod	;wreg free
  2875   000BCE  C006  F00F         	movff	?___llmod,___lldiv@dividend
  2876   000BD2  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  2877   000BD6  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  2878   000BDA  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  2879   000BDE  0E64               	movlw	100
  2880   000BE0  6E13               	movwf	___lldiv@divisor^0,c
  2881   000BE2  0E00               	movlw	0
  2882   000BE4  6E14               	movwf	(___lldiv@divisor+1)^0,c
  2883   000BE6  0E00               	movlw	0
  2884   000BE8  6E15               	movwf	(___lldiv@divisor+2)^0,c
  2885   000BEA  0E00               	movlw	0
  2886   000BEC  6E16               	movwf	(___lldiv@divisor+3)^0,c
  2887   000BEE  ECE7  F011         	call	___lldiv	;wreg free
  2888   000BF2  C00F  F037         	movff	?___lldiv,EscribeLCD_n32@centena
  2889   000BF6  C010  F038         	movff	?___lldiv+1,EscribeLCD_n32@centena+1
  2890                           
  2891                           ;LibLCDXC8.h: 205: decena=(a%100)/10;
  2892   000BFA  0E64               	movlw	100
  2893   000BFC  6E0A               	movwf	___llmod@divisor^0,c
  2894   000BFE  0E00               	movlw	0
  2895   000C00  6E0B               	movwf	(___llmod@divisor+1)^0,c
  2896   000C02  0E00               	movlw	0
  2897   000C04  6E0C               	movwf	(___llmod@divisor+2)^0,c
  2898   000C06  0E00               	movlw	0
  2899   000C08  6E0D               	movwf	(___llmod@divisor+3)^0,c
  2900   000C0A  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  2901   000C0E  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  2902   000C12  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  2903   000C16  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  2904   000C1A  ECD8  F012         	call	___llmod	;wreg free
  2905   000C1E  C006  F00F         	movff	?___llmod,___lldiv@dividend
  2906   000C22  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  2907   000C26  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  2908   000C2A  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  2909   000C2E  0E0A               	movlw	10
  2910   000C30  6E13               	movwf	___lldiv@divisor^0,c
  2911   000C32  0E00               	movlw	0
  2912   000C34  6E14               	movwf	(___lldiv@divisor+1)^0,c
  2913   000C36  0E00               	movlw	0
  2914   000C38  6E15               	movwf	(___lldiv@divisor+2)^0,c
  2915   000C3A  0E00               	movlw	0
  2916   000C3C  6E16               	movwf	(___lldiv@divisor+3)^0,c
  2917   000C3E  ECE7  F011         	call	___lldiv	;wreg free
  2918   000C42  500F               	movf	?___lldiv^0,w,c
  2919   000C44  6E39               	movwf	EscribeLCD_n32@decena^0,c
  2920                           
  2921                           ;LibLCDXC8.h: 206: unidad=a%10;
  2922   000C46  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  2923   000C4A  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  2924   000C4E  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  2925   000C52  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  2926   000C56  0E0A               	movlw	10
  2927   000C58  6E0A               	movwf	___llmod@divisor^0,c
  2928   000C5A  0E00               	movlw	0
  2929   000C5C  6E0B               	movwf	(___llmod@divisor+1)^0,c
  2930   000C5E  0E00               	movlw	0
  2931   000C60  6E0C               	movwf	(___llmod@divisor+2)^0,c
  2932   000C62  0E00               	movlw	0
  2933   000C64  6E0D               	movwf	(___llmod@divisor+3)^0,c
  2934   000C66  ECD8  F012         	call	___llmod	;wreg free
  2935   000C6A  5006               	movf	?___llmod^0,w,c
  2936   000C6C  6E3A               	movwf	EscribeLCD_n32@unidad^0,c
  2937                           
  2938                           ;LibLCDXC8.h: 207: EscribeLCD_c(diezmil+48);
  2939   000C6E  5031               	movf	EscribeLCD_n32@diezmil^0,w,c
  2940   000C70  0F30               	addlw	48
  2941   000C72  ECC3  F014         	call	_EscribeLCD_c
  2942                           
  2943                           ;LibLCDXC8.h: 208: EscribeLCD_c(millar+48);
  2944   000C76  5035               	movf	EscribeLCD_n32@millar^0,w,c
  2945   000C78  0F30               	addlw	48
  2946   000C7A  ECC3  F014         	call	_EscribeLCD_c
  2947                           
  2948                           ;LibLCDXC8.h: 209: EscribeLCD_c(centena+48);
  2949   000C7E  5037               	movf	EscribeLCD_n32@centena^0,w,c
  2950   000C80  0F30               	addlw	48
  2951   000C82  ECC3  F014         	call	_EscribeLCD_c
  2952                           
  2953                           ;LibLCDXC8.h: 210: EscribeLCD_c(decena+48);
  2954   000C86  5039               	movf	EscribeLCD_n32@decena^0,w,c
  2955   000C88  0F30               	addlw	48
  2956   000C8A  ECC3  F014         	call	_EscribeLCD_c
  2957                           
  2958                           ;LibLCDXC8.h: 211: EscribeLCD_c(unidad+48);
  2959   000C8E  503A               	movf	EscribeLCD_n32@unidad^0,w,c
  2960   000C90  0F30               	addlw	48
  2961   000C92  ECC3  F014         	call	_EscribeLCD_c
  2962                           
  2963                           ;LibLCDXC8.h: 212: break;
  2964   000C96  0012               	return	
  2965   000C98                     l2421:
  2966                           
  2967                           ; BSR set to: 0
  2968   000C98  0E40               	movlw	64
  2969   000C9A  6E0A               	movwf	___llmod@divisor^0,c
  2970   000C9C  0E42               	movlw	66
  2971   000C9E  6E0B               	movwf	(___llmod@divisor+1)^0,c
  2972   000CA0  0E0F               	movlw	15
  2973   000CA2  6E0C               	movwf	(___llmod@divisor+2)^0,c
  2974   000CA4  0E00               	movlw	0
  2975   000CA6  6E0D               	movwf	(___llmod@divisor+3)^0,c
  2976   000CA8  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  2977   000CAC  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  2978   000CB0  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  2979   000CB4  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  2980   000CB8  ECD8  F012         	call	___llmod	;wreg free
  2981   000CBC  C006  F00F         	movff	?___llmod,___lldiv@dividend
  2982   000CC0  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  2983   000CC4  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  2984   000CC8  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  2985   000CCC  0EA0               	movlw	160
  2986   000CCE  6E13               	movwf	___lldiv@divisor^0,c
  2987   000CD0  0E86               	movlw	134
  2988   000CD2  6E14               	movwf	(___lldiv@divisor+1)^0,c
  2989   000CD4  0E01               	movlw	1
  2990   000CD6  6E15               	movwf	(___lldiv@divisor+2)^0,c
  2991   000CD8  0E00               	movlw	0
  2992   000CDA  6E16               	movwf	(___lldiv@divisor+3)^0,c
  2993   000CDC  ECE7  F011         	call	___lldiv	;wreg free
  2994   000CE0  C00F  F02D         	movff	?___lldiv,EscribeLCD_n32@cienmil
  2995   000CE4  C010  F02E         	movff	?___lldiv+1,EscribeLCD_n32@cienmil+1
  2996   000CE8  C011  F02F         	movff	?___lldiv+2,EscribeLCD_n32@cienmil+2
  2997   000CEC  C012  F030         	movff	?___lldiv+3,EscribeLCD_n32@cienmil+3
  2998                           
  2999                           ;LibLCDXC8.h: 215: diezmil=(a%100000)/10000;
  3000   000CF0  0EA0               	movlw	160
  3001   000CF2  6E0A               	movwf	___llmod@divisor^0,c
  3002   000CF4  0E86               	movlw	134
  3003   000CF6  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3004   000CF8  0E01               	movlw	1
  3005   000CFA  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3006   000CFC  0E00               	movlw	0
  3007   000CFE  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3008   000D00  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3009   000D04  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3010   000D08  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3011   000D0C  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3012   000D10  ECD8  F012         	call	___llmod	;wreg free
  3013   000D14  C006  F00F         	movff	?___llmod,___lldiv@dividend
  3014   000D18  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  3015   000D1C  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  3016   000D20  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  3017   000D24  0E10               	movlw	16
  3018   000D26  6E13               	movwf	___lldiv@divisor^0,c
  3019   000D28  0E27               	movlw	39
  3020   000D2A  6E14               	movwf	(___lldiv@divisor+1)^0,c
  3021   000D2C  0E00               	movlw	0
  3022   000D2E  6E15               	movwf	(___lldiv@divisor+2)^0,c
  3023   000D30  0E00               	movlw	0
  3024   000D32  6E16               	movwf	(___lldiv@divisor+3)^0,c
  3025   000D34  ECE7  F011         	call	___lldiv	;wreg free
  3026   000D38  C00F  F031         	movff	?___lldiv,EscribeLCD_n32@diezmil
  3027   000D3C  C010  F032         	movff	?___lldiv+1,EscribeLCD_n32@diezmil+1
  3028   000D40  C011  F033         	movff	?___lldiv+2,EscribeLCD_n32@diezmil+2
  3029   000D44  C012  F034         	movff	?___lldiv+3,EscribeLCD_n32@diezmil+3
  3030                           
  3031                           ;LibLCDXC8.h: 216: millar=(a%10000)/1000;
  3032   000D48  0E10               	movlw	16
  3033   000D4A  6E0A               	movwf	___llmod@divisor^0,c
  3034   000D4C  0E27               	movlw	39
  3035   000D4E  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3036   000D50  0E00               	movlw	0
  3037   000D52  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3038   000D54  0E00               	movlw	0
  3039   000D56  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3040   000D58  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3041   000D5C  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3042   000D60  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3043   000D64  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3044   000D68  ECD8  F012         	call	___llmod	;wreg free
  3045   000D6C  C006  F00F         	movff	?___llmod,___lldiv@dividend
  3046   000D70  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  3047   000D74  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  3048   000D78  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  3049   000D7C  0EE8               	movlw	232
  3050   000D7E  6E13               	movwf	___lldiv@divisor^0,c
  3051   000D80  0E03               	movlw	3
  3052   000D82  6E14               	movwf	(___lldiv@divisor+1)^0,c
  3053   000D84  0E00               	movlw	0
  3054   000D86  6E15               	movwf	(___lldiv@divisor+2)^0,c
  3055   000D88  0E00               	movlw	0
  3056   000D8A  6E16               	movwf	(___lldiv@divisor+3)^0,c
  3057   000D8C  ECE7  F011         	call	___lldiv	;wreg free
  3058   000D90  C00F  F035         	movff	?___lldiv,EscribeLCD_n32@millar
  3059   000D94  C010  F036         	movff	?___lldiv+1,EscribeLCD_n32@millar+1
  3060                           
  3061                           ;LibLCDXC8.h: 217: centena=(a%1000)/100;
  3062   000D98  0EE8               	movlw	232
  3063   000D9A  6E0A               	movwf	___llmod@divisor^0,c
  3064   000D9C  0E03               	movlw	3
  3065   000D9E  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3066   000DA0  0E00               	movlw	0
  3067   000DA2  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3068   000DA4  0E00               	movlw	0
  3069   000DA6  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3070   000DA8  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3071   000DAC  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3072   000DB0  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3073   000DB4  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3074   000DB8  ECD8  F012         	call	___llmod	;wreg free
  3075   000DBC  C006  F00F         	movff	?___llmod,___lldiv@dividend
  3076   000DC0  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  3077   000DC4  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  3078   000DC8  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  3079   000DCC  0E64               	movlw	100
  3080   000DCE  6E13               	movwf	___lldiv@divisor^0,c
  3081   000DD0  0E00               	movlw	0
  3082   000DD2  6E14               	movwf	(___lldiv@divisor+1)^0,c
  3083   000DD4  0E00               	movlw	0
  3084   000DD6  6E15               	movwf	(___lldiv@divisor+2)^0,c
  3085   000DD8  0E00               	movlw	0
  3086   000DDA  6E16               	movwf	(___lldiv@divisor+3)^0,c
  3087   000DDC  ECE7  F011         	call	___lldiv	;wreg free
  3088   000DE0  C00F  F037         	movff	?___lldiv,EscribeLCD_n32@centena
  3089   000DE4  C010  F038         	movff	?___lldiv+1,EscribeLCD_n32@centena+1
  3090                           
  3091                           ;LibLCDXC8.h: 218: decena=(a%100)/10;
  3092   000DE8  0E64               	movlw	100
  3093   000DEA  6E0A               	movwf	___llmod@divisor^0,c
  3094   000DEC  0E00               	movlw	0
  3095   000DEE  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3096   000DF0  0E00               	movlw	0
  3097   000DF2  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3098   000DF4  0E00               	movlw	0
  3099   000DF6  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3100   000DF8  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3101   000DFC  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3102   000E00  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3103   000E04  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3104   000E08  ECD8  F012         	call	___llmod	;wreg free
  3105   000E0C  C006  F00F         	movff	?___llmod,___lldiv@dividend
  3106   000E10  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  3107   000E14  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  3108   000E18  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  3109   000E1C  0E0A               	movlw	10
  3110   000E1E  6E13               	movwf	___lldiv@divisor^0,c
  3111   000E20  0E00               	movlw	0
  3112   000E22  6E14               	movwf	(___lldiv@divisor+1)^0,c
  3113   000E24  0E00               	movlw	0
  3114   000E26  6E15               	movwf	(___lldiv@divisor+2)^0,c
  3115   000E28  0E00               	movlw	0
  3116   000E2A  6E16               	movwf	(___lldiv@divisor+3)^0,c
  3117   000E2C  ECE7  F011         	call	___lldiv	;wreg free
  3118   000E30  500F               	movf	?___lldiv^0,w,c
  3119   000E32  6E39               	movwf	EscribeLCD_n32@decena^0,c
  3120                           
  3121                           ;LibLCDXC8.h: 219: unidad=a%10;
  3122   000E34  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3123   000E38  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3124   000E3C  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3125   000E40  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3126   000E44  0E0A               	movlw	10
  3127   000E46  6E0A               	movwf	___llmod@divisor^0,c
  3128   000E48  0E00               	movlw	0
  3129   000E4A  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3130   000E4C  0E00               	movlw	0
  3131   000E4E  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3132   000E50  0E00               	movlw	0
  3133   000E52  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3134   000E54  ECD8  F012         	call	___llmod	;wreg free
  3135   000E58  5006               	movf	?___llmod^0,w,c
  3136   000E5A  6E3A               	movwf	EscribeLCD_n32@unidad^0,c
  3137                           
  3138                           ;LibLCDXC8.h: 220: EscribeLCD_c(cienmil+48);
  3139   000E5C  502D               	movf	EscribeLCD_n32@cienmil^0,w,c
  3140   000E5E  0F30               	addlw	48
  3141   000E60  ECC3  F014         	call	_EscribeLCD_c
  3142                           
  3143                           ;LibLCDXC8.h: 221: EscribeLCD_c(diezmil+48);
  3144   000E64  5031               	movf	EscribeLCD_n32@diezmil^0,w,c
  3145   000E66  0F30               	addlw	48
  3146   000E68  ECC3  F014         	call	_EscribeLCD_c
  3147                           
  3148                           ;LibLCDXC8.h: 222: EscribeLCD_c(millar+48);
  3149   000E6C  5035               	movf	EscribeLCD_n32@millar^0,w,c
  3150   000E6E  0F30               	addlw	48
  3151   000E70  ECC3  F014         	call	_EscribeLCD_c
  3152                           
  3153                           ;LibLCDXC8.h: 223: EscribeLCD_c(centena+48);
  3154   000E74  5037               	movf	EscribeLCD_n32@centena^0,w,c
  3155   000E76  0F30               	addlw	48
  3156   000E78  ECC3  F014         	call	_EscribeLCD_c
  3157                           
  3158                           ;LibLCDXC8.h: 224: EscribeLCD_c(decena+48);
  3159   000E7C  5039               	movf	EscribeLCD_n32@decena^0,w,c
  3160   000E7E  0F30               	addlw	48
  3161   000E80  ECC3  F014         	call	_EscribeLCD_c
  3162                           
  3163                           ;LibLCDXC8.h: 225: EscribeLCD_c(unidad+48);
  3164   000E84  503A               	movf	EscribeLCD_n32@unidad^0,w,c
  3165   000E86  0F30               	addlw	48
  3166   000E88  ECC3  F014         	call	_EscribeLCD_c
  3167                           
  3168                           ;LibLCDXC8.h: 226: break;
  3169   000E8C  0012               	return	
  3170   000E8E                     l2423:
  3171                           
  3172                           ; BSR set to: 0
  3173   000E8E  0E80               	movlw	128
  3174   000E90  6E0A               	movwf	___llmod@divisor^0,c
  3175   000E92  0E96               	movlw	150
  3176   000E94  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3177   000E96  0E98               	movlw	152
  3178   000E98  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3179   000E9A  0E00               	movlw	0
  3180   000E9C  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3181   000E9E  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3182   000EA2  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3183   000EA6  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3184   000EAA  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3185   000EAE  ECD8  F012         	call	___llmod	;wreg free
  3186   000EB2  C006  F00F         	movff	?___llmod,___lldiv@dividend
  3187   000EB6  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  3188   000EBA  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  3189   000EBE  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  3190   000EC2  0E40               	movlw	64
  3191   000EC4  6E13               	movwf	___lldiv@divisor^0,c
  3192   000EC6  0E42               	movlw	66
  3193   000EC8  6E14               	movwf	(___lldiv@divisor+1)^0,c
  3194   000ECA  0E0F               	movlw	15
  3195   000ECC  6E15               	movwf	(___lldiv@divisor+2)^0,c
  3196   000ECE  0E00               	movlw	0
  3197   000ED0  6E16               	movwf	(___lldiv@divisor+3)^0,c
  3198   000ED2  ECE7  F011         	call	___lldiv	;wreg free
  3199   000ED6  C00F  F029         	movff	?___lldiv,EscribeLCD_n32@millon
  3200   000EDA  C010  F02A         	movff	?___lldiv+1,EscribeLCD_n32@millon+1
  3201   000EDE  C011  F02B         	movff	?___lldiv+2,EscribeLCD_n32@millon+2
  3202   000EE2  C012  F02C         	movff	?___lldiv+3,EscribeLCD_n32@millon+3
  3203                           
  3204                           ;LibLCDXC8.h: 229: cienmil=(a%1000000)/100000;
  3205   000EE6  0E40               	movlw	64
  3206   000EE8  6E0A               	movwf	___llmod@divisor^0,c
  3207   000EEA  0E42               	movlw	66
  3208   000EEC  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3209   000EEE  0E0F               	movlw	15
  3210   000EF0  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3211   000EF2  0E00               	movlw	0
  3212   000EF4  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3213   000EF6  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3214   000EFA  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3215   000EFE  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3216   000F02  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3217   000F06  ECD8  F012         	call	___llmod	;wreg free
  3218   000F0A  C006  F00F         	movff	?___llmod,___lldiv@dividend
  3219   000F0E  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  3220   000F12  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  3221   000F16  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  3222   000F1A  0EA0               	movlw	160
  3223   000F1C  6E13               	movwf	___lldiv@divisor^0,c
  3224   000F1E  0E86               	movlw	134
  3225   000F20  6E14               	movwf	(___lldiv@divisor+1)^0,c
  3226   000F22  0E01               	movlw	1
  3227   000F24  6E15               	movwf	(___lldiv@divisor+2)^0,c
  3228   000F26  0E00               	movlw	0
  3229   000F28  6E16               	movwf	(___lldiv@divisor+3)^0,c
  3230   000F2A  ECE7  F011         	call	___lldiv	;wreg free
  3231   000F2E  C00F  F02D         	movff	?___lldiv,EscribeLCD_n32@cienmil
  3232   000F32  C010  F02E         	movff	?___lldiv+1,EscribeLCD_n32@cienmil+1
  3233   000F36  C011  F02F         	movff	?___lldiv+2,EscribeLCD_n32@cienmil+2
  3234   000F3A  C012  F030         	movff	?___lldiv+3,EscribeLCD_n32@cienmil+3
  3235                           
  3236                           ;LibLCDXC8.h: 230: diezmil=(a%100000)/10000;
  3237   000F3E  0EA0               	movlw	160
  3238   000F40  6E0A               	movwf	___llmod@divisor^0,c
  3239   000F42  0E86               	movlw	134
  3240   000F44  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3241   000F46  0E01               	movlw	1
  3242   000F48  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3243   000F4A  0E00               	movlw	0
  3244   000F4C  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3245   000F4E  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3246   000F52  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3247   000F56  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3248   000F5A  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3249   000F5E  ECD8  F012         	call	___llmod	;wreg free
  3250   000F62  C006  F00F         	movff	?___llmod,___lldiv@dividend
  3251   000F66  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  3252   000F6A  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  3253   000F6E  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  3254   000F72  0E10               	movlw	16
  3255   000F74  6E13               	movwf	___lldiv@divisor^0,c
  3256   000F76  0E27               	movlw	39
  3257   000F78  6E14               	movwf	(___lldiv@divisor+1)^0,c
  3258   000F7A  0E00               	movlw	0
  3259   000F7C  6E15               	movwf	(___lldiv@divisor+2)^0,c
  3260   000F7E  0E00               	movlw	0
  3261   000F80  6E16               	movwf	(___lldiv@divisor+3)^0,c
  3262   000F82  ECE7  F011         	call	___lldiv	;wreg free
  3263   000F86  C00F  F031         	movff	?___lldiv,EscribeLCD_n32@diezmil
  3264   000F8A  C010  F032         	movff	?___lldiv+1,EscribeLCD_n32@diezmil+1
  3265   000F8E  C011  F033         	movff	?___lldiv+2,EscribeLCD_n32@diezmil+2
  3266   000F92  C012  F034         	movff	?___lldiv+3,EscribeLCD_n32@diezmil+3
  3267                           
  3268                           ;LibLCDXC8.h: 231: millar=(a%10000)/1000;
  3269   000F96  0E10               	movlw	16
  3270   000F98  6E0A               	movwf	___llmod@divisor^0,c
  3271   000F9A  0E27               	movlw	39
  3272   000F9C  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3273   000F9E  0E00               	movlw	0
  3274   000FA0  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3275   000FA2  0E00               	movlw	0
  3276   000FA4  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3277   000FA6  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3278   000FAA  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3279   000FAE  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3280   000FB2  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3281   000FB6  ECD8  F012         	call	___llmod	;wreg free
  3282   000FBA  C006  F00F         	movff	?___llmod,___lldiv@dividend
  3283   000FBE  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  3284   000FC2  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  3285   000FC6  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  3286   000FCA  0EE8               	movlw	232
  3287   000FCC  6E13               	movwf	___lldiv@divisor^0,c
  3288   000FCE  0E03               	movlw	3
  3289   000FD0  6E14               	movwf	(___lldiv@divisor+1)^0,c
  3290   000FD2  0E00               	movlw	0
  3291   000FD4  6E15               	movwf	(___lldiv@divisor+2)^0,c
  3292   000FD6  0E00               	movlw	0
  3293   000FD8  6E16               	movwf	(___lldiv@divisor+3)^0,c
  3294   000FDA  ECE7  F011         	call	___lldiv	;wreg free
  3295   000FDE  C00F  F035         	movff	?___lldiv,EscribeLCD_n32@millar
  3296   000FE2  C010  F036         	movff	?___lldiv+1,EscribeLCD_n32@millar+1
  3297                           
  3298                           ;LibLCDXC8.h: 232: centena=(a%1000)/100;
  3299   000FE6  0EE8               	movlw	232
  3300   000FE8  6E0A               	movwf	___llmod@divisor^0,c
  3301   000FEA  0E03               	movlw	3
  3302   000FEC  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3303   000FEE  0E00               	movlw	0
  3304   000FF0  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3305   000FF2  0E00               	movlw	0
  3306   000FF4  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3307   000FF6  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3308   000FFA  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3309   000FFE  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3310   001002  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3311   001006  ECD8  F012         	call	___llmod	;wreg free
  3312   00100A  C006  F00F         	movff	?___llmod,___lldiv@dividend
  3313   00100E  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  3314   001012  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  3315   001016  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  3316   00101A  0E64               	movlw	100
  3317   00101C  6E13               	movwf	___lldiv@divisor^0,c
  3318   00101E  0E00               	movlw	0
  3319   001020  6E14               	movwf	(___lldiv@divisor+1)^0,c
  3320   001022  0E00               	movlw	0
  3321   001024  6E15               	movwf	(___lldiv@divisor+2)^0,c
  3322   001026  0E00               	movlw	0
  3323   001028  6E16               	movwf	(___lldiv@divisor+3)^0,c
  3324   00102A  ECE7  F011         	call	___lldiv	;wreg free
  3325   00102E  C00F  F037         	movff	?___lldiv,EscribeLCD_n32@centena
  3326   001032  C010  F038         	movff	?___lldiv+1,EscribeLCD_n32@centena+1
  3327                           
  3328                           ;LibLCDXC8.h: 233: decena=(a%100)/10;
  3329   001036  0E64               	movlw	100
  3330   001038  6E0A               	movwf	___llmod@divisor^0,c
  3331   00103A  0E00               	movlw	0
  3332   00103C  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3333   00103E  0E00               	movlw	0
  3334   001040  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3335   001042  0E00               	movlw	0
  3336   001044  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3337   001046  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3338   00104A  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3339   00104E  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3340   001052  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3341   001056  ECD8  F012         	call	___llmod	;wreg free
  3342   00105A  C006  F00F         	movff	?___llmod,___lldiv@dividend
  3343   00105E  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  3344   001062  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  3345   001066  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  3346   00106A  0E0A               	movlw	10
  3347   00106C  6E13               	movwf	___lldiv@divisor^0,c
  3348   00106E  0E00               	movlw	0
  3349   001070  6E14               	movwf	(___lldiv@divisor+1)^0,c
  3350   001072  0E00               	movlw	0
  3351   001074  6E15               	movwf	(___lldiv@divisor+2)^0,c
  3352   001076  0E00               	movlw	0
  3353   001078  6E16               	movwf	(___lldiv@divisor+3)^0,c
  3354   00107A  ECE7  F011         	call	___lldiv	;wreg free
  3355   00107E  500F               	movf	?___lldiv^0,w,c
  3356   001080  6E39               	movwf	EscribeLCD_n32@decena^0,c
  3357                           
  3358                           ;LibLCDXC8.h: 234: unidad=a%10;
  3359   001082  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3360   001086  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3361   00108A  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3362   00108E  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3363   001092  0E0A               	movlw	10
  3364   001094  6E0A               	movwf	___llmod@divisor^0,c
  3365   001096  0E00               	movlw	0
  3366   001098  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3367   00109A  0E00               	movlw	0
  3368   00109C  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3369   00109E  0E00               	movlw	0
  3370   0010A0  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3371   0010A2  ECD8  F012         	call	___llmod	;wreg free
  3372   0010A6  5006               	movf	?___llmod^0,w,c
  3373   0010A8  6E3A               	movwf	EscribeLCD_n32@unidad^0,c
  3374                           
  3375                           ;LibLCDXC8.h: 235: EscribeLCD_c(millon+48);
  3376   0010AA  5029               	movf	EscribeLCD_n32@millon^0,w,c
  3377   0010AC  0F30               	addlw	48
  3378   0010AE  ECC3  F014         	call	_EscribeLCD_c
  3379                           
  3380                           ;LibLCDXC8.h: 236: EscribeLCD_c(cienmil+48);
  3381   0010B2  502D               	movf	EscribeLCD_n32@cienmil^0,w,c
  3382   0010B4  0F30               	addlw	48
  3383   0010B6  ECC3  F014         	call	_EscribeLCD_c
  3384                           
  3385                           ;LibLCDXC8.h: 237: EscribeLCD_c(diezmil+48);
  3386   0010BA  5031               	movf	EscribeLCD_n32@diezmil^0,w,c
  3387   0010BC  0F30               	addlw	48
  3388   0010BE  ECC3  F014         	call	_EscribeLCD_c
  3389                           
  3390                           ;LibLCDXC8.h: 238: EscribeLCD_c(millar+48);
  3391   0010C2  5035               	movf	EscribeLCD_n32@millar^0,w,c
  3392   0010C4  0F30               	addlw	48
  3393   0010C6  ECC3  F014         	call	_EscribeLCD_c
  3394                           
  3395                           ;LibLCDXC8.h: 239: EscribeLCD_c(centena+48);
  3396   0010CA  5037               	movf	EscribeLCD_n32@centena^0,w,c
  3397   0010CC  0F30               	addlw	48
  3398   0010CE  ECC3  F014         	call	_EscribeLCD_c
  3399                           
  3400                           ;LibLCDXC8.h: 240: EscribeLCD_c(decena+48);
  3401   0010D2  5039               	movf	EscribeLCD_n32@decena^0,w,c
  3402   0010D4  0F30               	addlw	48
  3403   0010D6  ECC3  F014         	call	_EscribeLCD_c
  3404                           
  3405                           ;LibLCDXC8.h: 241: EscribeLCD_c(unidad+48);
  3406   0010DA  503A               	movf	EscribeLCD_n32@unidad^0,w,c
  3407   0010DC  0F30               	addlw	48
  3408   0010DE  ECC3  F014         	call	_EscribeLCD_c
  3409                           
  3410                           ;LibLCDXC8.h: 242: break;
  3411   0010E2  0012               	return	
  3412   0010E4                     l2425:
  3413                           
  3414                           ; BSR set to: 0
  3415   0010E4  0E00               	movlw	0
  3416   0010E6  6E0A               	movwf	___llmod@divisor^0,c
  3417   0010E8  0EE1               	movlw	225
  3418   0010EA  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3419   0010EC  0EF5               	movlw	245
  3420   0010EE  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3421   0010F0  0E05               	movlw	5
  3422   0010F2  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3423   0010F4  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3424   0010F8  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3425   0010FC  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3426   001100  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3427   001104  ECD8  F012         	call	___llmod	;wreg free
  3428   001108  C006  F00F         	movff	?___llmod,___lldiv@dividend
  3429   00110C  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  3430   001110  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  3431   001114  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  3432   001118  0E80               	movlw	128
  3433   00111A  6E13               	movwf	___lldiv@divisor^0,c
  3434   00111C  0E96               	movlw	150
  3435   00111E  6E14               	movwf	(___lldiv@divisor+1)^0,c
  3436   001120  0E98               	movlw	152
  3437   001122  6E15               	movwf	(___lldiv@divisor+2)^0,c
  3438   001124  0E00               	movlw	0
  3439   001126  6E16               	movwf	(___lldiv@divisor+3)^0,c
  3440   001128  ECE7  F011         	call	___lldiv	;wreg free
  3441   00112C  C00F  F025         	movff	?___lldiv,EscribeLCD_n32@diezmillon
  3442   001130  C010  F026         	movff	?___lldiv+1,EscribeLCD_n32@diezmillon+1
  3443   001134  C011  F027         	movff	?___lldiv+2,EscribeLCD_n32@diezmillon+2
  3444   001138  C012  F028         	movff	?___lldiv+3,EscribeLCD_n32@diezmillon+3
  3445                           
  3446                           ;LibLCDXC8.h: 246: millon=(a%10000000)/1000000;
  3447   00113C  0E80               	movlw	128
  3448   00113E  6E0A               	movwf	___llmod@divisor^0,c
  3449   001140  0E96               	movlw	150
  3450   001142  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3451   001144  0E98               	movlw	152
  3452   001146  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3453   001148  0E00               	movlw	0
  3454   00114A  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3455   00114C  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3456   001150  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3457   001154  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3458   001158  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3459   00115C  ECD8  F012         	call	___llmod	;wreg free
  3460   001160  C006  F00F         	movff	?___llmod,___lldiv@dividend
  3461   001164  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  3462   001168  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  3463   00116C  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  3464   001170  0E40               	movlw	64
  3465   001172  6E13               	movwf	___lldiv@divisor^0,c
  3466   001174  0E42               	movlw	66
  3467   001176  6E14               	movwf	(___lldiv@divisor+1)^0,c
  3468   001178  0E0F               	movlw	15
  3469   00117A  6E15               	movwf	(___lldiv@divisor+2)^0,c
  3470   00117C  0E00               	movlw	0
  3471   00117E  6E16               	movwf	(___lldiv@divisor+3)^0,c
  3472   001180  ECE7  F011         	call	___lldiv	;wreg free
  3473   001184  C00F  F029         	movff	?___lldiv,EscribeLCD_n32@millon
  3474   001188  C010  F02A         	movff	?___lldiv+1,EscribeLCD_n32@millon+1
  3475   00118C  C011  F02B         	movff	?___lldiv+2,EscribeLCD_n32@millon+2
  3476   001190  C012  F02C         	movff	?___lldiv+3,EscribeLCD_n32@millon+3
  3477                           
  3478                           ;LibLCDXC8.h: 247: cienmil=(a%1000000)/100000;
  3479   001194  0E40               	movlw	64
  3480   001196  6E0A               	movwf	___llmod@divisor^0,c
  3481   001198  0E42               	movlw	66
  3482   00119A  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3483   00119C  0E0F               	movlw	15
  3484   00119E  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3485   0011A0  0E00               	movlw	0
  3486   0011A2  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3487   0011A4  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3488   0011A8  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3489   0011AC  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3490   0011B0  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3491   0011B4  ECD8  F012         	call	___llmod	;wreg free
  3492   0011B8  C006  F00F         	movff	?___llmod,___lldiv@dividend
  3493   0011BC  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  3494   0011C0  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  3495   0011C4  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  3496   0011C8  0EA0               	movlw	160
  3497   0011CA  6E13               	movwf	___lldiv@divisor^0,c
  3498   0011CC  0E86               	movlw	134
  3499   0011CE  6E14               	movwf	(___lldiv@divisor+1)^0,c
  3500   0011D0  0E01               	movlw	1
  3501   0011D2  6E15               	movwf	(___lldiv@divisor+2)^0,c
  3502   0011D4  0E00               	movlw	0
  3503   0011D6  6E16               	movwf	(___lldiv@divisor+3)^0,c
  3504   0011D8  ECE7  F011         	call	___lldiv	;wreg free
  3505   0011DC  C00F  F02D         	movff	?___lldiv,EscribeLCD_n32@cienmil
  3506   0011E0  C010  F02E         	movff	?___lldiv+1,EscribeLCD_n32@cienmil+1
  3507   0011E4  C011  F02F         	movff	?___lldiv+2,EscribeLCD_n32@cienmil+2
  3508   0011E8  C012  F030         	movff	?___lldiv+3,EscribeLCD_n32@cienmil+3
  3509                           
  3510                           ;LibLCDXC8.h: 248: diezmil=(a%100000)/10000;
  3511   0011EC  0EA0               	movlw	160
  3512   0011EE  6E0A               	movwf	___llmod@divisor^0,c
  3513   0011F0  0E86               	movlw	134
  3514   0011F2  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3515   0011F4  0E01               	movlw	1
  3516   0011F6  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3517   0011F8  0E00               	movlw	0
  3518   0011FA  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3519   0011FC  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3520   001200  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3521   001204  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3522   001208  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3523   00120C  ECD8  F012         	call	___llmod	;wreg free
  3524   001210  C006  F00F         	movff	?___llmod,___lldiv@dividend
  3525   001214  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  3526   001218  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  3527   00121C  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  3528   001220  0E10               	movlw	16
  3529   001222  6E13               	movwf	___lldiv@divisor^0,c
  3530   001224  0E27               	movlw	39
  3531   001226  6E14               	movwf	(___lldiv@divisor+1)^0,c
  3532   001228  0E00               	movlw	0
  3533   00122A  6E15               	movwf	(___lldiv@divisor+2)^0,c
  3534   00122C  0E00               	movlw	0
  3535   00122E  6E16               	movwf	(___lldiv@divisor+3)^0,c
  3536   001230  ECE7  F011         	call	___lldiv	;wreg free
  3537   001234  C00F  F031         	movff	?___lldiv,EscribeLCD_n32@diezmil
  3538   001238  C010  F032         	movff	?___lldiv+1,EscribeLCD_n32@diezmil+1
  3539   00123C  C011  F033         	movff	?___lldiv+2,EscribeLCD_n32@diezmil+2
  3540   001240  C012  F034         	movff	?___lldiv+3,EscribeLCD_n32@diezmil+3
  3541                           
  3542                           ;LibLCDXC8.h: 249: millar=(a%10000)/1000;
  3543   001244  0E10               	movlw	16
  3544   001246  6E0A               	movwf	___llmod@divisor^0,c
  3545   001248  0E27               	movlw	39
  3546   00124A  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3547   00124C  0E00               	movlw	0
  3548   00124E  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3549   001250  0E00               	movlw	0
  3550   001252  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3551   001254  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3552   001258  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3553   00125C  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3554   001260  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3555   001264  ECD8  F012         	call	___llmod	;wreg free
  3556   001268  C006  F00F         	movff	?___llmod,___lldiv@dividend
  3557   00126C  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  3558   001270  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  3559   001274  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  3560   001278  0EE8               	movlw	232
  3561   00127A  6E13               	movwf	___lldiv@divisor^0,c
  3562   00127C  0E03               	movlw	3
  3563   00127E  6E14               	movwf	(___lldiv@divisor+1)^0,c
  3564   001280  0E00               	movlw	0
  3565   001282  6E15               	movwf	(___lldiv@divisor+2)^0,c
  3566   001284  0E00               	movlw	0
  3567   001286  6E16               	movwf	(___lldiv@divisor+3)^0,c
  3568   001288  ECE7  F011         	call	___lldiv	;wreg free
  3569   00128C  C00F  F035         	movff	?___lldiv,EscribeLCD_n32@millar
  3570   001290  C010  F036         	movff	?___lldiv+1,EscribeLCD_n32@millar+1
  3571                           
  3572                           ;LibLCDXC8.h: 250: centena=(a%1000)/100;
  3573   001294  0EE8               	movlw	232
  3574   001296  6E0A               	movwf	___llmod@divisor^0,c
  3575   001298  0E03               	movlw	3
  3576   00129A  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3577   00129C  0E00               	movlw	0
  3578   00129E  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3579   0012A0  0E00               	movlw	0
  3580   0012A2  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3581   0012A4  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3582   0012A8  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3583   0012AC  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3584   0012B0  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3585   0012B4  ECD8  F012         	call	___llmod	;wreg free
  3586   0012B8  C006  F00F         	movff	?___llmod,___lldiv@dividend
  3587   0012BC  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  3588   0012C0  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  3589   0012C4  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  3590   0012C8  0E64               	movlw	100
  3591   0012CA  6E13               	movwf	___lldiv@divisor^0,c
  3592   0012CC  0E00               	movlw	0
  3593   0012CE  6E14               	movwf	(___lldiv@divisor+1)^0,c
  3594   0012D0  0E00               	movlw	0
  3595   0012D2  6E15               	movwf	(___lldiv@divisor+2)^0,c
  3596   0012D4  0E00               	movlw	0
  3597   0012D6  6E16               	movwf	(___lldiv@divisor+3)^0,c
  3598   0012D8  ECE7  F011         	call	___lldiv	;wreg free
  3599   0012DC  C00F  F037         	movff	?___lldiv,EscribeLCD_n32@centena
  3600   0012E0  C010  F038         	movff	?___lldiv+1,EscribeLCD_n32@centena+1
  3601                           
  3602                           ;LibLCDXC8.h: 251: decena=(a%100)/10;
  3603   0012E4  0E64               	movlw	100
  3604   0012E6  6E0A               	movwf	___llmod@divisor^0,c
  3605   0012E8  0E00               	movlw	0
  3606   0012EA  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3607   0012EC  0E00               	movlw	0
  3608   0012EE  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3609   0012F0  0E00               	movlw	0
  3610   0012F2  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3611   0012F4  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3612   0012F8  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3613   0012FC  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3614   001300  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3615   001304  ECD8  F012         	call	___llmod	;wreg free
  3616   001308  C006  F00F         	movff	?___llmod,___lldiv@dividend
  3617   00130C  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  3618   001310  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  3619   001314  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  3620   001318  0E0A               	movlw	10
  3621   00131A  6E13               	movwf	___lldiv@divisor^0,c
  3622   00131C  0E00               	movlw	0
  3623   00131E  6E14               	movwf	(___lldiv@divisor+1)^0,c
  3624   001320  0E00               	movlw	0
  3625   001322  6E15               	movwf	(___lldiv@divisor+2)^0,c
  3626   001324  0E00               	movlw	0
  3627   001326  6E16               	movwf	(___lldiv@divisor+3)^0,c
  3628   001328  ECE7  F011         	call	___lldiv	;wreg free
  3629   00132C  500F               	movf	?___lldiv^0,w,c
  3630   00132E  6E39               	movwf	EscribeLCD_n32@decena^0,c
  3631                           
  3632                           ;LibLCDXC8.h: 252: unidad=a%10;
  3633   001330  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3634   001334  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3635   001338  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3636   00133C  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3637   001340  0E0A               	movlw	10
  3638   001342  6E0A               	movwf	___llmod@divisor^0,c
  3639   001344  0E00               	movlw	0
  3640   001346  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3641   001348  0E00               	movlw	0
  3642   00134A  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3643   00134C  0E00               	movlw	0
  3644   00134E  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3645   001350  ECD8  F012         	call	___llmod	;wreg free
  3646   001354  5006               	movf	?___llmod^0,w,c
  3647   001356  6E3A               	movwf	EscribeLCD_n32@unidad^0,c
  3648                           
  3649                           ;LibLCDXC8.h: 253: EscribeLCD_c(diezmillon+48);
  3650   001358  5025               	movf	EscribeLCD_n32@diezmillon^0,w,c
  3651   00135A  0F30               	addlw	48
  3652   00135C  ECC3  F014         	call	_EscribeLCD_c
  3653                           
  3654                           ;LibLCDXC8.h: 254: EscribeLCD_c(millon+48);
  3655   001360  5029               	movf	EscribeLCD_n32@millon^0,w,c
  3656   001362  0F30               	addlw	48
  3657   001364  ECC3  F014         	call	_EscribeLCD_c
  3658                           
  3659                           ;LibLCDXC8.h: 255: EscribeLCD_c(cienmil+48);
  3660   001368  502D               	movf	EscribeLCD_n32@cienmil^0,w,c
  3661   00136A  0F30               	addlw	48
  3662   00136C  ECC3  F014         	call	_EscribeLCD_c
  3663                           
  3664                           ;LibLCDXC8.h: 256: EscribeLCD_c(diezmil+48);
  3665   001370  5031               	movf	EscribeLCD_n32@diezmil^0,w,c
  3666   001372  0F30               	addlw	48
  3667   001374  ECC3  F014         	call	_EscribeLCD_c
  3668                           
  3669                           ;LibLCDXC8.h: 257: EscribeLCD_c(millar+48);
  3670   001378  5035               	movf	EscribeLCD_n32@millar^0,w,c
  3671   00137A  0F30               	addlw	48
  3672   00137C  ECC3  F014         	call	_EscribeLCD_c
  3673                           
  3674                           ;LibLCDXC8.h: 258: EscribeLCD_c(centena+48);
  3675   001380  5037               	movf	EscribeLCD_n32@centena^0,w,c
  3676   001382  0F30               	addlw	48
  3677   001384  ECC3  F014         	call	_EscribeLCD_c
  3678                           
  3679                           ;LibLCDXC8.h: 259: EscribeLCD_c(decena+48);
  3680   001388  5039               	movf	EscribeLCD_n32@decena^0,w,c
  3681   00138A  0F30               	addlw	48
  3682   00138C  ECC3  F014         	call	_EscribeLCD_c
  3683                           
  3684                           ;LibLCDXC8.h: 260: EscribeLCD_c(unidad+48);
  3685   001390  503A               	movf	EscribeLCD_n32@unidad^0,w,c
  3686   001392  0F30               	addlw	48
  3687   001394  ECC3  F014         	call	_EscribeLCD_c
  3688                           
  3689                           ;LibLCDXC8.h: 261: break;
  3690   001398  0012               	return	
  3691   00139A                     l2427:
  3692                           
  3693                           ; BSR set to: 0
  3694   00139A  0E00               	movlw	0
  3695   00139C  6E0A               	movwf	___llmod@divisor^0,c
  3696   00139E  0ECA               	movlw	202
  3697   0013A0  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3698   0013A2  0E9A               	movlw	154
  3699   0013A4  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3700   0013A6  0E3B               	movlw	59
  3701   0013A8  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3702   0013AA  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3703   0013AE  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3704   0013B2  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3705   0013B6  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3706   0013BA  ECD8  F012         	call	___llmod	;wreg free
  3707   0013BE  C006  F00F         	movff	?___llmod,___lldiv@dividend
  3708   0013C2  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  3709   0013C6  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  3710   0013CA  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  3711   0013CE  0E00               	movlw	0
  3712   0013D0  6E13               	movwf	___lldiv@divisor^0,c
  3713   0013D2  0EE1               	movlw	225
  3714   0013D4  6E14               	movwf	(___lldiv@divisor+1)^0,c
  3715   0013D6  0EF5               	movlw	245
  3716   0013D8  6E15               	movwf	(___lldiv@divisor+2)^0,c
  3717   0013DA  0E05               	movlw	5
  3718   0013DC  6E16               	movwf	(___lldiv@divisor+3)^0,c
  3719   0013DE  ECE7  F011         	call	___lldiv	;wreg free
  3720   0013E2  C00F  F021         	movff	?___lldiv,EscribeLCD_n32@cienmillon
  3721   0013E6  C010  F022         	movff	?___lldiv+1,EscribeLCD_n32@cienmillon+1
  3722   0013EA  C011  F023         	movff	?___lldiv+2,EscribeLCD_n32@cienmillon+2
  3723   0013EE  C012  F024         	movff	?___lldiv+3,EscribeLCD_n32@cienmillon+3
  3724                           
  3725                           ;LibLCDXC8.h: 264: diezmillon=(a%100000000)/10000000;
  3726   0013F2  0E00               	movlw	0
  3727   0013F4  6E0A               	movwf	___llmod@divisor^0,c
  3728   0013F6  0EE1               	movlw	225
  3729   0013F8  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3730   0013FA  0EF5               	movlw	245
  3731   0013FC  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3732   0013FE  0E05               	movlw	5
  3733   001400  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3734   001402  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3735   001406  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3736   00140A  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3737   00140E  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3738   001412  ECD8  F012         	call	___llmod	;wreg free
  3739   001416  C006  F00F         	movff	?___llmod,___lldiv@dividend
  3740   00141A  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  3741   00141E  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  3742   001422  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  3743   001426  0E80               	movlw	128
  3744   001428  6E13               	movwf	___lldiv@divisor^0,c
  3745   00142A  0E96               	movlw	150
  3746   00142C  6E14               	movwf	(___lldiv@divisor+1)^0,c
  3747   00142E  0E98               	movlw	152
  3748   001430  6E15               	movwf	(___lldiv@divisor+2)^0,c
  3749   001432  0E00               	movlw	0
  3750   001434  6E16               	movwf	(___lldiv@divisor+3)^0,c
  3751   001436  ECE7  F011         	call	___lldiv	;wreg free
  3752   00143A  C00F  F025         	movff	?___lldiv,EscribeLCD_n32@diezmillon
  3753   00143E  C010  F026         	movff	?___lldiv+1,EscribeLCD_n32@diezmillon+1
  3754   001442  C011  F027         	movff	?___lldiv+2,EscribeLCD_n32@diezmillon+2
  3755   001446  C012  F028         	movff	?___lldiv+3,EscribeLCD_n32@diezmillon+3
  3756                           
  3757                           ;LibLCDXC8.h: 265: millon=(a%10000000)/1000000;
  3758   00144A  0E80               	movlw	128
  3759   00144C  6E0A               	movwf	___llmod@divisor^0,c
  3760   00144E  0E96               	movlw	150
  3761   001450  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3762   001452  0E98               	movlw	152
  3763   001454  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3764   001456  0E00               	movlw	0
  3765   001458  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3766   00145A  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3767   00145E  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3768   001462  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3769   001466  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3770   00146A  ECD8  F012         	call	___llmod	;wreg free
  3771   00146E  C006  F00F         	movff	?___llmod,___lldiv@dividend
  3772   001472  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  3773   001476  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  3774   00147A  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  3775   00147E  0E40               	movlw	64
  3776   001480  6E13               	movwf	___lldiv@divisor^0,c
  3777   001482  0E42               	movlw	66
  3778   001484  6E14               	movwf	(___lldiv@divisor+1)^0,c
  3779   001486  0E0F               	movlw	15
  3780   001488  6E15               	movwf	(___lldiv@divisor+2)^0,c
  3781   00148A  0E00               	movlw	0
  3782   00148C  6E16               	movwf	(___lldiv@divisor+3)^0,c
  3783   00148E  ECE7  F011         	call	___lldiv	;wreg free
  3784   001492  C00F  F029         	movff	?___lldiv,EscribeLCD_n32@millon
  3785   001496  C010  F02A         	movff	?___lldiv+1,EscribeLCD_n32@millon+1
  3786   00149A  C011  F02B         	movff	?___lldiv+2,EscribeLCD_n32@millon+2
  3787   00149E  C012  F02C         	movff	?___lldiv+3,EscribeLCD_n32@millon+3
  3788                           
  3789                           ;LibLCDXC8.h: 266: cienmil=(a%1000000)/100000;
  3790   0014A2  0E40               	movlw	64
  3791   0014A4  6E0A               	movwf	___llmod@divisor^0,c
  3792   0014A6  0E42               	movlw	66
  3793   0014A8  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3794   0014AA  0E0F               	movlw	15
  3795   0014AC  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3796   0014AE  0E00               	movlw	0
  3797   0014B0  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3798   0014B2  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3799   0014B6  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3800   0014BA  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3801   0014BE  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3802   0014C2  ECD8  F012         	call	___llmod	;wreg free
  3803   0014C6  C006  F00F         	movff	?___llmod,___lldiv@dividend
  3804   0014CA  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  3805   0014CE  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  3806   0014D2  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  3807   0014D6  0EA0               	movlw	160
  3808   0014D8  6E13               	movwf	___lldiv@divisor^0,c
  3809   0014DA  0E86               	movlw	134
  3810   0014DC  6E14               	movwf	(___lldiv@divisor+1)^0,c
  3811   0014DE  0E01               	movlw	1
  3812   0014E0  6E15               	movwf	(___lldiv@divisor+2)^0,c
  3813   0014E2  0E00               	movlw	0
  3814   0014E4  6E16               	movwf	(___lldiv@divisor+3)^0,c
  3815   0014E6  ECE7  F011         	call	___lldiv	;wreg free
  3816   0014EA  C00F  F02D         	movff	?___lldiv,EscribeLCD_n32@cienmil
  3817   0014EE  C010  F02E         	movff	?___lldiv+1,EscribeLCD_n32@cienmil+1
  3818   0014F2  C011  F02F         	movff	?___lldiv+2,EscribeLCD_n32@cienmil+2
  3819   0014F6  C012  F030         	movff	?___lldiv+3,EscribeLCD_n32@cienmil+3
  3820                           
  3821                           ;LibLCDXC8.h: 267: diezmil=(a%100000)/10000;
  3822   0014FA  0EA0               	movlw	160
  3823   0014FC  6E0A               	movwf	___llmod@divisor^0,c
  3824   0014FE  0E86               	movlw	134
  3825   001500  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3826   001502  0E01               	movlw	1
  3827   001504  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3828   001506  0E00               	movlw	0
  3829   001508  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3830   00150A  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3831   00150E  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3832   001512  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3833   001516  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3834   00151A  ECD8  F012         	call	___llmod	;wreg free
  3835   00151E  C006  F00F         	movff	?___llmod,___lldiv@dividend
  3836   001522  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  3837   001526  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  3838   00152A  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  3839   00152E  0E10               	movlw	16
  3840   001530  6E13               	movwf	___lldiv@divisor^0,c
  3841   001532  0E27               	movlw	39
  3842   001534  6E14               	movwf	(___lldiv@divisor+1)^0,c
  3843   001536  0E00               	movlw	0
  3844   001538  6E15               	movwf	(___lldiv@divisor+2)^0,c
  3845   00153A  0E00               	movlw	0
  3846   00153C  6E16               	movwf	(___lldiv@divisor+3)^0,c
  3847   00153E  ECE7  F011         	call	___lldiv	;wreg free
  3848   001542  C00F  F031         	movff	?___lldiv,EscribeLCD_n32@diezmil
  3849   001546  C010  F032         	movff	?___lldiv+1,EscribeLCD_n32@diezmil+1
  3850   00154A  C011  F033         	movff	?___lldiv+2,EscribeLCD_n32@diezmil+2
  3851   00154E  C012  F034         	movff	?___lldiv+3,EscribeLCD_n32@diezmil+3
  3852                           
  3853                           ;LibLCDXC8.h: 268: millar=(a%10000)/1000;
  3854   001552  0E10               	movlw	16
  3855   001554  6E0A               	movwf	___llmod@divisor^0,c
  3856   001556  0E27               	movlw	39
  3857   001558  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3858   00155A  0E00               	movlw	0
  3859   00155C  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3860   00155E  0E00               	movlw	0
  3861   001560  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3862   001562  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3863   001566  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3864   00156A  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3865   00156E  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3866   001572  ECD8  F012         	call	___llmod	;wreg free
  3867   001576  C006  F00F         	movff	?___llmod,___lldiv@dividend
  3868   00157A  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  3869   00157E  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  3870   001582  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  3871   001586  0EE8               	movlw	232
  3872   001588  6E13               	movwf	___lldiv@divisor^0,c
  3873   00158A  0E03               	movlw	3
  3874   00158C  6E14               	movwf	(___lldiv@divisor+1)^0,c
  3875   00158E  0E00               	movlw	0
  3876   001590  6E15               	movwf	(___lldiv@divisor+2)^0,c
  3877   001592  0E00               	movlw	0
  3878   001594  6E16               	movwf	(___lldiv@divisor+3)^0,c
  3879   001596  ECE7  F011         	call	___lldiv	;wreg free
  3880   00159A  C00F  F035         	movff	?___lldiv,EscribeLCD_n32@millar
  3881   00159E  C010  F036         	movff	?___lldiv+1,EscribeLCD_n32@millar+1
  3882                           
  3883                           ;LibLCDXC8.h: 269: centena=(a%1000)/100;
  3884   0015A2  0EE8               	movlw	232
  3885   0015A4  6E0A               	movwf	___llmod@divisor^0,c
  3886   0015A6  0E03               	movlw	3
  3887   0015A8  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3888   0015AA  0E00               	movlw	0
  3889   0015AC  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3890   0015AE  0E00               	movlw	0
  3891   0015B0  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3892   0015B2  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3893   0015B6  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3894   0015BA  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3895   0015BE  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3896   0015C2  ECD8  F012         	call	___llmod	;wreg free
  3897   0015C6  C006  F00F         	movff	?___llmod,___lldiv@dividend
  3898   0015CA  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  3899   0015CE  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  3900   0015D2  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  3901   0015D6  0E64               	movlw	100
  3902   0015D8  6E13               	movwf	___lldiv@divisor^0,c
  3903   0015DA  0E00               	movlw	0
  3904   0015DC  6E14               	movwf	(___lldiv@divisor+1)^0,c
  3905   0015DE  0E00               	movlw	0
  3906   0015E0  6E15               	movwf	(___lldiv@divisor+2)^0,c
  3907   0015E2  0E00               	movlw	0
  3908   0015E4  6E16               	movwf	(___lldiv@divisor+3)^0,c
  3909   0015E6  ECE7  F011         	call	___lldiv	;wreg free
  3910   0015EA  C00F  F037         	movff	?___lldiv,EscribeLCD_n32@centena
  3911   0015EE  C010  F038         	movff	?___lldiv+1,EscribeLCD_n32@centena+1
  3912                           
  3913                           ;LibLCDXC8.h: 270: decena=(a%100)/10;
  3914   0015F2  0E64               	movlw	100
  3915   0015F4  6E0A               	movwf	___llmod@divisor^0,c
  3916   0015F6  0E00               	movlw	0
  3917   0015F8  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3918   0015FA  0E00               	movlw	0
  3919   0015FC  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3920   0015FE  0E00               	movlw	0
  3921   001600  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3922   001602  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3923   001606  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3924   00160A  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3925   00160E  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3926   001612  ECD8  F012         	call	___llmod	;wreg free
  3927   001616  C006  F00F         	movff	?___llmod,___lldiv@dividend
  3928   00161A  C007  F010         	movff	?___llmod+1,___lldiv@dividend+1
  3929   00161E  C008  F011         	movff	?___llmod+2,___lldiv@dividend+2
  3930   001622  C009  F012         	movff	?___llmod+3,___lldiv@dividend+3
  3931   001626  0E0A               	movlw	10
  3932   001628  6E13               	movwf	___lldiv@divisor^0,c
  3933   00162A  0E00               	movlw	0
  3934   00162C  6E14               	movwf	(___lldiv@divisor+1)^0,c
  3935   00162E  0E00               	movlw	0
  3936   001630  6E15               	movwf	(___lldiv@divisor+2)^0,c
  3937   001632  0E00               	movlw	0
  3938   001634  6E16               	movwf	(___lldiv@divisor+3)^0,c
  3939   001636  ECE7  F011         	call	___lldiv	;wreg free
  3940   00163A  500F               	movf	?___lldiv^0,w,c
  3941   00163C  6E39               	movwf	EscribeLCD_n32@decena^0,c
  3942                           
  3943                           ;LibLCDXC8.h: 271: unidad=a%10;
  3944   00163E  C01C  F006         	movff	EscribeLCD_n32@a,___llmod@dividend
  3945   001642  C01D  F007         	movff	EscribeLCD_n32@a+1,___llmod@dividend+1
  3946   001646  C01E  F008         	movff	EscribeLCD_n32@a+2,___llmod@dividend+2
  3947   00164A  C01F  F009         	movff	EscribeLCD_n32@a+3,___llmod@dividend+3
  3948   00164E  0E0A               	movlw	10
  3949   001650  6E0A               	movwf	___llmod@divisor^0,c
  3950   001652  0E00               	movlw	0
  3951   001654  6E0B               	movwf	(___llmod@divisor+1)^0,c
  3952   001656  0E00               	movlw	0
  3953   001658  6E0C               	movwf	(___llmod@divisor+2)^0,c
  3954   00165A  0E00               	movlw	0
  3955   00165C  6E0D               	movwf	(___llmod@divisor+3)^0,c
  3956   00165E  ECD8  F012         	call	___llmod	;wreg free
  3957   001662  5006               	movf	?___llmod^0,w,c
  3958   001664  6E3A               	movwf	EscribeLCD_n32@unidad^0,c
  3959                           
  3960                           ;LibLCDXC8.h: 272: EscribeLCD_c(cienmillon+48);
  3961   001666  5021               	movf	EscribeLCD_n32@cienmillon^0,w,c
  3962   001668  0F30               	addlw	48
  3963   00166A  ECC3  F014         	call	_EscribeLCD_c
  3964                           
  3965                           ;LibLCDXC8.h: 273: EscribeLCD_c(diezmillon+48);
  3966   00166E  5025               	movf	EscribeLCD_n32@diezmillon^0,w,c
  3967   001670  0F30               	addlw	48
  3968   001672  ECC3  F014         	call	_EscribeLCD_c
  3969                           
  3970                           ;LibLCDXC8.h: 274: EscribeLCD_c(millon+48);
  3971   001676  5029               	movf	EscribeLCD_n32@millon^0,w,c
  3972   001678  0F30               	addlw	48
  3973   00167A  ECC3  F014         	call	_EscribeLCD_c
  3974                           
  3975                           ;LibLCDXC8.h: 275: EscribeLCD_c(cienmil+48);
  3976   00167E  502D               	movf	EscribeLCD_n32@cienmil^0,w,c
  3977   001680  0F30               	addlw	48
  3978   001682  ECC3  F014         	call	_EscribeLCD_c
  3979                           
  3980                           ;LibLCDXC8.h: 276: EscribeLCD_c(diezmil+48);
  3981   001686  5031               	movf	EscribeLCD_n32@diezmil^0,w,c
  3982   001688  0F30               	addlw	48
  3983   00168A  ECC3  F014         	call	_EscribeLCD_c
  3984                           
  3985                           ;LibLCDXC8.h: 277: EscribeLCD_c(millar+48);
  3986   00168E  5035               	movf	EscribeLCD_n32@millar^0,w,c
  3987   001690  0F30               	addlw	48
  3988   001692  ECC3  F014         	call	_EscribeLCD_c
  3989                           
  3990                           ;LibLCDXC8.h: 278: EscribeLCD_c(centena+48);
  3991   001696  5037               	movf	EscribeLCD_n32@centena^0,w,c
  3992   001698  0F30               	addlw	48
  3993   00169A  ECC3  F014         	call	_EscribeLCD_c
  3994                           
  3995                           ;LibLCDXC8.h: 279: EscribeLCD_c(decena+48);
  3996   00169E  5039               	movf	EscribeLCD_n32@decena^0,w,c
  3997   0016A0  0F30               	addlw	48
  3998   0016A2  ECC3  F014         	call	_EscribeLCD_c
  3999                           
  4000                           ;LibLCDXC8.h: 280: EscribeLCD_c(unidad+48);
  4001   0016A6  503A               	movf	EscribeLCD_n32@unidad^0,w,c
  4002   0016A8  0F30               	addlw	48
  4003   0016AA  ECC3  F014         	call	_EscribeLCD_c
  4004                           
  4005                           ;LibLCDXC8.h: 281: break;
  4006   0016AE  0012               	return	
  4007   0016B0                     l2431:
  4008                           
  4009                           ; BSR set to: 0
  4010   0016B0  5020               	movf	EscribeLCD_n32@b^0,w,c
  4011                           
  4012                           ; Switch size 1, requested type "simple"
  4013                           ; Number of cases is 9, Range of values is 1 to 9
  4014                           ; switch strategies available:
  4015                           ; Name         Instructions Cycles
  4016                           ; simple_byte           28    15 (average)
  4017                           ;	Chosen strategy is simple_byte
  4018   0016B2  0A01               	xorlw	1	; case 1
  4019   0016B4  B4D8               	btfsc	status,2,c
  4020   0016B6  EF1B  F004         	goto	l2411
  4021   0016BA  0A03               	xorlw	3	; case 2
  4022   0016BC  B4D8               	btfsc	status,2,c
  4023   0016BE  EF34  F004         	goto	l2413
  4024   0016C2  0A01               	xorlw	1	; case 3
  4025   0016C4  B4D8               	btfsc	status,2,c
  4026   0016C6  EF77  F004         	goto	l2415
  4027   0016CA  0A07               	xorlw	7	; case 4
  4028   0016CC  B4D8               	btfsc	status,2,c
  4029   0016CE  EFE6  F004         	goto	l2417
  4030   0016D2  0A01               	xorlw	1	; case 5
  4031   0016D4  B4D8               	btfsc	status,2,c
  4032   0016D6  EF81  F005         	goto	l2419
  4033   0016DA  0A03               	xorlw	3	; case 6
  4034   0016DC  B4D8               	btfsc	status,2,c
  4035   0016DE  EF4C  F006         	goto	l2421
  4036   0016E2  0A01               	xorlw	1	; case 7
  4037   0016E4  B4D8               	btfsc	status,2,c
  4038   0016E6  EF47  F007         	goto	l2423
  4039   0016EA  0A0F               	xorlw	15	; case 8
  4040   0016EC  B4D8               	btfsc	status,2,c
  4041   0016EE  D4FA               	goto	l2425
  4042   0016F0  0A01               	xorlw	1	; case 9
  4043   0016F2  A4D8               	btfss	status,2,c
  4044   0016F4  0012               	return	
  4045   0016F6  D651               	goto	l2427
  4046   0016F8                     __end_of_EscribeLCD_n32:
  4047                           	callstack 0
  4048                           
  4049 ;; *************** function ___llmod *****************
  4050 ;; Defined at:
  4051 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\llmod.c"
  4052 ;; Parameters:    Size  Location     Type
  4053 ;;  dividend        4    5[COMRAM] unsigned long 
  4054 ;;  divisor         4    9[COMRAM] unsigned long 
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;  counter         1   13[COMRAM] unsigned char 
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  4    5[COMRAM] unsigned long 
  4059 ;; Registers used:
  4060 ;;		wreg, status,2, status,0
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4066 ;;      Params:         8       0       0       0       0       0       0       0       0
  4067 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4068 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4069 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4070 ;;Total ram usage:        9 bytes
  4071 ;; Hardware stack levels used: 1
  4072 ;; Hardware stack levels required when called: 3
  4073 ;; This function calls:
  4074 ;;		Nothing
  4075 ;; This function is called by:
  4076 ;;		_EscribeLCD_n32
  4077 ;; This function uses a non-reentrant model
  4078 ;;
  4079                           
  4080                           	psect	text10
  4081   0025B0                     __ptext10:
  4082                           	callstack 0
  4083   0025B0                     ___llmod:
  4084                           	callstack 25
  4085                           
  4086                           ;incstack = 0
  4087   0025B0  500A               	movf	___llmod@divisor^0,w,c
  4088   0025B2  100B               	iorwf	(___llmod@divisor+1)^0,w,c
  4089   0025B4  100C               	iorwf	(___llmod@divisor+2)^0,w,c
  4090   0025B6  100D               	iorwf	(___llmod@divisor+3)^0,w,c
  4091   0025B8  B4D8               	btfsc	status,2,c
  4092   0025BA  D024               	goto	l742
  4093   0025BC  0E01               	movlw	1
  4094   0025BE  6E0E               	movwf	___llmod@counter^0,c
  4095   0025C0  D006               	goto	l2391
  4096   0025C2                     l2389:
  4097   0025C2  90D8               	bcf	status,0,c
  4098   0025C4  360A               	rlcf	___llmod@divisor^0,f,c
  4099   0025C6  360B               	rlcf	(___llmod@divisor+1)^0,f,c
  4100   0025C8  360C               	rlcf	(___llmod@divisor+2)^0,f,c
  4101   0025CA  360D               	rlcf	(___llmod@divisor+3)^0,f,c
  4102   0025CC  2A0E               	incf	___llmod@counter^0,f,c
  4103   0025CE                     l2391:
  4104   0025CE  AE0D               	btfss	(___llmod@divisor+3)^0,7,c
  4105   0025D0  D7F8               	goto	l2389
  4106   0025D2                     u1690:
  4107   0025D2  500A               	movf	___llmod@divisor^0,w,c
  4108   0025D4  5C06               	subwf	___llmod@dividend^0,w,c
  4109   0025D6  500B               	movf	(___llmod@divisor+1)^0,w,c
  4110   0025D8  5807               	subwfb	(___llmod@dividend+1)^0,w,c
  4111   0025DA  500C               	movf	(___llmod@divisor+2)^0,w,c
  4112   0025DC  5808               	subwfb	(___llmod@dividend+2)^0,w,c
  4113   0025DE  500D               	movf	(___llmod@divisor+3)^0,w,c
  4114   0025E0  5809               	subwfb	(___llmod@dividend+3)^0,w,c
  4115   0025E2  A0D8               	btfss	status,0,c
  4116   0025E4  D008               	goto	l2397
  4117   0025E6  500A               	movf	___llmod@divisor^0,w,c
  4118   0025E8  5E06               	subwf	___llmod@dividend^0,f,c
  4119   0025EA  500B               	movf	(___llmod@divisor+1)^0,w,c
  4120   0025EC  5A07               	subwfb	(___llmod@dividend+1)^0,f,c
  4121   0025EE  500C               	movf	(___llmod@divisor+2)^0,w,c
  4122   0025F0  5A08               	subwfb	(___llmod@dividend+2)^0,f,c
  4123   0025F2  500D               	movf	(___llmod@divisor+3)^0,w,c
  4124   0025F4  5A09               	subwfb	(___llmod@dividend+3)^0,f,c
  4125   0025F6                     l2397:
  4126   0025F6  90D8               	bcf	status,0,c
  4127   0025F8  320D               	rrcf	(___llmod@divisor+3)^0,f,c
  4128   0025FA  320C               	rrcf	(___llmod@divisor+2)^0,f,c
  4129   0025FC  320B               	rrcf	(___llmod@divisor+1)^0,f,c
  4130   0025FE  320A               	rrcf	___llmod@divisor^0,f,c
  4131   002600  2E0E               	decfsz	___llmod@counter^0,f,c
  4132   002602  D7E7               	goto	u1690
  4133   002604                     l742:
  4134   002604  C006  F006         	movff	___llmod@dividend,?___llmod
  4135   002608  C007  F007         	movff	___llmod@dividend+1,?___llmod+1
  4136   00260C  C008  F008         	movff	___llmod@dividend+2,?___llmod+2
  4137   002610  C009  F009         	movff	___llmod@dividend+3,?___llmod+3
  4138   002614  0012               	return		;funcret
  4139   002616                     __end_of___llmod:
  4140                           	callstack 0
  4141                           
  4142 ;; *************** function ___lldiv *****************
  4143 ;; Defined at:
  4144 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\__lldiv.c"
  4145 ;; Parameters:    Size  Location     Type
  4146 ;;  dividend        4   14[COMRAM] unsigned long 
  4147 ;;  divisor         4   18[COMRAM] unsigned long 
  4148 ;; Auto vars:     Size  Location     Type
  4149 ;;  quotient        4   22[COMRAM] unsigned long 
  4150 ;;  counter         1   26[COMRAM] unsigned char 
  4151 ;; Return value:  Size  Location     Type
  4152 ;;                  4   14[COMRAM] unsigned long 
  4153 ;; Registers used:
  4154 ;;		wreg, status,2, status,0
  4155 ;; Tracked objects:
  4156 ;;		On entry : 0/0
  4157 ;;		On exit  : 0/0
  4158 ;;		Unchanged: 0/0
  4159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4160 ;;      Params:         8       0       0       0       0       0       0       0       0
  4161 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4162 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4163 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4164 ;;Total ram usage:       13 bytes
  4165 ;; Hardware stack levels used: 1
  4166 ;; Hardware stack levels required when called: 3
  4167 ;; This function calls:
  4168 ;;		Nothing
  4169 ;; This function is called by:
  4170 ;;		_EscribeLCD_n32
  4171 ;; This function uses a non-reentrant model
  4172 ;;
  4173                           
  4174                           	psect	text11
  4175   0023CE                     __ptext11:
  4176                           	callstack 0
  4177   0023CE                     ___lldiv:
  4178                           	callstack 25
  4179                           
  4180                           ;incstack = 0
  4181   0023CE  0E00               	movlw	0
  4182   0023D0  6E17               	movwf	___lldiv@quotient^0,c
  4183   0023D2  0E00               	movlw	0
  4184   0023D4  6E18               	movwf	(___lldiv@quotient+1)^0,c
  4185   0023D6  0E00               	movlw	0
  4186   0023D8  6E19               	movwf	(___lldiv@quotient+2)^0,c
  4187   0023DA  0E00               	movlw	0
  4188   0023DC  6E1A               	movwf	(___lldiv@quotient+3)^0,c
  4189   0023DE  5013               	movf	___lldiv@divisor^0,w,c
  4190   0023E0  1014               	iorwf	(___lldiv@divisor+1)^0,w,c
  4191   0023E2  1015               	iorwf	(___lldiv@divisor+2)^0,w,c
  4192   0023E4  1016               	iorwf	(___lldiv@divisor+3)^0,w,c
  4193   0023E6  B4D8               	btfsc	status,2,c
  4194   0023E8  D02A               	goto	l361
  4195   0023EA  0E01               	movlw	1
  4196   0023EC  6E1B               	movwf	___lldiv@counter^0,c
  4197   0023EE  D006               	goto	l2241
  4198   0023F0                     l2239:
  4199   0023F0  90D8               	bcf	status,0,c
  4200   0023F2  3613               	rlcf	___lldiv@divisor^0,f,c
  4201   0023F4  3614               	rlcf	(___lldiv@divisor+1)^0,f,c
  4202   0023F6  3615               	rlcf	(___lldiv@divisor+2)^0,f,c
  4203   0023F8  3616               	rlcf	(___lldiv@divisor+3)^0,f,c
  4204   0023FA  2A1B               	incf	___lldiv@counter^0,f,c
  4205   0023FC                     l2241:
  4206   0023FC  AE16               	btfss	(___lldiv@divisor+3)^0,7,c
  4207   0023FE  D7F8               	goto	l2239
  4208   002400                     u1460:
  4209   002400  90D8               	bcf	status,0,c
  4210   002402  3617               	rlcf	___lldiv@quotient^0,f,c
  4211   002404  3618               	rlcf	(___lldiv@quotient+1)^0,f,c
  4212   002406  3619               	rlcf	(___lldiv@quotient+2)^0,f,c
  4213   002408  361A               	rlcf	(___lldiv@quotient+3)^0,f,c
  4214   00240A  5013               	movf	___lldiv@divisor^0,w,c
  4215   00240C  5C0F               	subwf	___lldiv@dividend^0,w,c
  4216   00240E  5014               	movf	(___lldiv@divisor+1)^0,w,c
  4217   002410  5810               	subwfb	(___lldiv@dividend+1)^0,w,c
  4218   002412  5015               	movf	(___lldiv@divisor+2)^0,w,c
  4219   002414  5811               	subwfb	(___lldiv@dividend+2)^0,w,c
  4220   002416  5016               	movf	(___lldiv@divisor+3)^0,w,c
  4221   002418  5812               	subwfb	(___lldiv@dividend+3)^0,w,c
  4222   00241A  A0D8               	btfss	status,0,c
  4223   00241C  D009               	goto	l2251
  4224   00241E  5013               	movf	___lldiv@divisor^0,w,c
  4225   002420  5E0F               	subwf	___lldiv@dividend^0,f,c
  4226   002422  5014               	movf	(___lldiv@divisor+1)^0,w,c
  4227   002424  5A10               	subwfb	(___lldiv@dividend+1)^0,f,c
  4228   002426  5015               	movf	(___lldiv@divisor+2)^0,w,c
  4229   002428  5A11               	subwfb	(___lldiv@dividend+2)^0,f,c
  4230   00242A  5016               	movf	(___lldiv@divisor+3)^0,w,c
  4231   00242C  5A12               	subwfb	(___lldiv@dividend+3)^0,f,c
  4232   00242E  8017               	bsf	___lldiv@quotient^0,0,c
  4233   002430                     l2251:
  4234   002430  90D8               	bcf	status,0,c
  4235   002432  3216               	rrcf	(___lldiv@divisor+3)^0,f,c
  4236   002434  3215               	rrcf	(___lldiv@divisor+2)^0,f,c
  4237   002436  3214               	rrcf	(___lldiv@divisor+1)^0,f,c
  4238   002438  3213               	rrcf	___lldiv@divisor^0,f,c
  4239   00243A  2E1B               	decfsz	___lldiv@counter^0,f,c
  4240   00243C  D7E1               	goto	u1460
  4241   00243E                     l361:
  4242   00243E  C017  F00F         	movff	___lldiv@quotient,?___lldiv
  4243   002442  C018  F010         	movff	___lldiv@quotient+1,?___lldiv+1
  4244   002446  C019  F011         	movff	___lldiv@quotient+2,?___lldiv+2
  4245   00244A  C01A  F012         	movff	___lldiv@quotient+3,?___lldiv+3
  4246   00244E  0012               	return		;funcret
  4247   002450                     __end_of___lldiv:
  4248                           	callstack 0
  4249                           
  4250 ;; *************** function _EscribeLCD_2Decimales *****************
  4251 ;; Defined at:
  4252 ;;		line 329 in file "LibLCDXC8.h"
  4253 ;; Parameters:    Size  Location     Type
  4254 ;;  a               3   48[COMRAM] unsigned long 
  4255 ;; Auto vars:     Size  Location     Type
  4256 ;;  num             2   51[COMRAM] int 
  4257 ;;  unidad          1   54[COMRAM] unsigned char 
  4258 ;;  decimalesP      1   53[COMRAM] unsigned char 
  4259 ;; Return value:  Size  Location     Type
  4260 ;;                  1    wreg      void 
  4261 ;; Registers used:
  4262 ;;		wreg, status,2, status,0, cstack
  4263 ;; Tracked objects:
  4264 ;;		On entry : 0/0
  4265 ;;		On exit  : 0/0
  4266 ;;		Unchanged: 0/0
  4267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4268 ;;      Params:         3       0       0       0       0       0       0       0       0
  4269 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4270 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4271 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4272 ;;Total ram usage:        7 bytes
  4273 ;; Hardware stack levels used: 1
  4274 ;; Hardware stack levels required when called: 6
  4275 ;; This function calls:
  4276 ;;		_EscribeLCD_c
  4277 ;;		_EscribeLCD_n8
  4278 ;;		___awmod
  4279 ;;		___ftmul
  4280 ;;		___fttol
  4281 ;; This function is called by:
  4282 ;;		_ModuloOperacion
  4283 ;; This function uses a non-reentrant model
  4284 ;;
  4285                           
  4286                           	psect	text12
  4287   002450                     __ptext12:
  4288                           	callstack 0
  4289   002450                     _EscribeLCD_2Decimales:
  4290                           	callstack 23
  4291                           
  4292                           ;LibLCDXC8.h: 330: int num;;LibLCDXC8.h: 331: char decimalesP;;LibLCDXC8.h: 332: char un
      +                          idad;;LibLCDXC8.h: 333: unidad=a;
  4293                           
  4294                           ;incstack = 0
  4295   002450  C031  F01D         	movff	EscribeLCD_2Decimales@a,___fttol@f1
  4296   002454  C032  F01E         	movff	EscribeLCD_2Decimales@a+1,___fttol@f1+1
  4297   002458  C033  F01F         	movff	EscribeLCD_2Decimales@a+2,___fttol@f1+2
  4298   00245C  ECD9  F010         	call	___fttol	;wreg free
  4299   002460  501D               	movf	?___fttol^0,w,c
  4300   002462  6E37               	movwf	EscribeLCD_2Decimales@unidad^0,c
  4301                           
  4302                           ;LibLCDXC8.h: 334: num=(a*100);
  4303   002464  0E00               	movlw	0
  4304   002466  6E11               	movwf	___ftmul@f2^0,c
  4305   002468  0EC8               	movlw	200
  4306   00246A  6E12               	movwf	(___ftmul@f2+1)^0,c
  4307   00246C  0E42               	movlw	66
  4308   00246E  6E13               	movwf	(___ftmul@f2+2)^0,c
  4309   002470  C031  F00E         	movff	EscribeLCD_2Decimales@a,___ftmul@f1
  4310   002474  C032  F00F         	movff	EscribeLCD_2Decimales@a+1,___ftmul@f1+1
  4311   002478  C033  F010         	movff	EscribeLCD_2Decimales@a+2,___ftmul@f1+2
  4312   00247C  EC79  F00F         	call	___ftmul	;wreg free
  4313   002480  C00E  F01D         	movff	?___ftmul,___fttol@f1
  4314   002484  C00F  F01E         	movff	?___ftmul+1,___fttol@f1+1
  4315   002488  C010  F01F         	movff	?___ftmul+2,___fttol@f1+2
  4316   00248C  ECD9  F010         	call	___fttol	;wreg free
  4317   002490  C01D  F034         	movff	?___fttol,EscribeLCD_2Decimales@num
  4318   002494  C01E  F035         	movff	?___fttol+1,EscribeLCD_2Decimales@num+1
  4319                           
  4320                           ;LibLCDXC8.h: 335: decimalesP=num%100;
  4321   002498  C034  F006         	movff	EscribeLCD_2Decimales@num,___awmod@dividend
  4322   00249C  C035  F007         	movff	EscribeLCD_2Decimales@num+1,___awmod@dividend+1
  4323   0024A0  0E00               	movlw	0
  4324   0024A2  6E09               	movwf	(___awmod@divisor+1)^0,c
  4325   0024A4  0E64               	movlw	100
  4326   0024A6  6E08               	movwf	___awmod@divisor^0,c
  4327   0024A8  ECA0  F012         	call	___awmod	;wreg free
  4328   0024AC  5006               	movf	?___awmod^0,w,c
  4329   0024AE  6E36               	movwf	EscribeLCD_2Decimales@decimalesP^0,c
  4330                           
  4331                           ;LibLCDXC8.h: 336: EscribeLCD_n8(unidad,1);
  4332   0024B0  0E01               	movlw	1
  4333   0024B2  6E2C               	movwf	EscribeLCD_n8@b^0,c
  4334   0024B4  5037               	movf	EscribeLCD_2Decimales@unidad^0,w,c
  4335   0024B6  EC66  F010         	call	_EscribeLCD_n8
  4336                           
  4337                           ;LibLCDXC8.h: 337: EscribeLCD_c('.');
  4338   0024BA  0E2E               	movlw	46
  4339   0024BC  ECC3  F014         	call	_EscribeLCD_c
  4340                           
  4341                           ;LibLCDXC8.h: 338: EscribeLCD_n8(decimalesP,2);
  4342   0024C0  0E02               	movlw	2
  4343   0024C2  6E2C               	movwf	EscribeLCD_n8@b^0,c
  4344   0024C4  5036               	movf	EscribeLCD_2Decimales@decimalesP^0,w,c
  4345   0024C6  EC66  F010         	call	_EscribeLCD_n8
  4346   0024CA  0012               	return		;funcret
  4347   0024CC                     __end_of_EscribeLCD_2Decimales:
  4348                           	callstack 0
  4349                           
  4350 ;; *************** function ___fttol *****************
  4351 ;; Defined at:
  4352 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\fttol.c"
  4353 ;; Parameters:    Size  Location     Type
  4354 ;;  f1              3   28[COMRAM] float 
  4355 ;; Auto vars:     Size  Location     Type
  4356 ;;  lval            4   38[COMRAM] unsigned long 
  4357 ;;  exp1            1   42[COMRAM] unsigned char 
  4358 ;;  sign1           1   37[COMRAM] unsigned char 
  4359 ;; Return value:  Size  Location     Type
  4360 ;;                  4   28[COMRAM] long 
  4361 ;; Registers used:
  4362 ;;		wreg, status,2, status,0
  4363 ;; Tracked objects:
  4364 ;;		On entry : 0/0
  4365 ;;		On exit  : 0/0
  4366 ;;		Unchanged: 0/0
  4367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4368 ;;      Params:         4       0       0       0       0       0       0       0       0
  4369 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4370 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4371 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4372 ;;Total ram usage:       15 bytes
  4373 ;; Hardware stack levels used: 1
  4374 ;; Hardware stack levels required when called: 3
  4375 ;; This function calls:
  4376 ;;		Nothing
  4377 ;; This function is called by:
  4378 ;;		_EscribeLCD_2Decimales
  4379 ;;		_ModuloOperacion
  4380 ;; This function uses a non-reentrant model
  4381 ;;
  4382                           
  4383                           	psect	text13
  4384   0021B2                     __ptext13:
  4385                           	callstack 0
  4386   0021B2                     ___fttol:
  4387                           	callstack 26
  4388                           
  4389                           ;incstack = 0
  4390   0021B2  C01F  F021         	movff	___fttol@f1+2,??___fttol
  4391   0021B6  6A22               	clrf	(??___fttol+1)^0,c
  4392   0021B8  6A23               	clrf	(??___fttol+2)^0,c
  4393   0021BA  341E               	rlcf	(___fttol@f1+1)^0,w,c
  4394   0021BC  3621               	rlcf	??___fttol^0,f,c
  4395   0021BE  E301               	bnc	u1601
  4396   0021C0  8022               	bsf	(??___fttol+1)^0,0,c
  4397   0021C2                     u1601:
  4398   0021C2  5021               	movf	??___fttol^0,w,c
  4399   0021C4  6E2B               	movwf	___fttol@exp1^0,c
  4400   0021C6  502B               	movf	___fttol@exp1^0,w,c
  4401   0021C8  A4D8               	btfss	status,2,c
  4402   0021CA  D009               	goto	l2345
  4403   0021CC                     u1610:
  4404   0021CC  0E00               	movlw	0
  4405   0021CE  6E1D               	movwf	?___fttol^0,c
  4406   0021D0  0E00               	movlw	0
  4407   0021D2  6E1E               	movwf	(?___fttol+1)^0,c
  4408   0021D4  0E00               	movlw	0
  4409   0021D6  6E1F               	movwf	(?___fttol+2)^0,c
  4410   0021D8  0E00               	movlw	0
  4411   0021DA  6E20               	movwf	(?___fttol+3)^0,c
  4412   0021DC  0012               	return	
  4413   0021DE                     l2345:
  4414   0021DE  0E17               	movlw	23
  4415   0021E0  6E21               	movwf	??___fttol^0,c
  4416   0021E2  C01D  F022         	movff	___fttol@f1,??___fttol+1
  4417   0021E6  C01E  F023         	movff	___fttol@f1+1,??___fttol+2
  4418   0021EA  C01F  F024         	movff	___fttol@f1+2,??___fttol+3
  4419   0021EE  2821               	incf	??___fttol^0,w,c
  4420   0021F0  6E25               	movwf	(??___fttol+4)^0,c
  4421   0021F2  D004               	goto	u1620
  4422   0021F4                     u1625:
  4423   0021F4  90D8               	bcf	status,0,c
  4424   0021F6  3224               	rrcf	(??___fttol+3)^0,f,c
  4425   0021F8  3223               	rrcf	(??___fttol+2)^0,f,c
  4426   0021FA  3222               	rrcf	(??___fttol+1)^0,f,c
  4427   0021FC                     u1620:
  4428   0021FC  2E25               	decfsz	(??___fttol+4)^0,f,c
  4429   0021FE  D7FA               	goto	u1625
  4430   002200  5022               	movf	(??___fttol+1)^0,w,c
  4431   002202  6E26               	movwf	___fttol@sign1^0,c
  4432   002204  8E1E               	bsf	(___fttol@f1+1)^0,7,c
  4433   002206  0EFF               	movlw	255
  4434   002208  161D               	andwf	___fttol@f1^0,f,c
  4435   00220A  0EFF               	movlw	255
  4436   00220C  161E               	andwf	(___fttol@f1+1)^0,f,c
  4437   00220E  0E00               	movlw	0
  4438   002210  161F               	andwf	(___fttol@f1+2)^0,f,c
  4439   002212  501D               	movf	___fttol@f1^0,w,c
  4440   002214  6E27               	movwf	___fttol@lval^0,c
  4441   002216  501E               	movf	(___fttol@f1+1)^0,w,c
  4442   002218  6E28               	movwf	(___fttol@lval+1)^0,c
  4443   00221A  501F               	movf	(___fttol@f1+2)^0,w,c
  4444   00221C  6E29               	movwf	(___fttol@lval+2)^0,c
  4445   00221E  6A2A               	clrf	(___fttol@lval+3)^0,c
  4446   002220  0E8E               	movlw	142
  4447   002222  5E2B               	subwf	___fttol@exp1^0,f,c
  4448   002224  AE2B               	btfss	___fttol@exp1^0,7,c
  4449   002226  D00D               	goto	l2367
  4450   002228  502B               	movf	___fttol@exp1^0,w,c
  4451   00222A  0A80               	xorlw	128
  4452   00222C  0F8F               	addlw	143
  4453   00222E  A0D8               	btfss	status,0,c
  4454   002230  D7CD               	goto	u1610
  4455   002232                     l2363:
  4456   002232  90D8               	bcf	status,0,c
  4457   002234  322A               	rrcf	(___fttol@lval+3)^0,f,c
  4458   002236  3229               	rrcf	(___fttol@lval+2)^0,f,c
  4459   002238  3228               	rrcf	(___fttol@lval+1)^0,f,c
  4460   00223A  3227               	rrcf	___fttol@lval^0,f,c
  4461   00223C  3E2B               	incfsz	___fttol@exp1^0,f,c
  4462   00223E  D7F9               	goto	l2363
  4463   002240  D00D               	goto	u1660
  4464   002242                     l2367:
  4465   002242  0E17               	movlw	23
  4466   002244  642B               	cpfsgt	___fttol@exp1^0,c
  4467   002246  D007               	goto	l2375
  4468   002248  D7C1               	goto	u1610
  4469   00224A                     l2373:
  4470   00224A  90D8               	bcf	status,0,c
  4471   00224C  3627               	rlcf	___fttol@lval^0,f,c
  4472   00224E  3628               	rlcf	(___fttol@lval+1)^0,f,c
  4473   002250  3629               	rlcf	(___fttol@lval+2)^0,f,c
  4474   002252  362A               	rlcf	(___fttol@lval+3)^0,f,c
  4475   002254  062B               	decf	___fttol@exp1^0,f,c
  4476   002256                     l2375:
  4477   002256  502B               	movf	___fttol@exp1^0,w,c
  4478   002258  A4D8               	btfss	status,2,c
  4479   00225A  D7F7               	goto	l2373
  4480   00225C                     u1660:
  4481   00225C  5026               	movf	___fttol@sign1^0,w,c
  4482   00225E  B4D8               	btfsc	status,2,c
  4483   002260  D008               	goto	l2381
  4484   002262  1E2A               	comf	(___fttol@lval+3)^0,f,c
  4485   002264  1E29               	comf	(___fttol@lval+2)^0,f,c
  4486   002266  1E28               	comf	(___fttol@lval+1)^0,f,c
  4487   002268  6C27               	negf	___fttol@lval^0,c
  4488   00226A  0E00               	movlw	0
  4489   00226C  2228               	addwfc	(___fttol@lval+1)^0,f,c
  4490   00226E  2229               	addwfc	(___fttol@lval+2)^0,f,c
  4491   002270  222A               	addwfc	(___fttol@lval+3)^0,f,c
  4492   002272                     l2381:
  4493   002272  C027  F01D         	movff	___fttol@lval,?___fttol
  4494   002276  C028  F01E         	movff	___fttol@lval+1,?___fttol+1
  4495   00227A  C029  F01F         	movff	___fttol@lval+2,?___fttol+2
  4496   00227E  C02A  F020         	movff	___fttol@lval+3,?___fttol+3
  4497   002282  0012               	return		;funcret
  4498   002284                     __end_of___fttol:
  4499                           	callstack 0
  4500                           
  4501 ;; *************** function ___ftmul *****************
  4502 ;; Defined at:
  4503 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftmul.c"
  4504 ;; Parameters:    Size  Location     Type
  4505 ;;  f1              3   13[COMRAM] float 
  4506 ;;  f2              3   16[COMRAM] float 
  4507 ;; Auto vars:     Size  Location     Type
  4508 ;;  f3_as_produc    3   23[COMRAM] unsigned um
  4509 ;;  sign            1   27[COMRAM] unsigned char 
  4510 ;;  cntr            1   26[COMRAM] unsigned char 
  4511 ;;  exp             1   22[COMRAM] unsigned char 
  4512 ;; Return value:  Size  Location     Type
  4513 ;;                  3   13[COMRAM] float 
  4514 ;; Registers used:
  4515 ;;		wreg, status,2, status,0, cstack
  4516 ;; Tracked objects:
  4517 ;;		On entry : 0/0
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4521 ;;      Params:         6       0       0       0       0       0       0       0       0
  4522 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4523 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4524 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4525 ;;Total ram usage:       15 bytes
  4526 ;; Hardware stack levels used: 1
  4527 ;; Hardware stack levels required when called: 4
  4528 ;; This function calls:
  4529 ;;		___ftpack
  4530 ;; This function is called by:
  4531 ;;		_EscribeLCD_2Decimales
  4532 ;; This function uses a non-reentrant model
  4533 ;;
  4534                           
  4535                           	psect	text14
  4536   001EF2                     __ptext14:
  4537                           	callstack 0
  4538   001EF2                     ___ftmul:
  4539                           	callstack 24
  4540                           
  4541                           ;incstack = 0
  4542   001EF2  C010  F014         	movff	___ftmul@f1+2,??___ftmul
  4543   001EF6  6A15               	clrf	(??___ftmul+1)^0,c
  4544   001EF8  6A16               	clrf	(??___ftmul+2)^0,c
  4545   001EFA  340F               	rlcf	(___ftmul@f1+1)^0,w,c
  4546   001EFC  3614               	rlcf	??___ftmul^0,f,c
  4547   001EFE  E301               	bnc	u1481
  4548   001F00  8015               	bsf	(??___ftmul+1)^0,0,c
  4549   001F02                     u1481:
  4550   001F02  5014               	movf	??___ftmul^0,w,c
  4551   001F04  6E17               	movwf	___ftmul@exp^0,c
  4552   001F06  5017               	movf	___ftmul@exp^0,w,c
  4553   001F08  A4D8               	btfss	status,2,c
  4554   001F0A  D007               	goto	l2261
  4555   001F0C  0E00               	movlw	0
  4556   001F0E  6E0E               	movwf	?___ftmul^0,c
  4557   001F10  0E00               	movlw	0
  4558   001F12  6E0F               	movwf	(?___ftmul+1)^0,c
  4559   001F14  0E00               	movlw	0
  4560   001F16  6E10               	movwf	(?___ftmul+2)^0,c
  4561   001F18  0012               	return	
  4562   001F1A                     l2261:
  4563   001F1A  C013  F014         	movff	___ftmul@f2+2,??___ftmul
  4564   001F1E  6A15               	clrf	(??___ftmul+1)^0,c
  4565   001F20  6A16               	clrf	(??___ftmul+2)^0,c
  4566   001F22  3412               	rlcf	(___ftmul@f2+1)^0,w,c
  4567   001F24  3614               	rlcf	??___ftmul^0,f,c
  4568   001F26  E301               	bnc	u1501
  4569   001F28  8015               	bsf	(??___ftmul+1)^0,0,c
  4570   001F2A                     u1501:
  4571   001F2A  5014               	movf	??___ftmul^0,w,c
  4572   001F2C  6E1C               	movwf	___ftmul@sign^0,c
  4573   001F2E  501C               	movf	___ftmul@sign^0,w,c
  4574   001F30  A4D8               	btfss	status,2,c
  4575   001F32  D007               	goto	l2267
  4576   001F34  0E00               	movlw	0
  4577   001F36  6E0E               	movwf	?___ftmul^0,c
  4578   001F38  0E00               	movlw	0
  4579   001F3A  6E0F               	movwf	(?___ftmul+1)^0,c
  4580   001F3C  0E00               	movlw	0
  4581   001F3E  6E10               	movwf	(?___ftmul+2)^0,c
  4582   001F40  0012               	return	
  4583   001F42                     l2267:
  4584   001F42  501C               	movf	___ftmul@sign^0,w,c
  4585   001F44  0F7B               	addlw	123
  4586   001F46  2617               	addwf	___ftmul@exp^0,f,c
  4587   001F48  C010  F01C         	movff	___ftmul@f1+2,___ftmul@sign
  4588   001F4C  5013               	movf	(___ftmul@f2+2)^0,w,c
  4589   001F4E  1A1C               	xorwf	___ftmul@sign^0,f,c
  4590   001F50  0E80               	movlw	128
  4591   001F52  161C               	andwf	___ftmul@sign^0,f,c
  4592   001F54  8E0F               	bsf	(___ftmul@f1+1)^0,7,c
  4593   001F56  8E12               	bsf	(___ftmul@f2+1)^0,7,c
  4594   001F58  0EFF               	movlw	255
  4595   001F5A  1611               	andwf	___ftmul@f2^0,f,c
  4596   001F5C  0EFF               	movlw	255
  4597   001F5E  1612               	andwf	(___ftmul@f2+1)^0,f,c
  4598   001F60  0E00               	movlw	0
  4599   001F62  1613               	andwf	(___ftmul@f2+2)^0,f,c
  4600   001F64  0E00               	movlw	0
  4601   001F66  6E18               	movwf	___ftmul@f3_as_product^0,c
  4602   001F68  0E00               	movlw	0
  4603   001F6A  6E19               	movwf	(___ftmul@f3_as_product+1)^0,c
  4604   001F6C  0E00               	movlw	0
  4605   001F6E  6E1A               	movwf	(___ftmul@f3_as_product+2)^0,c
  4606   001F70  0E07               	movlw	7
  4607   001F72  6E1B               	movwf	___ftmul@cntr^0,c
  4608   001F74                     l2281:
  4609   001F74  A00E               	btfss	___ftmul@f1^0,0,c
  4610   001F76  D006               	goto	l2285
  4611   001F78  5011               	movf	___ftmul@f2^0,w,c
  4612   001F7A  2618               	addwf	___ftmul@f3_as_product^0,f,c
  4613   001F7C  5012               	movf	(___ftmul@f2+1)^0,w,c
  4614   001F7E  2219               	addwfc	(___ftmul@f3_as_product+1)^0,f,c
  4615   001F80  5013               	movf	(___ftmul@f2+2)^0,w,c
  4616   001F82  221A               	addwfc	(___ftmul@f3_as_product+2)^0,f,c
  4617   001F84                     l2285:
  4618   001F84  90D8               	bcf	status,0,c
  4619   001F86  3210               	rrcf	(___ftmul@f1+2)^0,f,c
  4620   001F88  320F               	rrcf	(___ftmul@f1+1)^0,f,c
  4621   001F8A  320E               	rrcf	___ftmul@f1^0,f,c
  4622   001F8C  90D8               	bcf	status,0,c
  4623   001F8E  3611               	rlcf	___ftmul@f2^0,f,c
  4624   001F90  3612               	rlcf	(___ftmul@f2+1)^0,f,c
  4625   001F92  3613               	rlcf	(___ftmul@f2+2)^0,f,c
  4626   001F94  2E1B               	decfsz	___ftmul@cntr^0,f,c
  4627   001F96  D7EE               	goto	l2281
  4628   001F98  0E09               	movlw	9
  4629   001F9A  6E1B               	movwf	___ftmul@cntr^0,c
  4630   001F9C                     l2291:
  4631   001F9C  A00E               	btfss	___ftmul@f1^0,0,c
  4632   001F9E  D006               	goto	l2295
  4633   001FA0  5011               	movf	___ftmul@f2^0,w,c
  4634   001FA2  2618               	addwf	___ftmul@f3_as_product^0,f,c
  4635   001FA4  5012               	movf	(___ftmul@f2+1)^0,w,c
  4636   001FA6  2219               	addwfc	(___ftmul@f3_as_product+1)^0,f,c
  4637   001FA8  5013               	movf	(___ftmul@f2+2)^0,w,c
  4638   001FAA  221A               	addwfc	(___ftmul@f3_as_product+2)^0,f,c
  4639   001FAC                     l2295:
  4640   001FAC  90D8               	bcf	status,0,c
  4641   001FAE  3210               	rrcf	(___ftmul@f1+2)^0,f,c
  4642   001FB0  320F               	rrcf	(___ftmul@f1+1)^0,f,c
  4643   001FB2  320E               	rrcf	___ftmul@f1^0,f,c
  4644   001FB4  90D8               	bcf	status,0,c
  4645   001FB6  321A               	rrcf	(___ftmul@f3_as_product+2)^0,f,c
  4646   001FB8  3219               	rrcf	(___ftmul@f3_as_product+1)^0,f,c
  4647   001FBA  3218               	rrcf	___ftmul@f3_as_product^0,f,c
  4648   001FBC  2E1B               	decfsz	___ftmul@cntr^0,f,c
  4649   001FBE  D7EE               	goto	l2291
  4650   001FC0  C018  F006         	movff	___ftmul@f3_as_product,___ftpack@arg
  4651   001FC4  C019  F007         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4652   001FC8  C01A  F008         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4653   001FCC  C017  F009         	movff	___ftmul@exp,___ftpack@exp
  4654   001FD0  C01C  F00A         	movff	___ftmul@sign,___ftpack@sign
  4655   001FD4  EC42  F011         	call	___ftpack	;wreg free
  4656   001FD8  C006  F00E         	movff	?___ftpack,?___ftmul
  4657   001FDC  C007  F00F         	movff	?___ftpack+1,?___ftmul+1
  4658   001FE0  C008  F010         	movff	?___ftpack+2,?___ftmul+2
  4659   001FE4  0012               	return		;funcret
  4660   001FE6                     __end_of___ftmul:
  4661                           	callstack 0
  4662                           
  4663 ;; *************** function ___ftpack *****************
  4664 ;; Defined at:
  4665 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\float.c"
  4666 ;; Parameters:    Size  Location     Type
  4667 ;;  arg             3    5[COMRAM] unsigned um
  4668 ;;  exp             1    8[COMRAM] unsigned char 
  4669 ;;  sign            1    9[COMRAM] unsigned char 
  4670 ;; Auto vars:     Size  Location     Type
  4671 ;;		None
  4672 ;; Return value:  Size  Location     Type
  4673 ;;                  3    5[COMRAM] float 
  4674 ;; Registers used:
  4675 ;;		wreg, status,2, status,0
  4676 ;; Tracked objects:
  4677 ;;		On entry : 0/0
  4678 ;;		On exit  : 0/0
  4679 ;;		Unchanged: 0/0
  4680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4681 ;;      Params:         5       0       0       0       0       0       0       0       0
  4682 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4683 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4684 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4685 ;;Total ram usage:        8 bytes
  4686 ;; Hardware stack levels used: 1
  4687 ;; Hardware stack levels required when called: 3
  4688 ;; This function calls:
  4689 ;;		Nothing
  4690 ;; This function is called by:
  4691 ;;		___awtoft
  4692 ;;		___ftdiv
  4693 ;;		___ftmul
  4694 ;;		___lbtoft
  4695 ;; This function uses a non-reentrant model
  4696 ;;
  4697                           
  4698                           	psect	text15
  4699   002284                     __ptext15:
  4700                           	callstack 0
  4701   002284                     ___ftpack:
  4702                           	callstack 25
  4703                           
  4704                           ;incstack = 0
  4705   002284  5009               	movf	___ftpack@exp^0,w,c
  4706   002286  B4D8               	btfsc	status,2,c
  4707   002288  D005               	goto	u1340
  4708   00228A  5006               	movf	___ftpack@arg^0,w,c
  4709   00228C  1007               	iorwf	(___ftpack@arg+1)^0,w,c
  4710   00228E  1008               	iorwf	(___ftpack@arg+2)^0,w,c
  4711   002290  A4D8               	btfss	status,2,c
  4712   002292  D00C               	goto	l2121
  4713   002294                     u1340:
  4714   002294  0E00               	movlw	0
  4715   002296  6E06               	movwf	?___ftpack^0,c
  4716   002298  0E00               	movlw	0
  4717   00229A  6E07               	movwf	(?___ftpack+1)^0,c
  4718   00229C  0E00               	movlw	0
  4719   00229E  6E08               	movwf	(?___ftpack+2)^0,c
  4720   0022A0  0012               	return	
  4721   0022A2                     l2119:
  4722   0022A2  2A09               	incf	___ftpack@exp^0,f,c
  4723   0022A4  90D8               	bcf	status,0,c
  4724   0022A6  3208               	rrcf	(___ftpack@arg+2)^0,f,c
  4725   0022A8  3207               	rrcf	(___ftpack@arg+1)^0,f,c
  4726   0022AA  3206               	rrcf	___ftpack@arg^0,f,c
  4727   0022AC                     l2121:
  4728   0022AC  0E00               	movlw	0
  4729   0022AE  1406               	andwf	___ftpack@arg^0,w,c
  4730   0022B0  6E0B               	movwf	??___ftpack^0,c
  4731   0022B2  0E00               	movlw	0
  4732   0022B4  1407               	andwf	(___ftpack@arg+1)^0,w,c
  4733   0022B6  6E0C               	movwf	(??___ftpack+1)^0,c
  4734   0022B8  0EFE               	movlw	254
  4735   0022BA  1408               	andwf	(___ftpack@arg+2)^0,w,c
  4736   0022BC  6E0D               	movwf	(??___ftpack+2)^0,c
  4737   0022BE  500B               	movf	??___ftpack^0,w,c
  4738   0022C0  100C               	iorwf	(??___ftpack+1)^0,w,c
  4739   0022C2  100D               	iorwf	(??___ftpack+2)^0,w,c
  4740   0022C4  B4D8               	btfsc	status,2,c
  4741   0022C6  D00C               	goto	l2127
  4742   0022C8  D7EC               	goto	l2119
  4743   0022CA                     l2123:
  4744   0022CA  2A09               	incf	___ftpack@exp^0,f,c
  4745   0022CC  0E01               	movlw	1
  4746   0022CE  2606               	addwf	___ftpack@arg^0,f,c
  4747   0022D0  0E00               	movlw	0
  4748   0022D2  2207               	addwfc	(___ftpack@arg+1)^0,f,c
  4749   0022D4  0E00               	movlw	0
  4750   0022D6  2208               	addwfc	(___ftpack@arg+2)^0,f,c
  4751   0022D8  90D8               	bcf	status,0,c
  4752   0022DA  3208               	rrcf	(___ftpack@arg+2)^0,f,c
  4753   0022DC  3207               	rrcf	(___ftpack@arg+1)^0,f,c
  4754   0022DE  3206               	rrcf	___ftpack@arg^0,f,c
  4755   0022E0                     l2127:
  4756   0022E0  0E00               	movlw	0
  4757   0022E2  1406               	andwf	___ftpack@arg^0,w,c
  4758   0022E4  6E0B               	movwf	??___ftpack^0,c
  4759   0022E6  0E00               	movlw	0
  4760   0022E8  1407               	andwf	(___ftpack@arg+1)^0,w,c
  4761   0022EA  6E0C               	movwf	(??___ftpack+1)^0,c
  4762   0022EC  0EFF               	movlw	255
  4763   0022EE  1408               	andwf	(___ftpack@arg+2)^0,w,c
  4764   0022F0  6E0D               	movwf	(??___ftpack+2)^0,c
  4765   0022F2  500B               	movf	??___ftpack^0,w,c
  4766   0022F4  100C               	iorwf	(??___ftpack+1)^0,w,c
  4767   0022F6  100D               	iorwf	(??___ftpack+2)^0,w,c
  4768   0022F8  B4D8               	btfsc	status,2,c
  4769   0022FA  D006               	goto	l2131
  4770   0022FC  D7E6               	goto	l2123
  4771   0022FE                     l2129:
  4772   0022FE  0609               	decf	___ftpack@exp^0,f,c
  4773   002300  90D8               	bcf	status,0,c
  4774   002302  3606               	rlcf	___ftpack@arg^0,f,c
  4775   002304  3607               	rlcf	(___ftpack@arg+1)^0,f,c
  4776   002306  3608               	rlcf	(___ftpack@arg+2)^0,f,c
  4777   002308                     l2131:
  4778   002308  BE07               	btfsc	(___ftpack@arg+1)^0,7,c
  4779   00230A  D003               	goto	u1380
  4780   00230C  0E02               	movlw	2
  4781   00230E  6009               	cpfslt	___ftpack@exp^0,c
  4782   002310  D7F6               	goto	l2129
  4783   002312                     u1380:
  4784   002312  A009               	btfss	___ftpack@exp^0,0,c
  4785   002314  9E07               	bcf	(___ftpack@arg+1)^0,7,c
  4786   002316  90D8               	bcf	status,0,c
  4787   002318  3209               	rrcf	___ftpack@exp^0,f,c
  4788   00231A  5009               	movf	___ftpack@exp^0,w,c
  4789   00231C  1208               	iorwf	(___ftpack@arg+2)^0,f,c
  4790   00231E  500A               	movf	___ftpack@sign^0,w,c
  4791   002320  A4D8               	btfss	status,2,c
  4792   002322  8E08               	bsf	(___ftpack@arg+2)^0,7,c
  4793   002324  C006  F006         	movff	___ftpack@arg,?___ftpack
  4794   002328  C007  F007         	movff	___ftpack@arg+1,?___ftpack+1
  4795   00232C  C008  F008         	movff	___ftpack@arg+2,?___ftpack+2
  4796   002330  0012               	return		;funcret
  4797   002332                     __end_of___ftpack:
  4798                           	callstack 0
  4799                           
  4800 ;; *************** function ___awmod *****************
  4801 ;; Defined at:
  4802 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\awmod.c"
  4803 ;; Parameters:    Size  Location     Type
  4804 ;;  dividend        2    5[COMRAM] int 
  4805 ;;  divisor         2    7[COMRAM] int 
  4806 ;; Auto vars:     Size  Location     Type
  4807 ;;  sign            1   10[COMRAM] unsigned char 
  4808 ;;  counter         1    9[COMRAM] unsigned char 
  4809 ;; Return value:  Size  Location     Type
  4810 ;;                  2    5[COMRAM] int 
  4811 ;; Registers used:
  4812 ;;		wreg, status,2, status,0
  4813 ;; Tracked objects:
  4814 ;;		On entry : 0/0
  4815 ;;		On exit  : 0/0
  4816 ;;		Unchanged: 0/0
  4817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4818 ;;      Params:         4       0       0       0       0       0       0       0       0
  4819 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4820 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4821 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4822 ;;Total ram usage:        6 bytes
  4823 ;; Hardware stack levels used: 1
  4824 ;; Hardware stack levels required when called: 3
  4825 ;; This function calls:
  4826 ;;		Nothing
  4827 ;; This function is called by:
  4828 ;;		_EscribeLCD_2Decimales
  4829 ;; This function uses a non-reentrant model
  4830 ;;
  4831                           
  4832                           	psect	text16
  4833   002540                     __ptext16:
  4834                           	callstack 0
  4835   002540                     ___awmod:
  4836                           	callstack 25
  4837                           
  4838                           ;incstack = 0
  4839   002540  0E00               	movlw	0
  4840   002542  6E0B               	movwf	___awmod@sign^0,c
  4841   002544  AE07               	btfss	(___awmod@dividend+1)^0,7,c
  4842   002546  D006               	goto	l2311
  4843   002548  6C06               	negf	___awmod@dividend^0,c
  4844   00254A  1E07               	comf	(___awmod@dividend+1)^0,f,c
  4845   00254C  B0D8               	btfsc	status,0,c
  4846   00254E  2A07               	incf	(___awmod@dividend+1)^0,f,c
  4847   002550  0E01               	movlw	1
  4848   002552  6E0B               	movwf	___awmod@sign^0,c
  4849   002554                     l2311:
  4850   002554  AE09               	btfss	(___awmod@divisor+1)^0,7,c
  4851   002556  D004               	goto	l2315
  4852   002558  6C08               	negf	___awmod@divisor^0,c
  4853   00255A  1E09               	comf	(___awmod@divisor+1)^0,f,c
  4854   00255C  B0D8               	btfsc	status,0,c
  4855   00255E  2A09               	incf	(___awmod@divisor+1)^0,f,c
  4856   002560                     l2315:
  4857   002560  5008               	movf	___awmod@divisor^0,w,c
  4858   002562  1009               	iorwf	(___awmod@divisor+1)^0,w,c
  4859   002564  B4D8               	btfsc	status,2,c
  4860   002566  D018               	goto	l2331
  4861   002568  0E01               	movlw	1
  4862   00256A  6E0A               	movwf	___awmod@counter^0,c
  4863   00256C  D004               	goto	l2321
  4864   00256E                     l2319:
  4865   00256E  90D8               	bcf	status,0,c
  4866   002570  3608               	rlcf	___awmod@divisor^0,f,c
  4867   002572  3609               	rlcf	(___awmod@divisor+1)^0,f,c
  4868   002574  2A0A               	incf	___awmod@counter^0,f,c
  4869   002576                     l2321:
  4870   002576  AE09               	btfss	(___awmod@divisor+1)^0,7,c
  4871   002578  D7FA               	goto	l2319
  4872   00257A                     u1570:
  4873   00257A  5008               	movf	___awmod@divisor^0,w,c
  4874   00257C  5C06               	subwf	___awmod@dividend^0,w,c
  4875   00257E  5009               	movf	(___awmod@divisor+1)^0,w,c
  4876   002580  5807               	subwfb	(___awmod@dividend+1)^0,w,c
  4877   002582  A0D8               	btfss	status,0,c
  4878   002584  D004               	goto	l2327
  4879   002586  5008               	movf	___awmod@divisor^0,w,c
  4880   002588  5E06               	subwf	___awmod@dividend^0,f,c
  4881   00258A  5009               	movf	(___awmod@divisor+1)^0,w,c
  4882   00258C  5A07               	subwfb	(___awmod@dividend+1)^0,f,c
  4883   00258E                     l2327:
  4884   00258E  90D8               	bcf	status,0,c
  4885   002590  3209               	rrcf	(___awmod@divisor+1)^0,f,c
  4886   002592  3208               	rrcf	___awmod@divisor^0,f,c
  4887   002594  2E0A               	decfsz	___awmod@counter^0,f,c
  4888   002596  D7F1               	goto	u1570
  4889   002598                     l2331:
  4890   002598  500B               	movf	___awmod@sign^0,w,c
  4891   00259A  B4D8               	btfsc	status,2,c
  4892   00259C  D004               	goto	l2335
  4893   00259E  6C06               	negf	___awmod@dividend^0,c
  4894   0025A0  1E07               	comf	(___awmod@dividend+1)^0,f,c
  4895   0025A2  B0D8               	btfsc	status,0,c
  4896   0025A4  2A07               	incf	(___awmod@dividend+1)^0,f,c
  4897   0025A6                     l2335:
  4898   0025A6  C006  F006         	movff	___awmod@dividend,?___awmod
  4899   0025AA  C007  F007         	movff	___awmod@dividend+1,?___awmod+1
  4900   0025AE  0012               	return		;funcret
  4901   0025B0                     __end_of___awmod:
  4902                           	callstack 0
  4903                           
  4904 ;; *************** function _EscribeLCD_n8 *****************
  4905 ;; Defined at:
  4906 ;;		line 128 in file "LibLCDXC8.h"
  4907 ;; Parameters:    Size  Location     Type
  4908 ;;  a               1    wreg     unsigned char 
  4909 ;;  b               1   43[COMRAM] unsigned char 
  4910 ;; Auto vars:     Size  Location     Type
  4911 ;;  a               1   47[COMRAM] unsigned char 
  4912 ;;  unidad          1   46[COMRAM] unsigned char 
  4913 ;;  decena          1   45[COMRAM] unsigned char 
  4914 ;;  centena         1   44[COMRAM] unsigned char 
  4915 ;; Return value:  Size  Location     Type
  4916 ;;                  1    wreg      void 
  4917 ;; Registers used:
  4918 ;;		wreg, status,2, status,0, cstack
  4919 ;; Tracked objects:
  4920 ;;		On entry : 0/0
  4921 ;;		On exit  : 0/0
  4922 ;;		Unchanged: 0/0
  4923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4924 ;;      Params:         1       0       0       0       0       0       0       0       0
  4925 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4926 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4927 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4928 ;;Total ram usage:        5 bytes
  4929 ;; Hardware stack levels used: 1
  4930 ;; Hardware stack levels required when called: 5
  4931 ;; This function calls:
  4932 ;;		_EnviaDato
  4933 ;;		_HabilitaLCD
  4934 ;;		_RetardoLCD
  4935 ;;		___lbdiv
  4936 ;;		___lbmod
  4937 ;; This function is called by:
  4938 ;;		_EscribeLCD_2Decimales
  4939 ;;		_ModuloOperacion
  4940 ;; This function uses a non-reentrant model
  4941 ;;
  4942                           
  4943                           	psect	text17
  4944   0020CC                     __ptext17:
  4945                           	callstack 0
  4946   0020CC                     _EscribeLCD_n8:
  4947                           	callstack 24
  4948                           
  4949                           ;incstack = 0
  4950                           ;EscribeLCD_n8@a stored from wreg
  4951   0020CC  6E30               	movwf	EscribeLCD_n8@a^0,c
  4952                           
  4953                           ;LibLCDXC8.h: 133: unsigned char centena,decena,unidad;;LibLCDXC8.h: 134: LATD2=1;
  4954   0020CE  848C               	bsf	3980,2,c	;volatile
  4955                           
  4956                           ;LibLCDXC8.h: 135: switch(b){
  4957   0020D0  D065               	goto	l2231
  4958   0020D2                     l2199:
  4959   0020D2  0E0A               	movlw	10
  4960   0020D4  6E06               	movwf	___lbmod@divisor^0,c
  4961   0020D6  5030               	movf	EscribeLCD_n8@a^0,w,c
  4962   0020D8  EC5C  F014         	call	___lbmod
  4963   0020DC  6E2F               	movwf	EscribeLCD_n8@unidad^0,c
  4964                           
  4965                           ;LibLCDXC8.h: 137: EnviaDato(unidad+48);
  4966   0020DE  502F               	movf	EscribeLCD_n8@unidad^0,w,c
  4967   0020E0  0F30               	addlw	48
  4968   0020E2  ECC0  F013         	call	_EnviaDato
  4969                           
  4970                           ;LibLCDXC8.h: 138: HabilitaLCD();
  4971   0020E6  ECEB  F014         	call	_HabilitaLCD	;wreg free
  4972                           
  4973                           ;LibLCDXC8.h: 139: RetardoLCD(4);
  4974   0020EA  0E04               	movlw	4
  4975   0020EC  EC95  F013         	call	_RetardoLCD
  4976                           
  4977                           ;LibLCDXC8.h: 140: break;
  4978   0020F0  0012               	return	
  4979   0020F2                     l2205:
  4980   0020F2  0E0A               	movlw	10
  4981   0020F4  6E0A               	movwf	___lbdiv@divisor^0,c
  4982   0020F6  0E64               	movlw	100
  4983   0020F8  6E06               	movwf	___lbmod@divisor^0,c
  4984   0020FA  5030               	movf	EscribeLCD_n8@a^0,w,c
  4985   0020FC  EC5C  F014         	call	___lbmod
  4986   002100  EC23  F014         	call	___lbdiv
  4987   002104  6E2E               	movwf	EscribeLCD_n8@decena^0,c
  4988                           
  4989                           ;LibLCDXC8.h: 142: unidad=a%10;
  4990   002106  0E0A               	movlw	10
  4991   002108  6E06               	movwf	___lbmod@divisor^0,c
  4992   00210A  5030               	movf	EscribeLCD_n8@a^0,w,c
  4993   00210C  EC5C  F014         	call	___lbmod
  4994   002110  6E2F               	movwf	EscribeLCD_n8@unidad^0,c
  4995                           
  4996                           ;LibLCDXC8.h: 143: EnviaDato(decena+48);
  4997   002112  502E               	movf	EscribeLCD_n8@decena^0,w,c
  4998   002114  0F30               	addlw	48
  4999   002116  ECC0  F013         	call	_EnviaDato
  5000                           
  5001                           ;LibLCDXC8.h: 144: HabilitaLCD();
  5002   00211A  ECEB  F014         	call	_HabilitaLCD	;wreg free
  5003                           
  5004                           ;LibLCDXC8.h: 145: RetardoLCD(4);
  5005   00211E  0E04               	movlw	4
  5006   002120  EC95  F013         	call	_RetardoLCD
  5007                           
  5008                           ;LibLCDXC8.h: 146: EnviaDato(unidad+48);
  5009   002124  502F               	movf	EscribeLCD_n8@unidad^0,w,c
  5010   002126  0F30               	addlw	48
  5011   002128  ECC0  F013         	call	_EnviaDato
  5012                           
  5013                           ;LibLCDXC8.h: 147: HabilitaLCD();
  5014   00212C  ECEB  F014         	call	_HabilitaLCD	;wreg free
  5015                           
  5016                           ;LibLCDXC8.h: 148: RetardoLCD(4);
  5017   002130  0E04               	movlw	4
  5018   002132  EC95  F013         	call	_RetardoLCD
  5019                           
  5020                           ;LibLCDXC8.h: 149: break;
  5021   002136  0012               	return	
  5022   002138                     l2215:
  5023   002138  0E64               	movlw	100
  5024   00213A  6E0A               	movwf	___lbdiv@divisor^0,c
  5025   00213C  5030               	movf	EscribeLCD_n8@a^0,w,c
  5026   00213E  EC23  F014         	call	___lbdiv
  5027   002142  6E2D               	movwf	EscribeLCD_n8@centena^0,c
  5028                           
  5029                           ;LibLCDXC8.h: 151: decena=(a%100)/10;
  5030   002144  0E0A               	movlw	10
  5031   002146  6E0A               	movwf	___lbdiv@divisor^0,c
  5032   002148  0E64               	movlw	100
  5033   00214A  6E06               	movwf	___lbmod@divisor^0,c
  5034   00214C  5030               	movf	EscribeLCD_n8@a^0,w,c
  5035   00214E  EC5C  F014         	call	___lbmod
  5036   002152  EC23  F014         	call	___lbdiv
  5037   002156  6E2E               	movwf	EscribeLCD_n8@decena^0,c
  5038                           
  5039                           ;LibLCDXC8.h: 152: unidad=a%10;
  5040   002158  0E0A               	movlw	10
  5041   00215A  6E06               	movwf	___lbmod@divisor^0,c
  5042   00215C  5030               	movf	EscribeLCD_n8@a^0,w,c
  5043   00215E  EC5C  F014         	call	___lbmod
  5044   002162  6E2F               	movwf	EscribeLCD_n8@unidad^0,c
  5045                           
  5046                           ;LibLCDXC8.h: 153: EnviaDato(centena+48);
  5047   002164  502D               	movf	EscribeLCD_n8@centena^0,w,c
  5048   002166  0F30               	addlw	48
  5049   002168  ECC0  F013         	call	_EnviaDato
  5050                           
  5051                           ;LibLCDXC8.h: 154: HabilitaLCD();
  5052   00216C  ECEB  F014         	call	_HabilitaLCD	;wreg free
  5053                           
  5054                           ;LibLCDXC8.h: 155: RetardoLCD(4);
  5055   002170  0E04               	movlw	4
  5056   002172  EC95  F013         	call	_RetardoLCD
  5057                           
  5058                           ;LibLCDXC8.h: 156: EnviaDato(decena+48);
  5059   002176  502E               	movf	EscribeLCD_n8@decena^0,w,c
  5060   002178  0F30               	addlw	48
  5061   00217A  ECC0  F013         	call	_EnviaDato
  5062                           
  5063                           ;LibLCDXC8.h: 157: HabilitaLCD();
  5064   00217E  ECEB  F014         	call	_HabilitaLCD	;wreg free
  5065                           
  5066                           ;LibLCDXC8.h: 158: RetardoLCD(4);
  5067   002182  0E04               	movlw	4
  5068   002184  EC95  F013         	call	_RetardoLCD
  5069                           
  5070                           ;LibLCDXC8.h: 159: EnviaDato(unidad+48);
  5071   002188  502F               	movf	EscribeLCD_n8@unidad^0,w,c
  5072   00218A  0F30               	addlw	48
  5073   00218C  ECC0  F013         	call	_EnviaDato
  5074                           
  5075                           ;LibLCDXC8.h: 160: HabilitaLCD();
  5076   002190  ECEB  F014         	call	_HabilitaLCD	;wreg free
  5077                           
  5078                           ;LibLCDXC8.h: 161: RetardoLCD(4);
  5079   002194  0E04               	movlw	4
  5080   002196  EC95  F013         	call	_RetardoLCD
  5081                           
  5082                           ;LibLCDXC8.h: 162: break;
  5083   00219A  0012               	return	
  5084   00219C                     l2231:
  5085   00219C  502C               	movf	EscribeLCD_n8@b^0,w,c
  5086                           
  5087                           ; Switch size 1, requested type "simple"
  5088                           ; Number of cases is 3, Range of values is 1 to 3
  5089                           ; switch strategies available:
  5090                           ; Name         Instructions Cycles
  5091                           ; simple_byte           10     6 (average)
  5092                           ;	Chosen strategy is simple_byte
  5093   00219E  0A01               	xorlw	1	; case 1
  5094   0021A0  B4D8               	btfsc	status,2,c
  5095   0021A2  D797               	goto	l2199
  5096   0021A4  0A03               	xorlw	3	; case 2
  5097   0021A6  B4D8               	btfsc	status,2,c
  5098   0021A8  D7A4               	goto	l2205
  5099   0021AA  0A01               	xorlw	1	; case 3
  5100   0021AC  A4D8               	btfss	status,2,c
  5101   0021AE  0012               	return	
  5102   0021B0  D7C3               	goto	l2215
  5103   0021B2                     __end_of_EscribeLCD_n8:
  5104                           	callstack 0
  5105                           
  5106 ;; *************** function ___lbmod *****************
  5107 ;; Defined at:
  5108 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lbmod.c"
  5109 ;; Parameters:    Size  Location     Type
  5110 ;;  dividend        1    wreg     unsigned char 
  5111 ;;  divisor         1    5[COMRAM] unsigned char 
  5112 ;; Auto vars:     Size  Location     Type
  5113 ;;  dividend        1    6[COMRAM] unsigned char 
  5114 ;;  rem             1    8[COMRAM] unsigned char 
  5115 ;;  counter         1    7[COMRAM] unsigned char 
  5116 ;; Return value:  Size  Location     Type
  5117 ;;                  1    wreg      unsigned char 
  5118 ;; Registers used:
  5119 ;;		wreg, status,2, status,0
  5120 ;; Tracked objects:
  5121 ;;		On entry : 0/0
  5122 ;;		On exit  : 0/0
  5123 ;;		Unchanged: 0/0
  5124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5125 ;;      Params:         1       0       0       0       0       0       0       0       0
  5126 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5127 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5128 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5129 ;;Total ram usage:        4 bytes
  5130 ;; Hardware stack levels used: 1
  5131 ;; Hardware stack levels required when called: 3
  5132 ;; This function calls:
  5133 ;;		Nothing
  5134 ;; This function is called by:
  5135 ;;		_EscribeLCD_n8
  5136 ;;		_ModuloOperacion
  5137 ;; This function uses a non-reentrant model
  5138 ;;
  5139                           
  5140                           	psect	text18
  5141   0028B8                     __ptext18:
  5142                           	callstack 0
  5143   0028B8                     ___lbmod:
  5144                           	callstack 26
  5145                           
  5146                           ;incstack = 0
  5147                           ;___lbmod@dividend stored from wreg
  5148   0028B8  6E07               	movwf	___lbmod@dividend^0,c
  5149   0028BA  0E08               	movlw	8
  5150   0028BC  6E08               	movwf	___lbmod@counter^0,c
  5151   0028BE  0E00               	movlw	0
  5152   0028C0  6E09               	movwf	___lbmod@rem^0,c
  5153   0028C2                     l2175:
  5154   0028C2  90D8               	bcf	status,0,c
  5155   0028C4  3407               	rlcf	___lbmod@dividend^0,w,c
  5156   0028C6  3409               	rlcf	___lbmod@rem^0,w,c
  5157   0028C8  6E09               	movwf	___lbmod@rem^0,c
  5158   0028CA  90D8               	bcf	status,0,c
  5159   0028CC  3607               	rlcf	___lbmod@dividend^0,f,c
  5160   0028CE  5006               	movf	___lbmod@divisor^0,w,c
  5161   0028D0  5C09               	subwf	___lbmod@rem^0,w,c
  5162   0028D2  A0D8               	btfss	status,0,c
  5163   0028D4  D002               	goto	l2183
  5164   0028D6  5006               	movf	___lbmod@divisor^0,w,c
  5165   0028D8  5E09               	subwf	___lbmod@rem^0,f,c
  5166   0028DA                     l2183:
  5167   0028DA  2E08               	decfsz	___lbmod@counter^0,f,c
  5168   0028DC  D7F2               	goto	l2175
  5169   0028DE  5009               	movf	___lbmod@rem^0,w,c
  5170   0028E0  0012               	return		;funcret
  5171   0028E2                     __end_of___lbmod:
  5172                           	callstack 0
  5173                           
  5174 ;; *************** function ___lbdiv *****************
  5175 ;; Defined at:
  5176 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lbdiv.c"
  5177 ;; Parameters:    Size  Location     Type
  5178 ;;  dividend        1    wreg     unsigned char 
  5179 ;;  divisor         1    9[COMRAM] unsigned char 
  5180 ;; Auto vars:     Size  Location     Type
  5181 ;;  dividend        1   10[COMRAM] unsigned char 
  5182 ;;  quotient        1   12[COMRAM] unsigned char 
  5183 ;;  counter         1   11[COMRAM] unsigned char 
  5184 ;; Return value:  Size  Location     Type
  5185 ;;                  1    wreg      unsigned char 
  5186 ;; Registers used:
  5187 ;;		wreg, status,2, status,0
  5188 ;; Tracked objects:
  5189 ;;		On entry : 0/0
  5190 ;;		On exit  : 0/0
  5191 ;;		Unchanged: 0/0
  5192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5193 ;;      Params:         1       0       0       0       0       0       0       0       0
  5194 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5195 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5196 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5197 ;;Total ram usage:        4 bytes
  5198 ;; Hardware stack levels used: 1
  5199 ;; Hardware stack levels required when called: 3
  5200 ;; This function calls:
  5201 ;;		Nothing
  5202 ;; This function is called by:
  5203 ;;		_EscribeLCD_n8
  5204 ;; This function uses a non-reentrant model
  5205 ;;
  5206                           
  5207                           	psect	text19
  5208   002846                     __ptext19:
  5209                           	callstack 0
  5210   002846                     ___lbdiv:
  5211                           	callstack 25
  5212                           
  5213                           ;incstack = 0
  5214                           ;___lbdiv@dividend stored from wreg
  5215   002846  6E0B               	movwf	___lbdiv@dividend^0,c
  5216   002848  0E00               	movlw	0
  5217   00284A  6E0D               	movwf	___lbdiv@quotient^0,c
  5218   00284C  500A               	movf	___lbdiv@divisor^0,w,c
  5219   00284E  B4D8               	btfsc	status,2,c
  5220   002850  D015               	goto	l2169
  5221   002852  0E01               	movlw	1
  5222   002854  6E0C               	movwf	___lbdiv@counter^0,c
  5223   002856  D003               	goto	l2157
  5224   002858                     l2153:
  5225   002858  90D8               	bcf	status,0,c
  5226   00285A  360A               	rlcf	___lbdiv@divisor^0,f,c
  5227   00285C  2A0C               	incf	___lbdiv@counter^0,f,c
  5228   00285E                     l2157:
  5229   00285E  AE0A               	btfss	___lbdiv@divisor^0,7,c
  5230   002860  D7FB               	goto	l2153
  5231   002862                     u1420:
  5232   002862  90D8               	bcf	status,0,c
  5233   002864  360D               	rlcf	___lbdiv@quotient^0,f,c
  5234   002866  500A               	movf	___lbdiv@divisor^0,w,c
  5235   002868  5C0B               	subwf	___lbdiv@dividend^0,w,c
  5236   00286A  A0D8               	btfss	status,0,c
  5237   00286C  D003               	goto	l2165
  5238   00286E  500A               	movf	___lbdiv@divisor^0,w,c
  5239   002870  5E0B               	subwf	___lbdiv@dividend^0,f,c
  5240   002872  800D               	bsf	___lbdiv@quotient^0,0,c
  5241   002874                     l2165:
  5242   002874  90D8               	bcf	status,0,c
  5243   002876  320A               	rrcf	___lbdiv@divisor^0,f,c
  5244   002878  2E0C               	decfsz	___lbdiv@counter^0,f,c
  5245   00287A  D7F3               	goto	u1420
  5246   00287C                     l2169:
  5247   00287C  500D               	movf	___lbdiv@quotient^0,w,c
  5248   00287E  0012               	return		;funcret
  5249   002880                     __end_of___lbdiv:
  5250                           	callstack 0
  5251                           
  5252 ;; *************** function _InicializaLCD *****************
  5253 ;; Defined at:
  5254 ;;		line 67 in file "LibLCDXC8.h"
  5255 ;; Parameters:    Size  Location     Type
  5256 ;;		None
  5257 ;; Auto vars:     Size  Location     Type
  5258 ;;		None
  5259 ;; Return value:  Size  Location     Type
  5260 ;;                  1    wreg      void 
  5261 ;; Registers used:
  5262 ;;		wreg, status,2, status,0, cstack
  5263 ;; Tracked objects:
  5264 ;;		On entry : 0/0
  5265 ;;		On exit  : 0/0
  5266 ;;		Unchanged: 0/0
  5267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5268 ;;      Params:         0       0       0       0       0       0       0       0       0
  5269 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5270 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5271 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5272 ;;Total ram usage:        0 bytes
  5273 ;; Hardware stack levels used: 1
  5274 ;; Hardware stack levels required when called: 6
  5275 ;; This function calls:
  5276 ;;		_BorraLCD
  5277 ;;		_EnviaDato
  5278 ;;		_HabilitaLCD
  5279 ;;		_RetardoLCD
  5280 ;; This function is called by:
  5281 ;;		_main
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           	psect	text20
  5286   002332                     __ptext20:
  5287                           	callstack 0
  5288   002332                     _InicializaLCD:
  5289                           	callstack 24
  5290                           
  5291                           ;LibLCDXC8.h: 69: LATD2=0;
  5292                           
  5293                           ;incstack = 0
  5294   002332  948C               	bcf	3980,2,c	;volatile
  5295                           
  5296                           ;LibLCDXC8.h: 70: if(interfaz==4)
  5297   002334  0E04               	movlw	4
  5298   002336  1842               	xorwf	_interfaz^0,w,c
  5299   002338  A4D8               	btfss	status,2,c
  5300   00233A  D004               	goto	l2631
  5301                           
  5302                           ;LibLCDXC8.h: 71: LATD=(LATD & 0b00001111) | 0x30;
  5303   00233C  508C               	movf	140,w,c	;volatile
  5304   00233E  0B0F               	andlw	15
  5305   002340  0930               	iorlw	48
  5306   002342  D001               	goto	L1
  5307   002344                     l2631:
  5308                           
  5309                           ;LibLCDXC8.h: 72: else;LibLCDXC8.h: 73: LATD=0x3F;
  5310   002344  0E3F               	movlw	63
  5311   002346                     L1:
  5312   002346  6E8C               	movwf	140,c	;volatile
  5313                           
  5314                           ;LibLCDXC8.h: 74: HabilitaLCD();
  5315   002348  ECEB  F014         	call	_HabilitaLCD	;wreg free
  5316                           
  5317                           ;LibLCDXC8.h: 75: RetardoLCD(1);
  5318   00234C  0E01               	movlw	1
  5319   00234E  EC95  F013         	call	_RetardoLCD
  5320                           
  5321                           ;LibLCDXC8.h: 76: if(interfaz==4)
  5322   002352  0E04               	movlw	4
  5323   002354  1842               	xorwf	_interfaz^0,w,c
  5324   002356  A4D8               	btfss	status,2,c
  5325   002358  D004               	goto	l2641
  5326                           
  5327                           ;LibLCDXC8.h: 77: LATD=(LATD & 0b00001111) | 0x30;
  5328   00235A  508C               	movf	140,w,c	;volatile
  5329   00235C  0B0F               	andlw	15
  5330   00235E  0930               	iorlw	48
  5331   002360  D001               	goto	L2
  5332   002362                     l2641:
  5333                           
  5334                           ;LibLCDXC8.h: 78: else;LibLCDXC8.h: 79: LATD=0x3F;
  5335   002362  0E3F               	movlw	63
  5336   002364                     L2:
  5337   002364  6E8C               	movwf	140,c	;volatile
  5338                           
  5339                           ;LibLCDXC8.h: 80: HabilitaLCD();
  5340   002366  ECEB  F014         	call	_HabilitaLCD	;wreg free
  5341                           
  5342                           ;LibLCDXC8.h: 81: RetardoLCD(3);
  5343   00236A  0E03               	movlw	3
  5344   00236C  EC95  F013         	call	_RetardoLCD
  5345                           
  5346                           ;LibLCDXC8.h: 82: if(interfaz==4)
  5347   002370  0E04               	movlw	4
  5348   002372  1842               	xorwf	_interfaz^0,w,c
  5349   002374  A4D8               	btfss	status,2,c
  5350   002376  D004               	goto	l2651
  5351                           
  5352                           ;LibLCDXC8.h: 83: LATD=(LATD & 0b00001111) | 0x30;
  5353   002378  508C               	movf	140,w,c	;volatile
  5354   00237A  0B0F               	andlw	15
  5355   00237C  0930               	iorlw	48
  5356   00237E  D001               	goto	L3
  5357   002380                     l2651:
  5358                           
  5359                           ;LibLCDXC8.h: 84: else;LibLCDXC8.h: 85: LATD=0x3F;
  5360   002380  0E3F               	movlw	63
  5361   002382                     L3:
  5362   002382  6E8C               	movwf	140,c	;volatile
  5363                           
  5364                           ;LibLCDXC8.h: 86: HabilitaLCD();
  5365   002384  ECEB  F014         	call	_HabilitaLCD	;wreg free
  5366                           
  5367                           ;LibLCDXC8.h: 87: RetardoLCD(4);
  5368   002388  0E04               	movlw	4
  5369   00238A  EC95  F013         	call	_RetardoLCD
  5370                           
  5371                           ;LibLCDXC8.h: 88: if(interfaz==4){
  5372   00238E  0E04               	movlw	4
  5373   002390  1842               	xorwf	_interfaz^0,w,c
  5374   002392  A4D8               	btfss	status,2,c
  5375   002394  D011               	goto	l2671
  5376                           
  5377                           ;LibLCDXC8.h: 89: LATD=(LATD & 0b00001111) | 0x20;
  5378   002396  508C               	movf	140,w,c	;volatile
  5379   002398  0B0F               	andlw	15
  5380   00239A  0920               	iorlw	32
  5381   00239C  6E8C               	movwf	140,c	;volatile
  5382                           
  5383                           ;LibLCDXC8.h: 90: HabilitaLCD();
  5384   00239E  ECEB  F014         	call	_HabilitaLCD	;wreg free
  5385                           
  5386                           ;LibLCDXC8.h: 91: RetardoLCD(4);
  5387   0023A2  0E04               	movlw	4
  5388   0023A4  EC95  F013         	call	_RetardoLCD
  5389                           
  5390                           ;LibLCDXC8.h: 92: EnviaDato(0x2F);
  5391   0023A8  0E2F               	movlw	47
  5392   0023AA  ECC0  F013         	call	_EnviaDato
  5393                           
  5394                           ;LibLCDXC8.h: 93: HabilitaLCD();
  5395   0023AE  ECEB  F014         	call	_HabilitaLCD	;wreg free
  5396                           
  5397                           ;LibLCDXC8.h: 94: RetardoLCD(4);
  5398   0023B2  0E04               	movlw	4
  5399   0023B4  EC95  F013         	call	_RetardoLCD
  5400   0023B8                     l2671:
  5401                           
  5402                           ;LibLCDXC8.h: 95: };LibLCDXC8.h: 96: BorraLCD();
  5403   0023B8  ECD9  F014         	call	_BorraLCD	;wreg free
  5404                           
  5405                           ;LibLCDXC8.h: 97: EnviaDato(0xF);
  5406   0023BC  0E0F               	movlw	15
  5407   0023BE  ECC0  F013         	call	_EnviaDato
  5408                           
  5409                           ;LibLCDXC8.h: 98: HabilitaLCD();
  5410   0023C2  ECEB  F014         	call	_HabilitaLCD	;wreg free
  5411                           
  5412                           ;LibLCDXC8.h: 99: RetardoLCD(4);
  5413   0023C6  0E04               	movlw	4
  5414   0023C8  EC95  F013         	call	_RetardoLCD
  5415   0023CC  0012               	return		;funcret
  5416   0023CE                     __end_of_InicializaLCD:
  5417                           	callstack 0
  5418                           
  5419 ;; *************** function _BorraLCD *****************
  5420 ;; Defined at:
  5421 ;;		line 110 in file "LibLCDXC8.h"
  5422 ;; Parameters:    Size  Location     Type
  5423 ;;		None
  5424 ;; Auto vars:     Size  Location     Type
  5425 ;;		None
  5426 ;; Return value:  Size  Location     Type
  5427 ;;                  1    wreg      void 
  5428 ;; Registers used:
  5429 ;;		wreg, status,2, status,0, cstack
  5430 ;; Tracked objects:
  5431 ;;		On entry : 0/0
  5432 ;;		On exit  : 0/0
  5433 ;;		Unchanged: 0/0
  5434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5435 ;;      Params:         0       0       0       0       0       0       0       0       0
  5436 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5437 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5438 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5439 ;;Total ram usage:        0 bytes
  5440 ;; Hardware stack levels used: 1
  5441 ;; Hardware stack levels required when called: 5
  5442 ;; This function calls:
  5443 ;;		_EnviaDato
  5444 ;;		_HabilitaLCD
  5445 ;;		_RetardoLCD
  5446 ;; This function is called by:
  5447 ;;		_InicializaLCD
  5448 ;;		_main
  5449 ;; This function uses a non-reentrant model
  5450 ;;
  5451                           
  5452                           	psect	text21
  5453   0029B2                     __ptext21:
  5454                           	callstack 0
  5455   0029B2                     _BorraLCD:
  5456                           	callstack 24
  5457                           
  5458                           ;LibLCDXC8.h: 112: LATD2=0;
  5459                           
  5460                           ;incstack = 0
  5461   0029B2  948C               	bcf	3980,2,c	;volatile
  5462                           
  5463                           ;LibLCDXC8.h: 113: EnviaDato(0x01);
  5464   0029B4  0E01               	movlw	1
  5465   0029B6  ECC0  F013         	call	_EnviaDato
  5466                           
  5467                           ;LibLCDXC8.h: 114: HabilitaLCD();
  5468   0029BA  ECEB  F014         	call	_HabilitaLCD	;wreg free
  5469                           
  5470                           ;LibLCDXC8.h: 115: RetardoLCD(2);
  5471   0029BE  0E02               	movlw	2
  5472   0029C0  EC95  F013         	call	_RetardoLCD
  5473   0029C4  0012               	return		;funcret
  5474   0029C6                     __end_of_BorraLCD:
  5475                           	callstack 0
  5476                           
  5477 ;; *************** function _GuardarASCII *****************
  5478 ;; Defined at:
  5479 ;;		line 341 in file "LibLCDXC8.h"
  5480 ;; Parameters:    Size  Location     Type
  5481 ;;  cgram           1    wreg     unsigned char 
  5482 ;;  arreglo         1   10[COMRAM] PTR unsigned char 
  5483 ;;		 -> barco(8), cereza(8), pacman2(8), pacman(8), 
  5484 ;; Auto vars:     Size  Location     Type
  5485 ;;  cgram           1   11[COMRAM] unsigned char 
  5486 ;;  i               1   12[COMRAM] unsigned char 
  5487 ;; Return value:  Size  Location     Type
  5488 ;;                  1    wreg      void 
  5489 ;; Registers used:
  5490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5491 ;; Tracked objects:
  5492 ;;		On entry : 0/0
  5493 ;;		On exit  : 0/0
  5494 ;;		Unchanged: 0/0
  5495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5496 ;;      Params:         1       0       0       0       0       0       0       0       0
  5497 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5498 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5499 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5500 ;;Total ram usage:        3 bytes
  5501 ;; Hardware stack levels used: 1
  5502 ;; Hardware stack levels required when called: 6
  5503 ;; This function calls:
  5504 ;;		_DireccionaLCD
  5505 ;;		_EscribeLCD_c
  5506 ;; This function is called by:
  5507 ;;		_main
  5508 ;; This function uses a non-reentrant model
  5509 ;;
  5510                           
  5511                           	psect	text22
  5512   0028E2                     __ptext22:
  5513                           	callstack 0
  5514   0028E2                     _GuardarASCII:
  5515                           	callstack 24
  5516                           
  5517                           ;incstack = 0
  5518                           ;GuardarASCII@cgram stored from wreg
  5519   0028E2  6E0C               	movwf	GuardarASCII@cgram^0,c
  5520                           
  5521                           ;LibLCDXC8.h: 342: unsigned char i;;LibLCDXC8.h: 343: DireccionaLCD(cgram);
  5522   0028E4  500C               	movf	GuardarASCII@cgram^0,w,c
  5523   0028E6  ECCE  F014         	call	_DireccionaLCD
  5524                           
  5525                           ;LibLCDXC8.h: 344: for(i=0;i<8;i++){
  5526   0028EA  0E00               	movlw	0
  5527   0028EC  6E0D               	movwf	GuardarASCII@i^0,c
  5528   0028EE                     l3063:
  5529                           
  5530                           ;LibLCDXC8.h: 345: EscribeLCD_c(arreglo[i]);
  5531   0028EE  500B               	movf	GuardarASCII@arreglo^0,w,c
  5532   0028F0  240D               	addwf	GuardarASCII@i^0,w,c
  5533   0028F2  6ED9               	movwf	fsr2l,c
  5534   0028F4  6ADA               	clrf	fsr2h,c
  5535   0028F6  50DF               	movf	indf2,w,c
  5536   0028F8  ECC3  F014         	call	_EscribeLCD_c
  5537   0028FC  2A0D               	incf	GuardarASCII@i^0,f,c
  5538   0028FE  0E07               	movlw	7
  5539   002900  640D               	cpfsgt	GuardarASCII@i^0,c
  5540   002902  D7F5               	goto	l3063
  5541                           
  5542                           ;LibLCDXC8.h: 346: };LibLCDXC8.h: 347: DireccionaLCD(128);
  5543   002904  0E80               	movlw	128
  5544   002906  ECCE  F014         	call	_DireccionaLCD
  5545   00290A  0012               	return		;funcret
  5546   00290C                     __end_of_GuardarASCII:
  5547                           	callstack 0
  5548                           
  5549 ;; *************** function _EscribeLCD_c *****************
  5550 ;; Defined at:
  5551 ;;		line 118 in file "LibLCDXC8.h"
  5552 ;; Parameters:    Size  Location     Type
  5553 ;;  a               1    wreg     unsigned char 
  5554 ;; Auto vars:     Size  Location     Type
  5555 ;;  a               1    9[COMRAM] unsigned char 
  5556 ;; Return value:  Size  Location     Type
  5557 ;;                  1    wreg      void 
  5558 ;; Registers used:
  5559 ;;		wreg, status,2, status,0, cstack
  5560 ;; Tracked objects:
  5561 ;;		On entry : 0/0
  5562 ;;		On exit  : 0/0
  5563 ;;		Unchanged: 0/0
  5564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5565 ;;      Params:         0       0       0       0       0       0       0       0       0
  5566 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5567 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5568 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5569 ;;Total ram usage:        1 bytes
  5570 ;; Hardware stack levels used: 1
  5571 ;; Hardware stack levels required when called: 5
  5572 ;; This function calls:
  5573 ;;		_EnviaDato
  5574 ;;		_HabilitaLCD
  5575 ;;		_RetardoLCD
  5576 ;; This function is called by:
  5577 ;;		_EscribeLCD_n32
  5578 ;;		_MensajeLCD_Var
  5579 ;;		_EscribeLCD_2Decimales
  5580 ;;		_GuardarASCII
  5581 ;;		_main
  5582 ;;		_ModuloOperacion
  5583 ;; This function uses a non-reentrant model
  5584 ;;
  5585                           
  5586                           	psect	text23
  5587   002986                     __ptext23:
  5588                           	callstack 0
  5589   002986                     _EscribeLCD_c:
  5590                           	callstack 23
  5591                           
  5592                           ;incstack = 0
  5593                           ;EscribeLCD_c@a stored from wreg
  5594   002986  6E0A               	movwf	EscribeLCD_c@a^0,c
  5595                           
  5596                           ;LibLCDXC8.h: 122: LATD2=1;
  5597   002988  848C               	bsf	3980,2,c	;volatile
  5598                           
  5599                           ;LibLCDXC8.h: 123: EnviaDato(a);
  5600   00298A  500A               	movf	EscribeLCD_c@a^0,w,c
  5601   00298C  ECC0  F013         	call	_EnviaDato
  5602                           
  5603                           ;LibLCDXC8.h: 124: HabilitaLCD();
  5604   002990  ECEB  F014         	call	_HabilitaLCD	;wreg free
  5605                           
  5606                           ;LibLCDXC8.h: 125: RetardoLCD(4);
  5607   002994  0E04               	movlw	4
  5608   002996  EC95  F013         	call	_RetardoLCD
  5609   00299A  0012               	return		;funcret
  5610   00299C                     __end_of_EscribeLCD_c:
  5611                           	callstack 0
  5612                           
  5613 ;; *************** function _DireccionaLCD *****************
  5614 ;; Defined at:
  5615 ;;		line 299 in file "LibLCDXC8.h"
  5616 ;; Parameters:    Size  Location     Type
  5617 ;;  a               1    wreg     unsigned char 
  5618 ;; Auto vars:     Size  Location     Type
  5619 ;;  a               1    9[COMRAM] unsigned char 
  5620 ;; Return value:  Size  Location     Type
  5621 ;;                  1    wreg      void 
  5622 ;; Registers used:
  5623 ;;		wreg, status,2, status,0, cstack
  5624 ;; Tracked objects:
  5625 ;;		On entry : 0/0
  5626 ;;		On exit  : 0/0
  5627 ;;		Unchanged: 0/0
  5628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5629 ;;      Params:         0       0       0       0       0       0       0       0       0
  5630 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5631 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5632 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5633 ;;Total ram usage:        1 bytes
  5634 ;; Hardware stack levels used: 1
  5635 ;; Hardware stack levels required when called: 5
  5636 ;; This function calls:
  5637 ;;		_EnviaDato
  5638 ;;		_HabilitaLCD
  5639 ;;		_RetardoLCD
  5640 ;; This function is called by:
  5641 ;;		_GuardarASCII
  5642 ;;		_main
  5643 ;;		_ModuloOperacion
  5644 ;; This function uses a non-reentrant model
  5645 ;;
  5646                           
  5647                           	psect	text24
  5648   00299C                     __ptext24:
  5649                           	callstack 0
  5650   00299C                     _DireccionaLCD:
  5651                           	callstack 24
  5652                           
  5653                           ;incstack = 0
  5654                           ;DireccionaLCD@a stored from wreg
  5655   00299C  6E0A               	movwf	DireccionaLCD@a^0,c
  5656                           
  5657                           ;LibLCDXC8.h: 302: LATD2=0;
  5658   00299E  948C               	bcf	3980,2,c	;volatile
  5659                           
  5660                           ;LibLCDXC8.h: 303: EnviaDato(a);
  5661   0029A0  500A               	movf	DireccionaLCD@a^0,w,c
  5662   0029A2  ECC0  F013         	call	_EnviaDato
  5663                           
  5664                           ;LibLCDXC8.h: 304: HabilitaLCD();
  5665   0029A6  ECEB  F014         	call	_HabilitaLCD	;wreg free
  5666                           
  5667                           ;LibLCDXC8.h: 305: RetardoLCD(4);
  5668   0029AA  0E04               	movlw	4
  5669   0029AC  EC95  F013         	call	_RetardoLCD
  5670   0029B0  0012               	return		;funcret
  5671   0029B2                     __end_of_DireccionaLCD:
  5672                           	callstack 0
  5673                           
  5674 ;; *************** function _EnviaDato *****************
  5675 ;; Defined at:
  5676 ;;		line 55 in file "LibLCDXC8.h"
  5677 ;; Parameters:    Size  Location     Type
  5678 ;;  a               1    wreg     unsigned char 
  5679 ;; Auto vars:     Size  Location     Type
  5680 ;;  a               1    8[COMRAM] unsigned char 
  5681 ;; Return value:  Size  Location     Type
  5682 ;;                  1    wreg      void 
  5683 ;; Registers used:
  5684 ;;		wreg, status,2, status,0, cstack
  5685 ;; Tracked objects:
  5686 ;;		On entry : 0/0
  5687 ;;		On exit  : 0/0
  5688 ;;		Unchanged: 0/0
  5689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5690 ;;      Params:         0       0       0       0       0       0       0       0       0
  5691 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5692 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5693 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5694 ;;Total ram usage:        2 bytes
  5695 ;; Hardware stack levels used: 1
  5696 ;; Hardware stack levels required when called: 4
  5697 ;; This function calls:
  5698 ;;		_HabilitaLCD
  5699 ;;		_RetardoLCD
  5700 ;; This function is called by:
  5701 ;;		_InicializaLCD
  5702 ;;		_BorraLCD
  5703 ;;		_EscribeLCD_c
  5704 ;;		_EscribeLCD_n8
  5705 ;;		_DireccionaLCD
  5706 ;; This function uses a non-reentrant model
  5707 ;;
  5708                           
  5709                           	psect	text25
  5710   002780                     __ptext25:
  5711                           	callstack 0
  5712   002780                     _EnviaDato:
  5713                           	callstack 23
  5714                           
  5715                           ;incstack = 0
  5716                           ;EnviaDato@a stored from wreg
  5717   002780  6E09               	movwf	EnviaDato@a^0,c
  5718                           
  5719                           ;LibLCDXC8.h: 56: if(interfaz==4){
  5720   002782  0E04               	movlw	4
  5721   002784  1842               	xorwf	_interfaz^0,w,c
  5722   002786  A4D8               	btfss	status,2,c
  5723   002788  D017               	goto	l2107
  5724                           
  5725                           ;LibLCDXC8.h: 57: LATD=(LATD & 0b00001111) | (a & 0b11110000);
  5726   00278A  C009  F008         	movff	EnviaDato@a,??_EnviaDato
  5727   00278E  0EF0               	movlw	240
  5728   002790  1608               	andwf	??_EnviaDato^0,f,c
  5729   002792  508C               	movf	140,w,c	;volatile
  5730   002794  0B0F               	andlw	15
  5731   002796  1008               	iorwf	??_EnviaDato^0,w,c
  5732   002798  6E8C               	movwf	140,c	;volatile
  5733                           
  5734                           ;LibLCDXC8.h: 58: HabilitaLCD();
  5735   00279A  ECEB  F014         	call	_HabilitaLCD	;wreg free
  5736                           
  5737                           ;LibLCDXC8.h: 59: RetardoLCD(1);
  5738   00279E  0E01               	movlw	1
  5739   0027A0  EC95  F013         	call	_RetardoLCD
  5740                           
  5741                           ;LibLCDXC8.h: 60: LATD=(LATD & 0b00001111) | (a<<4);
  5742   0027A4  C009  F008         	movff	EnviaDato@a,??_EnviaDato
  5743   0027A8  3A08               	swapf	??_EnviaDato^0,f,c
  5744   0027AA  0EF0               	movlw	240
  5745   0027AC  1608               	andwf	??_EnviaDato^0,f,c
  5746   0027AE  508C               	movf	140,w,c	;volatile
  5747   0027B0  0B0F               	andlw	15
  5748   0027B2  1008               	iorwf	??_EnviaDato^0,w,c
  5749   0027B4  6E8C               	movwf	140,c	;volatile
  5750                           
  5751                           ;LibLCDXC8.h: 63: }else if(interfaz==8){
  5752   0027B6  0012               	return	
  5753   0027B8                     l2107:
  5754   0027B8  0E08               	movlw	8
  5755   0027BA  1842               	xorwf	_interfaz^0,w,c
  5756   0027BC  A4D8               	btfss	status,2,c
  5757   0027BE  0012               	return	
  5758                           
  5759                           ;LibLCDXC8.h: 64: LATD=a;
  5760   0027C0  C009  FF8C         	movff	EnviaDato@a,3980	;volatile
  5761   0027C4  0012               	return		;funcret
  5762   0027C6                     __end_of_EnviaDato:
  5763                           	callstack 0
  5764                           
  5765 ;; *************** function _RetardoLCD *****************
  5766 ;; Defined at:
  5767 ;;		line 308 in file "LibLCDXC8.h"
  5768 ;; Parameters:    Size  Location     Type
  5769 ;;  a               1    wreg     unsigned char 
  5770 ;; Auto vars:     Size  Location     Type
  5771 ;;  a               1    6[COMRAM] unsigned char 
  5772 ;; Return value:  Size  Location     Type
  5773 ;;                  1    wreg      void 
  5774 ;; Registers used:
  5775 ;;		wreg, status,2, status,0
  5776 ;; Tracked objects:
  5777 ;;		On entry : 0/0
  5778 ;;		On exit  : 0/0
  5779 ;;		Unchanged: 0/0
  5780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5781 ;;      Params:         0       0       0       0       0       0       0       0       0
  5782 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5783 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5784 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5785 ;;Total ram usage:        2 bytes
  5786 ;; Hardware stack levels used: 1
  5787 ;; Hardware stack levels required when called: 3
  5788 ;; This function calls:
  5789 ;;		Nothing
  5790 ;; This function is called by:
  5791 ;;		_EnviaDato
  5792 ;;		_InicializaLCD
  5793 ;;		_BorraLCD
  5794 ;;		_EscribeLCD_c
  5795 ;;		_EscribeLCD_n8
  5796 ;;		_DireccionaLCD
  5797 ;; This function uses a non-reentrant model
  5798 ;;
  5799                           
  5800                           	psect	text26
  5801   00272A                     __ptext26:
  5802                           	callstack 0
  5803   00272A                     _RetardoLCD:
  5804                           	callstack 24
  5805                           
  5806                           ;incstack = 0
  5807                           ;RetardoLCD@a stored from wreg
  5808   00272A  6E07               	movwf	RetardoLCD@a^0,c
  5809                           
  5810                           ;LibLCDXC8.h: 309: switch(a){
  5811   00272C  D01B               	goto	l2095
  5812   00272E                     l2085:
  5813   00272E  0E05               	movlw	5
  5814   002730  6E06               	movwf	??_RetardoLCD^0,c
  5815   002732  0EDE               	movlw	222
  5816   002734                     u3017:
  5817   002734  2EE8               	decfsz	wreg,f,c
  5818   002736  D7FE               	bra	u3017
  5819   002738  2E06               	decfsz	??_RetardoLCD^0,f,c
  5820   00273A  D7FC               	bra	u3017
  5821                           
  5822                           ;LibLCDXC8.h: 312: break;
  5823   00273C  0012               	return	
  5824   00273E                     l2087:
  5825   00273E  0E53               	movlw	83
  5826   002740                     u3027:
  5827   002740  2EE8               	decfsz	wreg,f,c
  5828   002742  D7FE               	bra	u3027
  5829   002744  F000               	nop	
  5830                           
  5831                           ;LibLCDXC8.h: 314: _delay((unsigned long)((640)*(1000000/4000000.0)));
  5832   002746  0E35               	movlw	53
  5833   002748                     u3037:
  5834   002748  2EE8               	decfsz	wreg,f,c
  5835   00274A  D7FE               	bra	u3037
  5836   00274C  F000               	nop	
  5837                           
  5838                           ;LibLCDXC8.h: 316: break;
  5839   00274E  0012               	return	
  5840   002750                     l2089:
  5841   002750  0E08               	movlw	8
  5842   002752                     u3047:
  5843   002752  2EE8               	decfsz	wreg,f,c
  5844   002754  D7FE               	bra	u3047
  5845   002756  F000               	nop	
  5846                           
  5847                           ;LibLCDXC8.h: 319: break;
  5848   002758  0012               	return	
  5849   00275A                     l2091:
  5850   00275A  0E03               	movlw	3
  5851   00275C                     u3057:
  5852   00275C  2EE8               	decfsz	wreg,f,c
  5853   00275E  D7FE               	bra	u3057
  5854   002760  F000               	nop	
  5855                           
  5856                           ;LibLCDXC8.h: 322: break;
  5857   002762  0012               	return	
  5858   002764                     l2095:
  5859   002764  5007               	movf	RetardoLCD@a^0,w,c
  5860                           
  5861                           ; Switch size 1, requested type "simple"
  5862                           ; Number of cases is 4, Range of values is 1 to 4
  5863                           ; switch strategies available:
  5864                           ; Name         Instructions Cycles
  5865                           ; simple_byte           13     7 (average)
  5866                           ;	Chosen strategy is simple_byte
  5867   002766  0A01               	xorlw	1	; case 1
  5868   002768  B4D8               	btfsc	status,2,c
  5869   00276A  D7E1               	goto	l2085
  5870   00276C  0A03               	xorlw	3	; case 2
  5871   00276E  B4D8               	btfsc	status,2,c
  5872   002770  D7E6               	goto	l2087
  5873   002772  0A01               	xorlw	1	; case 3
  5874   002774  B4D8               	btfsc	status,2,c
  5875   002776  D7EC               	goto	l2089
  5876   002778  0A07               	xorlw	7	; case 4
  5877   00277A  A4D8               	btfss	status,2,c
  5878   00277C  0012               	return	
  5879   00277E  D7ED               	goto	l2091
  5880   002780                     __end_of_RetardoLCD:
  5881                           	callstack 0
  5882                           
  5883 ;; *************** function _HabilitaLCD *****************
  5884 ;; Defined at:
  5885 ;;		line 102 in file "LibLCDXC8.h"
  5886 ;; Parameters:    Size  Location     Type
  5887 ;;		None
  5888 ;; Auto vars:     Size  Location     Type
  5889 ;;		None
  5890 ;; Return value:  Size  Location     Type
  5891 ;;                  1    wreg      void 
  5892 ;; Registers used:
  5893 ;;		wreg
  5894 ;; Tracked objects:
  5895 ;;		On entry : 0/0
  5896 ;;		On exit  : 0/0
  5897 ;;		Unchanged: 0/0
  5898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5899 ;;      Params:         0       0       0       0       0       0       0       0       0
  5900 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5901 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5902 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5903 ;;Total ram usage:        0 bytes
  5904 ;; Hardware stack levels used: 1
  5905 ;; Hardware stack levels required when called: 3
  5906 ;; This function calls:
  5907 ;;		Nothing
  5908 ;; This function is called by:
  5909 ;;		_EnviaDato
  5910 ;;		_InicializaLCD
  5911 ;;		_BorraLCD
  5912 ;;		_EscribeLCD_c
  5913 ;;		_EscribeLCD_n8
  5914 ;;		_DireccionaLCD
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           	psect	text27
  5919   0029D6                     __ptext27:
  5920                           	callstack 0
  5921   0029D6                     _HabilitaLCD:
  5922                           	callstack 24
  5923                           
  5924                           ;LibLCDXC8.h: 104: LATD3=1;
  5925                           
  5926                           ;incstack = 0
  5927   0029D6  868C               	bsf	3980,3,c	;volatile
  5928                           
  5929                           ;LibLCDXC8.h: 105: _delay((unsigned long)((40)*(1000000/4000000.0)));
  5930   0029D8  0E03               	movlw	3
  5931   0029DA                     u3067:
  5932   0029DA  2EE8               	decfsz	wreg,f,c
  5933   0029DC  D7FE               	bra	u3067
  5934   0029DE  F000               	nop	
  5935                           
  5936                           ;LibLCDXC8.h: 107: LATD3=0;
  5937   0029E0  968C               	bcf	3980,3,c	;volatile
  5938   0029E2  0012               	return		;funcret
  5939   0029E4                     __end_of_HabilitaLCD:
  5940                           	callstack 0
  5941                           
  5942 ;; *************** function _ConfiguraLCD *****************
  5943 ;; Defined at:
  5944 ;;		line 51 in file "LibLCDXC8.h"
  5945 ;; Parameters:    Size  Location     Type
  5946 ;;  a               1    wreg     unsigned char 
  5947 ;; Auto vars:     Size  Location     Type
  5948 ;;  a               1    5[COMRAM] unsigned char 
  5949 ;; Return value:  Size  Location     Type
  5950 ;;                  1    wreg      void 
  5951 ;; Registers used:
  5952 ;;		wreg, status,2, status,0
  5953 ;; Tracked objects:
  5954 ;;		On entry : 0/0
  5955 ;;		On exit  : 0/0
  5956 ;;		Unchanged: 0/0
  5957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5958 ;;      Params:         0       0       0       0       0       0       0       0       0
  5959 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5960 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5961 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5962 ;;Total ram usage:        1 bytes
  5963 ;; Hardware stack levels used: 1
  5964 ;; Hardware stack levels required when called: 3
  5965 ;; This function calls:
  5966 ;;		Nothing
  5967 ;; This function is called by:
  5968 ;;		_main
  5969 ;; This function uses a non-reentrant model
  5970 ;;
  5971                           
  5972                           	psect	text28
  5973   002958                     __ptext28:
  5974                           	callstack 0
  5975   002958                     _ConfiguraLCD:
  5976                           	callstack 27
  5977                           
  5978                           ;incstack = 0
  5979                           ;ConfiguraLCD@a stored from wreg
  5980   002958  6E06               	movwf	ConfiguraLCD@a^0,c
  5981                           
  5982                           ;LibLCDXC8.h: 52: if(a==4 | a ==8)
  5983   00295A  0E04               	movlw	4
  5984   00295C  1806               	xorwf	ConfiguraLCD@a^0,w,c
  5985   00295E  B4D8               	btfsc	status,2,c
  5986   002960  D004               	goto	u1930
  5987   002962  0E08               	movlw	8
  5988   002964  1806               	xorwf	ConfiguraLCD@a^0,w,c
  5989   002966  A4D8               	btfss	status,2,c
  5990   002968  0012               	return	
  5991   00296A                     u1930:
  5992                           
  5993                           ;LibLCDXC8.h: 53: interfaz=a;
  5994   00296A  C006  F042         	movff	ConfiguraLCD@a,_interfaz
  5995   00296E  0012               	return		;funcret
  5996   002970                     __end_of_ConfiguraLCD:
  5997                           	callstack 0
  5998                           
  5999 ;; *************** function _ISR *****************
  6000 ;; Defined at:
  6001 ;;		line 126 in file "PAI.c"
  6002 ;; Parameters:    Size  Location     Type
  6003 ;;		None
  6004 ;; Auto vars:     Size  Location     Type
  6005 ;;		None
  6006 ;; Return value:  Size  Location     Type
  6007 ;;                  1    wreg      void 
  6008 ;; Registers used:
  6009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6010 ;; Tracked objects:
  6011 ;;		On entry : 0/0
  6012 ;;		On exit  : 0/0
  6013 ;;		Unchanged: 0/0
  6014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6015 ;;      Params:         0       0       0       0       0       0       0       0       0
  6016 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6017 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6018 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6019 ;;Total ram usage:        2 bytes
  6020 ;; Hardware stack levels used: 1
  6021 ;; Hardware stack levels required when called: 2
  6022 ;; This function calls:
  6023 ;;		_OpTeclado
  6024 ;; This function is called by:
  6025 ;;		Interrupt level 2
  6026 ;; This function uses a non-reentrant model
  6027 ;;
  6028                           
  6029                           	psect	intcode
  6030   000008                     __pintcode:
  6031                           	callstack 0
  6032   000008                     _ISR:
  6033                           	callstack 23
  6034                           
  6035                           ;incstack = 0
  6036   000008  825A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6037   00000A  EDB4  F00E         	call	int_func,f	;refresh shadow registers
  6038                           
  6039                           	psect	intcode_body
  6040   001D68                     __pintcode_body:
  6041                           	callstack 23
  6042   001D68                     int_func:
  6043                           	callstack 23
  6044   001D68  0006               	pop		; remove dummy address from shadow register refresh
  6045   001D6A  CFD9 F004          	movff	fsr2l,??_ISR
  6046   001D6E  CFDA F005          	movff	fsr2h,??_ISR+1
  6047                           
  6048                           ;PAI.c: 128: if(RBIF==1){
  6049   001D72  A0F2               	btfss	4082,0,c	;volatile
  6050   001D74  D0A4               	goto	i2l3041
  6051                           
  6052                           ;PAI.c: 129: if(PORTB!=0b11110000){
  6053   001D76  0EF0               	movlw	240
  6054   001D78  1881               	xorwf	129,w,c	;volatile
  6055   001D7A  B4D8               	btfsc	status,2,c
  6056   001D7C  D09F               	goto	i2l3039
  6057                           
  6058                           ;PAI.c: 130: LATB=0b11111110;
  6059   001D7E  0EFE               	movlw	254
  6060   001D80  6E8A               	movwf	138,c	;volatile
  6061                           
  6062                           ;PAI.c: 131: if(RB4==0) {
  6063   001D82  B881               	btfsc	3969,4,c	;volatile
  6064   001D84  D00E               	goto	i2l217
  6065                           
  6066                           ;PAI.c: 132: if(RA0==0)OpTeclado(2, '+');
  6067   001D86  B080               	btfsc	3968,0,c	;volatile
  6068   001D88  D006               	goto	i2l2985
  6069   001D8A  0E2B               	movlw	43
  6070   001D8C  6E02               	movwf	OpTeclado@A^0,c
  6071   001D8E  0E02               	movlw	2
  6072   001D90  EC03  F014         	call	_OpTeclado
  6073   001D94  D08B               	goto	i2l3033
  6074   001D96                     i2l2985:
  6075                           
  6076                           ;PAI.c: 133: else OpTeclado(2, '^');
  6077   001D96  0E5E               	movlw	94
  6078   001D98  6E02               	movwf	OpTeclado@A^0,c
  6079   001D9A  0E02               	movlw	2
  6080   001D9C  EC03  F014         	call	_OpTeclado
  6081   001DA0  D085               	goto	i2l3033
  6082   001DA2                     i2l217:
  6083                           
  6084                           ;PAI.c: 135: else if(RB5==0){
  6085   001DA2  BA81               	btfsc	3969,5,c	;volatile
  6086   001DA4  D00E               	goto	i2l221
  6087                           
  6088                           ;PAI.c: 136: if(RA0==0) OpTeclado(2, '-');
  6089   001DA6  B080               	btfsc	3968,0,c	;volatile
  6090   001DA8  D006               	goto	i2l2991
  6091   001DAA  0E2D               	movlw	45
  6092   001DAC  6E02               	movwf	OpTeclado@A^0,c
  6093   001DAE  0E02               	movlw	2
  6094   001DB0  EC03  F014         	call	_OpTeclado
  6095   001DB4  D07B               	goto	i2l3033
  6096   001DB6                     i2l2991:
  6097                           
  6098                           ;PAI.c: 137: else OpTeclado(2, '!');
  6099   001DB6  0E21               	movlw	33
  6100   001DB8  6E02               	movwf	OpTeclado@A^0,c
  6101   001DBA  0E02               	movlw	2
  6102   001DBC  EC03  F014         	call	_OpTeclado
  6103                           
  6104                           ;PAI.c: 139: }
  6105   001DC0  D075               	goto	i2l3033
  6106   001DC2                     i2l221:
  6107                           
  6108                           ;PAI.c: 140: else if(RB6==0) OpTeclado(2, 'x');
  6109   001DC2  BC81               	btfsc	3969,6,c	;volatile
  6110   001DC4  D006               	goto	i2l225
  6111   001DC6  0E78               	movlw	120
  6112   001DC8  6E02               	movwf	OpTeclado@A^0,c
  6113   001DCA  0E02               	movlw	2
  6114   001DCC  EC03  F014         	call	_OpTeclado
  6115   001DD0  D06D               	goto	i2l3033
  6116   001DD2                     i2l225:
  6117                           
  6118                           ;PAI.c: 141: else if(RB7==0) OpTeclado(2, '/');
  6119   001DD2  BE81               	btfsc	3969,7,c	;volatile
  6120   001DD4  D006               	goto	i2l2997
  6121   001DD6  0E2F               	movlw	47
  6122   001DD8  6E02               	movwf	OpTeclado@A^0,c
  6123   001DDA  0E02               	movlw	2
  6124   001DDC  EC03  F014         	call	_OpTeclado
  6125   001DE0  D065               	goto	i2l3033
  6126   001DE2                     i2l2997:
  6127                           
  6128                           ;PAI.c: 142: else{;PAI.c: 143: LATB=0b11111101;
  6129   001DE2  0EFD               	movlw	253
  6130   001DE4  6E8A               	movwf	138,c	;volatile
  6131                           
  6132                           ;PAI.c: 144: if(RB4==0) OpTeclado(3, '=');
  6133   001DE6  B881               	btfsc	3969,4,c	;volatile
  6134   001DE8  D006               	goto	i2l229
  6135   001DEA  0E3D               	movlw	61
  6136   001DEC  6E02               	movwf	OpTeclado@A^0,c
  6137   001DEE  0E03               	movlw	3
  6138   001DF0  EC03  F014         	call	_OpTeclado
  6139   001DF4  D05B               	goto	i2l3033
  6140   001DF6                     i2l229:
  6141                           
  6142                           ;PAI.c: 145: else if(RB5==0) OpTeclado(1, '9');
  6143   001DF6  BA81               	btfsc	3969,5,c	;volatile
  6144   001DF8  D006               	goto	i2l231
  6145   001DFA  0E39               	movlw	57
  6146   001DFC  6E02               	movwf	OpTeclado@A^0,c
  6147   001DFE  0E01               	movlw	1
  6148   001E00  EC03  F014         	call	_OpTeclado
  6149   001E04  D053               	goto	i2l3033
  6150   001E06                     i2l231:
  6151                           
  6152                           ;PAI.c: 146: else if(RB6==0) OpTeclado(1, '6');
  6153   001E06  BC81               	btfsc	3969,6,c	;volatile
  6154   001E08  D006               	goto	i2l233
  6155   001E0A  0E36               	movlw	54
  6156   001E0C  6E02               	movwf	OpTeclado@A^0,c
  6157   001E0E  0E01               	movlw	1
  6158   001E10  EC03  F014         	call	_OpTeclado
  6159   001E14  D04B               	goto	i2l3033
  6160   001E16                     i2l233:
  6161                           
  6162                           ;PAI.c: 147: else if(RB7==0) OpTeclado(1, '3');
  6163   001E16  BE81               	btfsc	3969,7,c	;volatile
  6164   001E18  D006               	goto	i2l3009
  6165   001E1A  0E33               	movlw	51
  6166   001E1C  6E02               	movwf	OpTeclado@A^0,c
  6167   001E1E  0E01               	movlw	1
  6168   001E20  EC03  F014         	call	_OpTeclado
  6169   001E24  D043               	goto	i2l3033
  6170   001E26                     i2l3009:
  6171                           
  6172                           ;PAI.c: 148: else{;PAI.c: 149: LATB=0b11111011;
  6173   001E26  0EFB               	movlw	251
  6174   001E28  6E8A               	movwf	138,c	;volatile
  6175                           
  6176                           ;PAI.c: 150: if(RB4==0) OpTeclado(1, '0');
  6177   001E2A  B881               	btfsc	3969,4,c	;volatile
  6178   001E2C  D006               	goto	i2l237
  6179   001E2E  0E30               	movlw	48
  6180   001E30  6E02               	movwf	OpTeclado@A^0,c
  6181   001E32  0E01               	movlw	1
  6182   001E34  EC03  F014         	call	_OpTeclado
  6183   001E38  D039               	goto	i2l3033
  6184   001E3A                     i2l237:
  6185                           
  6186                           ;PAI.c: 151: else if(RB5==0) OpTeclado(1, '8');
  6187   001E3A  BA81               	btfsc	3969,5,c	;volatile
  6188   001E3C  D006               	goto	i2l239
  6189   001E3E  0E38               	movlw	56
  6190   001E40  6E02               	movwf	OpTeclado@A^0,c
  6191   001E42  0E01               	movlw	1
  6192   001E44  EC03  F014         	call	_OpTeclado
  6193   001E48  D031               	goto	i2l3033
  6194   001E4A                     i2l239:
  6195                           
  6196                           ;PAI.c: 152: else if(RB6==0) OpTeclado(1, '5');
  6197   001E4A  BC81               	btfsc	3969,6,c	;volatile
  6198   001E4C  D006               	goto	i2l241
  6199   001E4E  0E35               	movlw	53
  6200   001E50  6E02               	movwf	OpTeclado@A^0,c
  6201   001E52  0E01               	movlw	1
  6202   001E54  EC03  F014         	call	_OpTeclado
  6203   001E58  D029               	goto	i2l3033
  6204   001E5A                     i2l241:
  6205                           
  6206                           ;PAI.c: 153: else if(RB7==0) OpTeclado(1, '2');
  6207   001E5A  BE81               	btfsc	3969,7,c	;volatile
  6208   001E5C  D006               	goto	i2l3021
  6209   001E5E  0E32               	movlw	50
  6210   001E60  6E02               	movwf	OpTeclado@A^0,c
  6211   001E62  0E01               	movlw	1
  6212   001E64  EC03  F014         	call	_OpTeclado
  6213   001E68  D021               	goto	i2l3033
  6214   001E6A                     i2l3021:
  6215                           
  6216                           ;PAI.c: 154: else{;PAI.c: 155: LATB=0b11110111;
  6217   001E6A  0EF7               	movlw	247
  6218   001E6C  6E8A               	movwf	138,c	;volatile
  6219                           
  6220                           ;PAI.c: 156: if(RB4==0) OpTeclado(4,' ');
  6221   001E6E  B881               	btfsc	3969,4,c	;volatile
  6222   001E70  D006               	goto	i2l245
  6223   001E72  0E20               	movlw	32
  6224   001E74  6E02               	movwf	OpTeclado@A^0,c
  6225   001E76  0E04               	movlw	4
  6226   001E78  EC03  F014         	call	_OpTeclado
  6227   001E7C  D017               	goto	i2l3033
  6228   001E7E                     i2l245:
  6229                           
  6230                           ;PAI.c: 157: else if(RB5==0) OpTeclado(1, '7');
  6231   001E7E  BA81               	btfsc	3969,5,c	;volatile
  6232   001E80  D006               	goto	i2l247
  6233   001E82  0E37               	movlw	55
  6234   001E84  6E02               	movwf	OpTeclado@A^0,c
  6235   001E86  0E01               	movlw	1
  6236   001E88  EC03  F014         	call	_OpTeclado
  6237   001E8C  D00F               	goto	i2l3033
  6238   001E8E                     i2l247:
  6239                           
  6240                           ;PAI.c: 158: else if(RB6==0) OpTeclado(1, '4');
  6241   001E8E  BC81               	btfsc	3969,6,c	;volatile
  6242   001E90  D006               	goto	i2l249
  6243   001E92  0E34               	movlw	52
  6244   001E94  6E02               	movwf	OpTeclado@A^0,c
  6245   001E96  0E01               	movlw	1
  6246   001E98  EC03  F014         	call	_OpTeclado
  6247   001E9C  D007               	goto	i2l3033
  6248   001E9E                     i2l249:
  6249                           
  6250                           ;PAI.c: 159: else if(RB7==0) OpTeclado(1, '1');
  6251   001E9E  BE81               	btfsc	3969,7,c	;volatile
  6252   001EA0  D005               	goto	i2l3033
  6253   001EA2  0E31               	movlw	49
  6254   001EA4  6E02               	movwf	OpTeclado@A^0,c
  6255   001EA6  0E01               	movlw	1
  6256   001EA8  EC03  F014         	call	_OpTeclado
  6257   001EAC                     i2l3033:
  6258                           
  6259                           ;PAI.c: 160: };PAI.c: 161: };PAI.c: 162: };PAI.c: 163: LATB=0b11110000;
  6260   001EAC  0EF0               	movlw	240
  6261   001EAE  6E8A               	movwf	138,c	;volatile
  6262                           
  6263                           ;PAI.c: 164: activado=1;
  6264   001EB0  0E01               	movlw	1
  6265   001EB2  6E54               	movwf	_activado^0,c
  6266                           
  6267                           ;PAI.c: 165: TMR0=26473;
  6268   001EB4  0E67               	movlw	103
  6269   001EB6  6ED7               	movwf	215,c	;volatile
  6270   001EB8  0E69               	movlw	105
  6271   001EBA  6ED6               	movwf	214,c	;volatile
  6272   001EBC                     i2l3039:
  6273                           
  6274                           ;PAI.c: 166: };PAI.c: 167: RBIF=0;
  6275   001EBC  90F2               	bcf	4082,0,c	;volatile
  6276   001EBE                     i2l3041:
  6277                           
  6278                           ;PAI.c: 168: };PAI.c: 170: if(TMR1IF==1){
  6279   001EBE  A09E               	btfss	3998,0,c	;volatile
  6280   001EC0  D00A               	goto	i2u259_45
  6281                           
  6282                           ;PAI.c: 171: TMR1=3036;
  6283   001EC2  0E0B               	movlw	11
  6284   001EC4  6ECF               	movwf	207,c	;volatile
  6285   001EC6  0EDC               	movlw	220
  6286   001EC8  6ECE               	movwf	206,c	;volatile
  6287                           
  6288                           ;PAI.c: 172: TMR1IF=0;
  6289   001ECA  909E               	bcf	3998,0,c	;volatile
  6290                           
  6291                           ;PAI.c: 173: LATD0=LATD0^1;
  6292   001ECC  B08C               	btfsc	3980,0,c	;volatile
  6293   001ECE  D002               	goto	i2u258_40
  6294   001ED0  808C               	bsf	3980,0,c	;volatile
  6295   001ED2  D001               	goto	i2u259_45
  6296   001ED4                     i2u258_40:
  6297   001ED4  908C               	bcf	3980,0,c	;volatile
  6298   001ED6                     i2u259_45:
  6299                           
  6300                           ;PAI.c: 174: };PAI.c: 176: if(TMR0IF==1){
  6301   001ED6  A4F2               	btfss	4082,2,c	;volatile
  6302   001ED8  D006               	goto	i2l254
  6303                           
  6304                           ;PAI.c: 177: TMR0=26473;
  6305   001EDA  0E67               	movlw	103
  6306   001EDC  6ED7               	movwf	215,c	;volatile
  6307   001EDE  0E69               	movlw	105
  6308   001EE0  6ED6               	movwf	214,c	;volatile
  6309                           
  6310                           ;PAI.c: 178: TMR0IF=0;
  6311   001EE2  94F2               	bcf	4082,2,c	;volatile
  6312   001EE4  0003               	sleep		;# 
  6313   001EE6                     i2l254:
  6314   001EE6  C005  FFDA         	movff	??_ISR+1,fsr2h
  6315   001EEA  C004  FFD9         	movff	??_ISR,fsr2l
  6316   001EEE  925A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6317   001EF0  0011               	retfie		f
  6318   001EF2                     __end_of_ISR:
  6319                           	callstack 0
  6320                           
  6321 ;; *************** function _OpTeclado *****************
  6322 ;; Defined at:
  6323 ;;		line 183 in file "PAI.c"
  6324 ;; Parameters:    Size  Location     Type
  6325 ;;  c               1    wreg     unsigned char 
  6326 ;;  A               1    1[COMRAM] unsigned char 
  6327 ;; Auto vars:     Size  Location     Type
  6328 ;;  c               1    2[COMRAM] unsigned char 
  6329 ;; Return value:  Size  Location     Type
  6330 ;;                  1    wreg      void 
  6331 ;; Registers used:
  6332 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6333 ;; Tracked objects:
  6334 ;;		On entry : 0/0
  6335 ;;		On exit  : 0/0
  6336 ;;		Unchanged: 0/0
  6337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6338 ;;      Params:         1       0       0       0       0       0       0       0       0
  6339 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6340 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6341 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6342 ;;Total ram usage:        2 bytes
  6343 ;; Hardware stack levels used: 1
  6344 ;; Hardware stack levels required when called: 1
  6345 ;; This function calls:
  6346 ;;		_ControlError
  6347 ;; This function is called by:
  6348 ;;		_ISR
  6349 ;; This function uses a non-reentrant model
  6350 ;;
  6351                           
  6352                           	psect	text30
  6353   002806                     __ptext30:
  6354                           	callstack 0
  6355   002806                     _OpTeclado:
  6356                           	callstack 23
  6357                           
  6358                           ;incstack = 0
  6359                           ;OpTeclado@c stored from wreg
  6360   002806  6E03               	movwf	OpTeclado@c^0,c
  6361                           
  6362                           ;PAI.c: 184: Cambio=ControlError(c);
  6363   002808  5003               	movf	OpTeclado@c^0,w,c
  6364   00280A  EC0B  F013         	call	_ControlError
  6365   00280E  6E56               	movwf	_Cambio^0,c
  6366                           
  6367                           ;PAI.c: 185: if(Cambio==1){
  6368   002810  0456               	decf	_Cambio^0,w,c
  6369   002812  A4D8               	btfss	status,2,c
  6370   002814  0012               	return	
  6371                           
  6372                           ;PAI.c: 186: if(A==' ') {borrar=1;cont--;operacion[cont]=A;}
  6373   002816  0E20               	movlw	32
  6374   002818  1802               	xorwf	OpTeclado@A^0,w,c
  6375   00281A  A4D8               	btfss	status,2,c
  6376   00281C  D00A               	goto	i2l2843
  6377   00281E  0E01               	movlw	1
  6378   002820  6E58               	movwf	_borrar^0,c
  6379   002822  0659               	decf	_cont^0,f,c
  6380   002824  5059               	movf	_cont^0,w,c
  6381   002826  0F3D               	addlw	low _operacion
  6382   002828  6ED9               	movwf	fsr2l,c
  6383   00282A  6ADA               	clrf	fsr2h,c
  6384   00282C  C002  FFDF         	movff	OpTeclado@A,indf2
  6385   002830  D002               	goto	i2l2845
  6386   002832                     i2l2843:
  6387                           
  6388                           ;PAI.c: 187: else;PAI.c: 188: digitar=1;
  6389   002832  0E01               	movlw	1
  6390   002834  6E55               	movwf	_digitar^0,c
  6391   002836                     i2l2845:
  6392                           
  6393                           ;PAI.c: 189: operacion[cont]=A;
  6394   002836  5059               	movf	_cont^0,w,c
  6395   002838  0F3D               	addlw	low _operacion
  6396   00283A  6ED9               	movwf	fsr2l,c
  6397   00283C  6ADA               	clrf	fsr2h,c
  6398   00283E  C002  FFDF         	movff	OpTeclado@A,indf2
  6399                           
  6400                           ;PAI.c: 190: cont++;
  6401   002842  2A59               	incf	_cont^0,f,c
  6402   002844  0012               	return		;funcret
  6403   002846                     __end_of_OpTeclado:
  6404                           	callstack 0
  6405                           
  6406 ;; *************** function _ControlError *****************
  6407 ;; Defined at:
  6408 ;;		line 301 in file "PAI.c"
  6409 ;; Parameters:    Size  Location     Type
  6410 ;;  A               1    wreg     unsigned char 
  6411 ;; Auto vars:     Size  Location     Type
  6412 ;;  A               1    0[COMRAM] unsigned char 
  6413 ;; Return value:  Size  Location     Type
  6414 ;;                  1    wreg      unsigned char 
  6415 ;; Registers used:
  6416 ;;		wreg, status,2, status,0
  6417 ;; Tracked objects:
  6418 ;;		On entry : 0/0
  6419 ;;		On exit  : 0/0
  6420 ;;		Unchanged: 0/0
  6421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6422 ;;      Params:         0       0       0       0       0       0       0       0       0
  6423 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6424 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6425 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6426 ;;Total ram usage:        1 bytes
  6427 ;; Hardware stack levels used: 1
  6428 ;; This function calls:
  6429 ;;		Nothing
  6430 ;; This function is called by:
  6431 ;;		_OpTeclado
  6432 ;; This function uses a non-reentrant model
  6433 ;;
  6434                           
  6435                           	psect	text31
  6436   002616                     __ptext31:
  6437                           	callstack 0
  6438   002616                     _ControlError:
  6439                           	callstack 23
  6440                           
  6441                           ;incstack = 0
  6442                           ;ControlError@A stored from wreg
  6443   002616  6E01               	movwf	ControlError@A^0,c
  6444                           
  6445                           ;PAI.c: 302: switch(A){
  6446   002618  D022               	goto	i2l2521
  6447   00261A                     i2l2453:
  6448   00261A  5059               	movf	_cont^0,w,c
  6449   00261C  B4D8               	btfsc	status,2,c
  6450   00261E  D008               	goto	i2u174_40
  6451   002620  0E02               	movlw	2
  6452   002622  1859               	xorwf	_cont^0,w,c
  6453   002624  A4D8               	btfss	status,2,c
  6454   002626  D006               	goto	i2l2465
  6455   002628  0E21               	movlw	33
  6456   00262A  183E               	xorwf	(_operacion+1)^0,w,c
  6457   00262C  B4D8               	btfsc	status,2,c
  6458   00262E  D002               	goto	i2l2465
  6459   002630                     i2u174_40:
  6460   002630  0E01               	movlw	1
  6461   002632  0012               	return	
  6462   002634                     i2l2465:
  6463                           
  6464                           ;PAI.c: 304: else return 0;
  6465   002634  0E00               	movlw	0
  6466   002636  0012               	return	
  6467   002638                     i2l2469:
  6468   002638  0459               	decf	_cont^0,w,c
  6469   00263A  B4D8               	btfsc	status,2,c
  6470   00263C  D7F9               	goto	i2u174_40
  6471   00263E  D7FA               	goto	i2l2465
  6472   002640                     i2l2481:
  6473   002640  0E03               	movlw	3
  6474   002642  1859               	xorwf	_cont^0,w,c
  6475   002644  B4D8               	btfsc	status,2,c
  6476   002646  D7F4               	goto	i2u174_40
  6477                           
  6478                           ;PAI.c: 308: else if(cont==2 && operacion[1]=='!') return 1;
  6479   002648  0E02               	movlw	2
  6480   00264A  1859               	xorwf	_cont^0,w,c
  6481   00264C  A4D8               	btfss	status,2,c
  6482   00264E  D7F2               	goto	i2l2465
  6483   002650  0E21               	movlw	33
  6484   002652  183E               	xorwf	(_operacion+1)^0,w,c
  6485   002654  D7F2               	goto	L4
  6486   002656                     i2l2503:
  6487   002656  5059               	movf	_cont^0,w,c
  6488   002658  A4D8               	btfss	status,2,c
  6489   00265A  D7EA               	goto	i2u174_40
  6490   00265C  D7EB               	goto	i2l2465
  6491   00265E                     i2l2521:
  6492   00265E  5001               	movf	ControlError@A^0,w,c
  6493                           
  6494                           ; Switch size 1, requested type "simple"
  6495                           ; Number of cases is 4, Range of values is 1 to 4
  6496                           ; switch strategies available:
  6497                           ; Name         Instructions Cycles
  6498                           ; simple_byte           13     7 (average)
  6499                           ;	Chosen strategy is simple_byte
  6500   002660  0A01               	xorlw	1	; case 1
  6501   002662  B4D8               	btfsc	status,2,c
  6502   002664  D7DA               	goto	i2l2453
  6503   002666  0A03               	xorlw	3	; case 2
  6504   002668  B4D8               	btfsc	status,2,c
  6505   00266A  D7E6               	goto	i2l2469
  6506   00266C  0A01               	xorlw	1	; case 3
  6507   00266E  B4D8               	btfsc	status,2,c
  6508   002670  D7E7               	goto	i2l2481
  6509   002672  0A07               	xorlw	7	; case 4
  6510   002674  B4D8               	btfsc	status,2,c
  6511   002676  D7EF               	goto	i2l2503
  6512   002678  D7DD               	goto	i2l2465
  6513   00267A                     __end_of_ControlError:
  6514                           	callstack 0
  6515                           
  6516                           	psect	rparam
  6517   000000                     
  6518                           	psect	temp
  6519   00005A                     btemp:
  6520                           	callstack 0
  6521   00005A                     	ds	1
  6522   000000                     int$flags	set	btemp
  6523   000000                     wtemp8	set	btemp+1
  6524   000000                     ttemp5	set	btemp+1
  6525   000000                     ttemp6	set	btemp+4
  6526   000000                     ttemp7	set	btemp+8
  6527                           
  6528                           	psect	idloc
  6529                           
  6530                           ;Config register IDLOC0 @ 0x200000
  6531                           ;	unspecified, using default values
  6532   200000                     	org	2097152
  6533   200000  FF                 	db	255
  6534                           
  6535                           ;Config register IDLOC1 @ 0x200001
  6536                           ;	unspecified, using default values
  6537   200001                     	org	2097153
  6538   200001  FF                 	db	255
  6539                           
  6540                           ;Config register IDLOC2 @ 0x200002
  6541                           ;	unspecified, using default values
  6542   200002                     	org	2097154
  6543   200002  FF                 	db	255
  6544                           
  6545                           ;Config register IDLOC3 @ 0x200003
  6546                           ;	unspecified, using default values
  6547   200003                     	org	2097155
  6548   200003  FF                 	db	255
  6549                           
  6550                           ;Config register IDLOC4 @ 0x200004
  6551                           ;	unspecified, using default values
  6552   200004                     	org	2097156
  6553   200004  FF                 	db	255
  6554                           
  6555                           ;Config register IDLOC5 @ 0x200005
  6556                           ;	unspecified, using default values
  6557   200005                     	org	2097157
  6558   200005  FF                 	db	255
  6559                           
  6560                           ;Config register IDLOC6 @ 0x200006
  6561                           ;	unspecified, using default values
  6562   200006                     	org	2097158
  6563   200006  FF                 	db	255
  6564                           
  6565                           ;Config register IDLOC7 @ 0x200007
  6566                           ;	unspecified, using default values
  6567   200007                     	org	2097159
  6568   200007  FF                 	db	255
  6569                           
  6570                           	psect	config
  6571                           
  6572                           ;Config register CONFIG1L @ 0x300000
  6573                           ;	unspecified, using default values
  6574                           ;	PLL Prescaler Selection bits
  6575                           ;	PLLDIV = 0x0, unprogrammed default
  6576                           ;	System Clock Postscaler Selection bits
  6577                           ;	CPUDIV = 0x0, unprogrammed default
  6578                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  6579                           ;	USBDIV = 0x0, unprogrammed default
  6580   300000                     	org	3145728
  6581   300000  00                 	db	0
  6582                           
  6583                           ;Config register CONFIG1H @ 0x300001
  6584                           ;	Oscillator Selection bits
  6585                           ;	FOSC = INTOSC_EC, Internal oscillator, CLKO function on RA6, EC used by USB (INTCKO)
  6586                           ;	Fail-Safe Clock Monitor Enable bit
  6587                           ;	FCMEN = 0x0, unprogrammed default
  6588                           ;	Internal/External Oscillator Switchover bit
  6589                           ;	IESO = 0x0, unprogrammed default
  6590   300001                     	org	3145729
  6591   300001  09                 	db	9
  6592                           
  6593                           ;Config register CONFIG2L @ 0x300002
  6594                           ;	unspecified, using default values
  6595                           ;	Power-up Timer Enable bit
  6596                           ;	PWRT = 0x1, unprogrammed default
  6597                           ;	Brown-out Reset Enable bits
  6598                           ;	BOR = 0x3, unprogrammed default
  6599                           ;	Brown-out Reset Voltage bits
  6600                           ;	BORV = 0x3, unprogrammed default
  6601                           ;	USB Voltage Regulator Enable bit
  6602                           ;	VREGEN = 0x0, unprogrammed default
  6603   300002                     	org	3145730
  6604   300002  1F                 	db	31
  6605                           
  6606                           ;Config register CONFIG2H @ 0x300003
  6607                           ;	Watchdog Timer Enable bit
  6608                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  6609                           ;	Watchdog Timer Postscale Select bits
  6610                           ;	WDTPS = 0xF, unprogrammed default
  6611   300003                     	org	3145731
  6612   300003  1E                 	db	30
  6613                           
  6614                           ; Padding undefined space
  6615   300004                     	org	3145732
  6616   300004  FF                 	db	255
  6617                           
  6618                           ;Config register CONFIG3H @ 0x300005
  6619                           ;	unspecified, using default values
  6620                           ;	CCP2 MUX bit
  6621                           ;	CCP2MX = 0x1, unprogrammed default
  6622                           ;	PORTB A/D Enable bit
  6623                           ;	PBADEN = 0x1, unprogrammed default
  6624                           ;	Low-Power Timer 1 Oscillator Enable bit
  6625                           ;	LPT1OSC = 0x0, unprogrammed default
  6626                           ;	MCLR Pin Enable bit
  6627                           ;	MCLRE = 0x1, unprogrammed default
  6628   300005                     	org	3145733
  6629   300005  83                 	db	131
  6630                           
  6631                           ;Config register CONFIG4L @ 0x300006
  6632                           ;	Stack Full/Underflow Reset Enable bit
  6633                           ;	STVREN = 0x1, unprogrammed default
  6634                           ;	Single-Supply ICSP Enable bit
  6635                           ;	LVP = OFF, Single-Supply ICSP disabled
  6636                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  6637                           ;	ICPRT = 0x0, unprogrammed default
  6638                           ;	Extended Instruction Set Enable bit
  6639                           ;	XINST = 0x0, unprogrammed default
  6640                           ;	Background Debugger Enable bit
  6641                           ;	DEBUG = 0x1, unprogrammed default
  6642   300006                     	org	3145734
  6643   300006  81                 	db	129
  6644                           
  6645                           ; Padding undefined space
  6646   300007                     	org	3145735
  6647   300007  FF                 	db	255
  6648                           
  6649                           ;Config register CONFIG5L @ 0x300008
  6650                           ;	unspecified, using default values
  6651                           ;	Code Protection bit
  6652                           ;	CP0 = 0x1, unprogrammed default
  6653                           ;	Code Protection bit
  6654                           ;	CP1 = 0x1, unprogrammed default
  6655                           ;	Code Protection bit
  6656                           ;	CP2 = 0x1, unprogrammed default
  6657                           ;	Code Protection bit
  6658                           ;	CP3 = 0x1, unprogrammed default
  6659   300008                     	org	3145736
  6660   300008  0F                 	db	15
  6661                           
  6662                           ;Config register CONFIG5H @ 0x300009
  6663                           ;	unspecified, using default values
  6664                           ;	Boot Block Code Protection bit
  6665                           ;	CPB = 0x1, unprogrammed default
  6666                           ;	Data EEPROM Code Protection bit
  6667                           ;	CPD = 0x1, unprogrammed default
  6668   300009                     	org	3145737
  6669   300009  C0                 	db	192
  6670                           
  6671                           ;Config register CONFIG6L @ 0x30000A
  6672                           ;	unspecified, using default values
  6673                           ;	Write Protection bit
  6674                           ;	WRT0 = 0x1, unprogrammed default
  6675                           ;	Write Protection bit
  6676                           ;	WRT1 = 0x1, unprogrammed default
  6677                           ;	Write Protection bit
  6678                           ;	WRT2 = 0x1, unprogrammed default
  6679                           ;	Write Protection bit
  6680                           ;	WRT3 = 0x1, unprogrammed default
  6681   30000A                     	org	3145738
  6682   30000A  0F                 	db	15
  6683                           
  6684                           ;Config register CONFIG6H @ 0x30000B
  6685                           ;	unspecified, using default values
  6686                           ;	Configuration Register Write Protection bit
  6687                           ;	WRTC = 0x1, unprogrammed default
  6688                           ;	Boot Block Write Protection bit
  6689                           ;	WRTB = 0x1, unprogrammed default
  6690                           ;	Data EEPROM Write Protection bit
  6691                           ;	WRTD = 0x1, unprogrammed default
  6692   30000B                     	org	3145739
  6693   30000B  E0                 	db	224
  6694                           
  6695                           ;Config register CONFIG7L @ 0x30000C
  6696                           ;	unspecified, using default values
  6697                           ;	Table Read Protection bit
  6698                           ;	EBTR0 = 0x1, unprogrammed default
  6699                           ;	Table Read Protection bit
  6700                           ;	EBTR1 = 0x1, unprogrammed default
  6701                           ;	Table Read Protection bit
  6702                           ;	EBTR2 = 0x1, unprogrammed default
  6703                           ;	Table Read Protection bit
  6704                           ;	EBTR3 = 0x1, unprogrammed default
  6705   30000C                     	org	3145740
  6706   30000C  0F                 	db	15
  6707                           
  6708                           ;Config register CONFIG7H @ 0x30000D
  6709                           ;	unspecified, using default values
  6710                           ;	Boot Block Table Read Protection bit
  6711                           ;	EBTRB = 0x1, unprogrammed default
  6712   30000D                     	org	3145741
  6713   30000D  40                 	db	64
  6714                           tosu	equ	0xFFF
  6715                           tosh	equ	0xFFE
  6716                           tosl	equ	0xFFD
  6717                           stkptr	equ	0xFFC
  6718                           pclatu	equ	0xFFB
  6719                           pclath	equ	0xFFA
  6720                           pcl	equ	0xFF9
  6721                           tblptru	equ	0xFF8
  6722                           tblptrh	equ	0xFF7
  6723                           tblptrl	equ	0xFF6
  6724                           tablat	equ	0xFF5
  6725                           prodh	equ	0xFF4
  6726                           prodl	equ	0xFF3
  6727                           indf0	equ	0xFEF
  6728                           postinc0	equ	0xFEE
  6729                           postdec0	equ	0xFED
  6730                           preinc0	equ	0xFEC
  6731                           plusw0	equ	0xFEB
  6732                           fsr0h	equ	0xFEA
  6733                           fsr0l	equ	0xFE9
  6734                           wreg	equ	0xFE8
  6735                           indf1	equ	0xFE7
  6736                           postinc1	equ	0xFE6
  6737                           postdec1	equ	0xFE5
  6738                           preinc1	equ	0xFE4
  6739                           plusw1	equ	0xFE3
  6740                           fsr1h	equ	0xFE2
  6741                           fsr1l	equ	0xFE1
  6742                           bsr	equ	0xFE0
  6743                           indf2	equ	0xFDF
  6744                           postinc2	equ	0xFDE
  6745                           postdec2	equ	0xFDD
  6746                           preinc2	equ	0xFDC
  6747                           plusw2	equ	0xFDB
  6748                           fsr2h	equ	0xFDA
  6749                           fsr2l	equ	0xFD9
  6750                           status	equ	0xFD8

Data Sizes:
    Strings     45
    Constant    0
    Data        38
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     60      89
    BANK0           160     43      59
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    GuardarASCII@arreglo	PTR unsigned char  size(1) Largest target is 8
		 -> barco(BANK0[8]), cereza(BANK0[8]), pacman2(COMRAM[8]), pacman(COMRAM[8]), 

    MensajeLCD_Var@a	PTR unsigned char  size(1) Largest target is 14
		 -> STR_5(CODE[14]), STR_4(CODE[9]), STR_3(CODE[14]), STR_2(CODE[12]), 
		 -> STR_1(CODE[10]), 


Critical Paths under _main in COMRAM

    _ModuloOperacion->_EscribeLCD_n32
    _abs->___fttol
    ___lbtoft->___ftpack
    ___ftdiv->___ftpack
    ___awtoft->_abs
    _MensajeLCD_Var->_EscribeLCD_c
    _EscribeLCD_n32->___lldiv
    ___lldiv->___llmod
    _EscribeLCD_2Decimales->_EscribeLCD_n8
    ___fttol->___ftmul
    ___ftmul->___ftpack
    _EscribeLCD_n8->___fttol
    ___lbdiv->___lbmod
    _InicializaLCD->_EnviaDato
    _BorraLCD->_EnviaDato
    _GuardarASCII->_DireccionaLCD
    _GuardarASCII->_EscribeLCD_c
    _EscribeLCD_c->_EnviaDato
    _DireccionaLCD->_EnviaDato
    _EnviaDato->_RetardoLCD

Critical Paths under _ISR in COMRAM

    _ISR->_OpTeclado
    _OpTeclado->_ControlError

Critical Paths under _main in BANK0

    _main->_ModuloOperacion

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   43053
                                             58 COMRAM     2     2      0
                           _BorraLCD
                       _ConfiguraLCD
                      _DireccionaLCD
                       _EscribeLCD_c
                       _GuardarASCII
                      _InicializaLCD
                     _MensajeLCD_Var
                    _ModuloOperacion
 ---------------------------------------------------------------------------------
 (1) _ModuloOperacion                                     43    43      0   40527
                                              0 BANK0     43    43      0
                      _DireccionaLCD
              _EscribeLCD_2Decimales
                       _EscribeLCD_c
                     _EscribeLCD_n32
                      _EscribeLCD_n8
                     _MensajeLCD_Var
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___fttol
                            ___lbmod
                           ___lbtoft
                             ___lmul
                                _abs
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     142
                                             43 COMRAM     4     2      2
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     826
                                              5 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2866
                                             13 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     440
                                              5 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3404
                                             13 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3239
                                             47 COMRAM     4     1      3
                           ___ftpack
                            ___fttol (ARG)
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (2) _MensajeLCD_Var                                       7     5      2     982
                                             10 COMRAM     7     5      2
                       _EscribeLCD_c
 ---------------------------------------------------------------------------------
 (2) _EscribeLCD_n32                                      31    26      5   15116
                                             27 COMRAM    31    26      5
                       _EscribeLCD_c
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8    6999
                                              5 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    5634
                                             14 COMRAM    13     5      8
                            ___llmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _EscribeLCD_2Decimales                                7     4      3    7550
                                             48 COMRAM     7     4      3
                       _EscribeLCD_c
                      _EscribeLCD_n8
                            ___awmod
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1012
                                             28 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    3450
                                             13 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2844
                                              5 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     448
                                              5 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _EscribeLCD_n8                                        5     4      1    2319
                                             43 COMRAM     5     4      1
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
                            ___fttol (ARG)
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     615
                                              5 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     390
                                              9 COMRAM     4     3      1
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _InicializaLCD                                        0     0      0     220
                           _BorraLCD
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (2) _BorraLCD                                             0     0      0     110
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (1) _GuardarASCII                                         3     2      1     785
                                             10 COMRAM     3     2      1
                      _DireccionaLCD
                       _EscribeLCD_c
 ---------------------------------------------------------------------------------
 (3) _EscribeLCD_c                                         1     1      0     132
                                              9 COMRAM     1     1      0
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (2) _DireccionaLCD                                        1     1      0     132
                                              9 COMRAM     1     1      0
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (4) _EnviaDato                                            2     2      0      88
                                              7 COMRAM     2     2      0
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (4) _RetardoLCD                                           2     2      0      22
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _HabilitaLCD                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfiguraLCD                                         1     1      0      66
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  2     2      0    1478
                                              3 COMRAM     2     2      0
                          _OpTeclado
 ---------------------------------------------------------------------------------
 (7) _OpTeclado                                            2     1      1    1478
                                              1 COMRAM     2     1      1
                       _ControlError
 ---------------------------------------------------------------------------------
 (8) _ControlError                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BorraLCD
     _EnviaDato
       _HabilitaLCD
       _RetardoLCD
     _HabilitaLCD
     _RetardoLCD
   _ConfiguraLCD
   _DireccionaLCD
     _EnviaDato
     _HabilitaLCD
     _RetardoLCD
   _EscribeLCD_c
     _EnviaDato
     _HabilitaLCD
     _RetardoLCD
   _GuardarASCII
     _DireccionaLCD
     _EscribeLCD_c
   _InicializaLCD
     _BorraLCD
     _EnviaDato
     _HabilitaLCD
     _RetardoLCD
   _MensajeLCD_Var
     _EscribeLCD_c
   _ModuloOperacion
     _DireccionaLCD
     _EscribeLCD_2Decimales
       _EscribeLCD_c
       _EscribeLCD_n8
         _EnviaDato
         _HabilitaLCD
         _RetardoLCD
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
       ___awmod
       ___ftmul
       ___fttol
     _EscribeLCD_c
     _EscribeLCD_n32
       _EscribeLCD_c
       ___lldiv
         ___llmod (ARG)
       ___llmod
     _EscribeLCD_n8
     _MensajeLCD_Var
     ___awtoft
       ___ftpack
       ___fttol (ARG)
       _abs (ARG)
         ___fttol (ARG)
     ___ftdiv
       ___ftpack
     ___ftge
     ___fttol
     ___lbmod
     ___lbtoft
       ___ftpack
     ___lmul
     _abs

 _ISR (ROOT)
   _OpTeclado
     _ControlError

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      32        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2B      3B       5       36.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3C      59       1       94.7%
BITBIGSFRhlhh       22      0       0      24        0.0%
BITBIGSFRlll        20      0       0      30        0.0%
BITBIGSFRhhhhl      19      0       0      21        0.0%
BITBIGSFRhhhhh       D      0       0      20        0.0%
BITBIGSFRhhl         B      0       0      23        0.0%
BITBIGSFRllh         8      0       0      29        0.0%
BITBIGSFRhlhl        7      0       0      25        0.0%
BITBIGSFRhlll        5      0       0      27        0.0%
BITBIGSFRhhhl        4      0       0      22        0.0%
BITBIGSFRlh          1      0       0      28        0.0%
BITBIGSFRhllh        1      0       0      26        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      94      31        0.0%
DATA                 0      0      94       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Mon Apr 17 20:08:38 2023

                     EnviaDato@a 0009                    _InicializaLCD 2332                              l361 243E  
                            l742 2604                              l675 209A                              _GIE 7F97  
                            l996 292A                              _RA0 7C00                              _RB4 7C0C  
                            _RB5 7C0D                              _RB6 7C0E                              _RB7 7C0F  
                            _ISR 0008                              _POR 7E81                              _abs 290C  
                   ___awmod@sign 000B                              wreg 0FE8                             ?_ISR 0001  
                   ___ftdiv@cntr 0017                     ___ftdiv@sign 001C                             ?_abs 002C  
                           l2121 22AC                             l2107 27B8                             l2131 2308  
                           l2123 22CA                             l2205 20F2                             l2215 2138  
                           l2231 219C                             l2311 2554                             l2127 22E0  
                           l2119 22A2                             l3103 188C                             l2153 2858  
                           l2321 2576                             l2129 22FE                             l2241 23FC  
                           l3105 18A8                             l2091 275A                             l2331 2598  
                           l2315 2560                             l2251 2430                             l2411 0836  
                           l3203 1B96                             l3131 196E                             l2085 272E  
                           l2165 2874                             l2157 285E                             l2261 1F1A  
                           l2421 0C98                             l2413 0868                             l3125 18E0  
                           l3117 18CC                             l2087 273E                             l2095 2764  
                           l3063 28EE                             l2183 28DA                             l2175 28C2  
                           l2335 25A6                             l2327 258E                             l2319 256E  
                           l2239 23F0                             l2423 0E8E                             l2415 08EE  
                           l2431 16B0                             l3151 19B8                             l3143 19A6  
                           l2089 2750                             l2169 287C                             l2281 1F74  
                           l2345 21DE                             l2425 10E4                             l2417 09CC  
                           l3161 19EA                             l3129 195C                             l3081 176C  
                           l2291 1F9C                             l2267 1F42                             l2363 2232  
                           l2427 139A                             l2419 0B02                             l2435 27D0  
                           l2603 24EE                             l3091 17D0                             l3083 1788  
                           l2285 1F84                             l2381 2272                             l2373 224A  
                           l2613 253C                             l2533 26E4                             l3165 1A22  
                           l3317 1D3E                             l3309 1D22                             l2631 2344  
                           l2199 20D2                             l2295 1FAC                             l2375 2256  
                           l2367 2242                             l2391 25CE                             l2439 27EA  
                           l2607 2510                             l3167 1A2C                             l3175 1A6C  
                           l3159 19CA                             l3095 182A                             l3271 1CBE  
                           l2641 2362                             l2553 2036                             l2537 26F8  
                           l3193 1B2E                             l3249 1C5A                             l2651 2380  
                           l2547 200E                             l3195 1B56                             l3187 1ADA  
                           l3179 1A9A                             l3275 1CC8                             l3267 1CAA  
                           l2397 25F6                             l2389 25C2                             l2573 2074  
                           l3189 1AEC                             l3269 1CB2                             l2671 23B8  
                           l3287 1CDC                             l3295 1CF4                             l2595 2894  
                           STR_1 081B                             STR_2 080F                             STR_3 0801  
                           STR_4 0825                             STR_5 0801                             u1420 2862  
                           u1340 2294                             u1501 1F2A                             _LATB 0F8A  
                           u3007 1C88                             _LATD 0F8C                             u3017 2734  
                           u1601 21C2                             u1610 21CC                             u3027 2740  
                           u1380 2312                             u1620 21FC                             u1460 2400  
                           u3037 2748                             u3047 2752                             u3057 275C  
                           u1481 1F02                             u1625 21F4                             u1570 257A  
                           u3067 29DA                             u1660 225C                             u1831 1FF6  
                           u1930 296A                             u1690 25D2                             u2810 1A80  
                           u1851 201E                             _PEIE 7F96                             u2860 1BAA  
                           _RBIE 7F93                             _RBIF 7F90                             u2970 1D56  
                           u2890 1CC4                             u2987 1C0A                             u2997 1C60  
                           _RBPU 7F8F                             _TMR0 0FD6                             _TMR1 0FCE  
                 ??_EscribeLCD_c 000A                             abs@a 002C                             _cont 0059  
                           _main 1BC4                     ___ftpack@arg 0006                     ___ftpack@exp 0009  
                           fsr2h 0FDA                             indf2 0FDF                             fsr1l 0FE1  
                           fsr2l 0FD9                             btemp 005A                             prodh 0FF4  
                           prodl 0FF3                             start 000E                   ??_ControlError 0001  
                  ?_GuardarASCII 000B                     ___ftmul@cntr 001B                       OpTeclado@A 0002  
                     OpTeclado@c 0003                     ___param_bank 0000                     ___ftmul@sign 001C  
                          ??_ISR 0004                     ___fttol@exp1 002B                            ??_abs 002E  
                   ___fttol@lval 0027                   ?_InicializaLCD 0001                            ?_main 0001  
                __end_of___lbdiv 2880                  __end_of___awmod 25B0                    EscribeLCD_c@a 000A  
                __end_of___lbmod 28E2                  __end_of___ftdiv 20CC                  __end_of___lldiv 2450  
                __end_of___ftmul 1FE6                            _T0CON 0FD5                            _T1CON 0FCD  
                __end_of___llmod 2616                  __end_of___fttol 2284                            _LATD0 7C60  
                          _LATD2 7C62                            _LATD3 7C63                            i2l221 1DC2  
                          i2l231 1E06                            i2l241 1E5A                            i2l233 1E16  
                          i2l225 1DD2                            i2l217 1DA2                            i2l245 1E7E  
                          i2l237 1E3A                            i2l229 1DF6                            i2l254 1EE6  
                          i2l247 1E8E                            i2l239 1E4A                            i2l249 1E9E  
                          _PORTB 0F81                            _TRISB 0F93                            _TRISD 0F95  
            ___lmul@multiplicand 000A                  ??_EscribeLCD_n8 002D                            _barco 008B  
                  ___awtoft@sign 0033                            _reset 0053                    ___ftpack@sign 000A  
           EscribeLCD_n32@decena 0039                            main@i 003C                            tablat 0FF5  
                    _HabilitaLCD 29D6             EscribeLCD_n32@millar 0035             EscribeLCD_n32@millon 0029  
                          ttemp5 005B                            ttemp6 005E                            ttemp7 0062  
                          status 0FD8                            wtemp8 005B             EscribeLCD_n32@unidad 003A  
                ___lbdiv@divisor 000A                  ___lbdiv@counter 000C                   ??_GuardarASCII 000C  
                  ControlError@A 0001                 __end_of_BorraLCD 29C6                  __initialization 267A  
                   __end_of_main 1D68                           ??_main 003B             __end_of_ConfiguraLCD 2970  
                  ___fttol@sign1 0026                    __activetblptr 0002         EscribeLCD_2Decimales@num 0034  
                         _ADCON1 0FC1                 ___llmod@dividend 0006                   DireccionaLCD@a 000A  
                 EscribeLCD_n8@a 0030                   EscribeLCD_n8@b 002C                 __end_of___awtoft 28B8  
               __end_of___ftpack 2332                 __end_of___lbtoft 2958                           i2l3021 1E6A  
                         i2l3009 1E26                           i2l3033 1EAC                           i2l3041 1EBE  
                         i2l2503 2656                           i2l3039 1EBC                           i2l2521 265E  
                         i2l2453 261A                           i2l2481 2640                           i2l2465 2634  
                         i2l2469 2638                           i2l2843 2832                           i2l2845 2836  
                         i2l2991 1DB6                           i2l2985 1D96                           i2l2997 1DE2  
                         _TMR0IE 7F95                           _TMR0IF 7F92                           _TMR1IE 7CE8  
                         _TMR1IF 7CF0                           _TRISA0 7C90            __end_of_DireccionaLCD 29B2  
                     _RetardoLCD 272A                           _Cambio 0056                 ??_EscribeLCD_n32 0021  
           EscribeLCD_n8@centena 002D                           ___ftge 24CC                           ___lmul 26D4  
                      ??___lbdiv 000B                        ??___awmod 000A                        ??___lbmod 0007  
                      ??___ftdiv 0014                        ??___lldiv 0017                        ??___ftmul 0014  
                      ??___llmod 000E                           _cereza 0093                        ??___fttol 0021  
                ??_InicializaLCD 000A                           _borrar 0058                           _pacman 004B  
                         clear_0 26C0                  ___awmod@divisor 0008                           isa$std 0001  
                ___awmod@counter 000A             __end_of_EscribeLCD_c 299C            EscribeLCD_n32@cienmil 002D  
          EscribeLCD_n32@centena 0037            ___ftmul@f3_as_product 0018            EscribeLCD_n32@diezmil 0031  
                   __pdataCOMRAM 003D             __end_of_ControlError 267A                     __mediumconst 0000  
                         tblptrh 0FF7                           tblptrl 0FF6                           tblptru 0FF8  
               ___lbdiv@dividend 000B                  ___lbmod@divisor 0006                       __accesstop 0060  
        __end_of__initialization 26C6                  ___lbmod@counter 0008            _EscribeLCD_2Decimales 2450  
                     ___ftge@ff1 0006                       ___ftge@ff2 0009                    ___rparam_used 0001  
                     ___ftdiv@f1 000E                       ___ftdiv@f2 0011                       ___ftdiv@f3 0018  
                     ___awtoft@c 0030                       ___lbtoft@c 0011                       ___ftmul@f1 000E  
                     ___ftmul@f2 0011                       ___fttol@f1 001D                   __pcstackCOMRAM 0001  
                   __pidataBANK0 29C6                __end_of_EnviaDato 27C6                 ___lbdiv@quotient 000D  
         EscribeLCD_2Decimales@a 0031                __end_of_OpTeclado 2846  EscribeLCD_2Decimales@decimalesP 0036  
           __end_of_GuardarASCII 290C      EscribeLCD_2Decimales@unidad 0037                        ?_BorraLCD 0001  
                 _MensajeLCD_Var 27C6                  MensajeLCD_Var@a 000B                  MensajeLCD_Var@i 0010  
                    ?_RetardoLCD 0001                      RetardoLCD@a 0007             ModuloOperacion@b_195 007D  
           ModuloOperacion@i_197 0078                          ?___ftge 0006                          ?___lmul 0006  
                EscribeLCD_n32@a 001C                  EscribeLCD_n32@b 0020                   ___lmul@product 000E  
                      ?___awtoft 0030                        ?___ftpack 0006                        ?___lbtoft 000E  
         __end_of_MensajeLCD_Var 2806                       ??_BorraLCD 000A           ?_EscribeLCD_2Decimales 0031  
         ModuloOperacion@var_196 0074                     ?_HabilitaLCD 0001                GuardarASCII@cgram 000C  
                   _ConfiguraLCD 2958                ??_ModuloOperacion 0060                          __Hparam 0000  
                        __Lparam 0000                    GuardarASCII@i 000D                          ___lbdiv 2846  
                        ___awmod 2540                          ___lbmod 28B8                          ___ftdiv 1FE6  
                        ___lldiv 23CE                          ___ftmul 1EF2                          ___llmod 25B0  
                        ___fttol 21B2                     __psmallconst 0800                          __pcinit 267A  
                     ??___awtoft 0033                       ??___ftpack 000B                       ??___lbtoft 0011  
                        __ramtop 0800                ModuloOperacion@n1 0069                ModuloOperacion@n2 006C  
                        _digitar 0055                          __ptext0 1BC4                          __ptext1 16F8  
                        __ptext2 290C                          __ptext3 26D4                          __ptext4 2934  
                        __ptext5 24CC                          __ptext6 1FE6                          __ptext7 2880  
                        __ptext8 27C6                          __ptext9 0830                          _pacman2 0043  
                        _limpiar 0057                 ___awmod@dividend 0006                  ?_MensajeLCD_Var 000B  
          __end_of_EscribeLCD_n8 21B2                   __pintcode_body 1D68             end_of_initialization 26C6  
                  __Lmediumconst 0000                          int_func 1D68                     _EscribeLCD_c 2986  
                ___lldiv@divisor 0013                  ___lldiv@counter 001B                     _ControlError 2616  
                        postdec1 0FE5                          postinc0 0FEE                 ___lbmod@dividend 0007  
                    ___lbmod@rem 0009               MensajeLCD_Var@cont 000C                      ___ftdiv@exp 001B  
                   _GuardarASCII 28E2                      ___ftmul@exp 0017                   __end_of___ftge 2540  
                 __end_of___lmul 272A              GuardarASCII@arreglo 000B                    __pidataCOMRAM 2970  
          __end_of_InicializaLCD 23CE                        _EnviaDato 2780              start_initialization 267A  
                    __end_of_ISR 1EF2                      __end_of_abs 2934                        _OpTeclado 2806  
                   ??_RetardoLCD 0006                  ___llmod@divisor 000A                  ___llmod@counter 000E  
            EscribeLCD_n8@decena 002E                         ??___ftge 000C                         ??___lmul 000E  
                    __pdataBANK0 008B              EscribeLCD_n8@unidad 002F                       ?_EnviaDato 0001  
                    __pbssCOMRAM 0053               __end_of_RetardoLCD 2780                    __pcstackBANK0 0060  
        ??_EscribeLCD_2Decimales 0034                  _ModuloOperacion 16F8                       ?_OpTeclado 0002  
                  _DireccionaLCD 299C              ModuloOperacion@ResL 007E                        __pintcode 0008  
            ModuloOperacion@num1 0087              ModuloOperacion@num2 0086                         ?___lbdiv 000A  
                       ?___awmod 0006                         ?___lbmod 0006                         ?___ftdiv 000E  
                       ?___lldiv 000F                         ?___ftmul 000E                         ?___llmod 0006  
                       ?___fttol 001D                 ??_MensajeLCD_Var 000D          ModuloOperacion@ResL_194 0082  
                    __smallconst 0800                 ModuloOperacion@b 007C                 ModuloOperacion@i 006F  
                 ?_DireccionaLCD 0001                        _operacion 003D                         i2u174_40 2630  
                       i2u258_40 1ED4                         i2u259_45 1ED6          __end_of_ModuloOperacion 1BC4  
                    ??_EnviaDato 0008                      ??_OpTeclado 0003                         _BorraLCD 29B2  
       EscribeLCD_n32@cienmillon 0021                ___lmul@multiplier 0006                        copy_data0 268E  
                      copy_data1 26AE         EscribeLCD_n32@diezmillon 0025                         __Hrparam 0000  
                       __Lrparam 0000                         ___awtoft 2880                         ___ftpack 2284  
                       ___lbtoft 2934                   _EscribeLCD_n32 0830                    ConfiguraLCD@a 0006  
                       _activado 0054               ModuloOperacion@n1L 0065               ModuloOperacion@Res 0088  
             ModuloOperacion@var 0070                         __ptext10 25B0                         __ptext11 23CE  
                       __ptext20 2332                         __ptext12 2450                         __ptext21 29B2  
                       __ptext13 21B2                         __ptext30 2806                         __ptext22 28E2  
                       __ptext14 1EF2                         __ptext31 2616                         __ptext23 2986  
                       __ptext15 2284                         __ptext24 299C                         __ptext16 2540  
                       __ptext25 2780                         __ptext17 20CC                         __ptext26 272A  
                       __ptext18 28B8                         __ptext27 29D6                         __ptext19 2846  
                       __ptext28 2958                  ??_DireccionaLCD 000A                         _interfaz 0042  
                       isa$xinst 0000                         int$flags 005A           __end_of_EscribeLCD_n32 16F8  
               ?_ModuloOperacion 0001                    _EscribeLCD_n8 20CC    __end_of_EscribeLCD_2Decimales 24CC  
                       intlevel2 0000                    ??_HabilitaLCD 0006                 ___lldiv@dividend 000F  
                  ?_ConfiguraLCD 0001                  ?_EscribeLCD_n32 001C                 ___lldiv@quotient 0017  
                 ?_EscribeLCD_n8 002C                   ??_ConfiguraLCD 0006                    ?_EscribeLCD_c 0001  
                  ?_ControlError 0001              __end_of_HabilitaLCD 29E4  
